/*
    This file was generated automatically by Alchitry Labs 2.0.29-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module alu_manual_tester (
        input wire clk,
        input wire rst,
        input wire [4:0] io_button,
        input wire [2:0][7:0] io_dip,
        output reg [2:0][7:0] io_led,
        output reg [7:0] io_segment,
        output reg [3:0] io_select,
        output reg [7:0] led
    );
    localparam CLOCK_DIVIDER = 5'h1a;
    localparam SEVEN_SEG_DIV = 5'h10;
    logic slow_clock;
    localparam SLOW_CLOCK_DEFAULT_SPEED = 5'h1a;
    localparam CLK_FREQ = 27'h5f5e100;
    localparam SIZE = 4'h8;
    localparam SEG_REFRESH = 4'ha;
    localparam E_Toggle_HIGH_A = 3'h0;
    localparam E_Toggle_LOW_A = 3'h1;
    localparam E_Toggle_HIGH_B = 3'h2;
    localparam E_Toggle_LOW_B = 3'h3;
    localparam E_Toggle_WAIT = 3'h4;
    localparam _MP_RISE_794025960 = 1'h1;
    localparam _MP_FALL_794025960 = 1'h0;
    logic M_slow_clock_edge_in;
    logic M_slow_clock_edge_out;
    
    edge_detector #(
        .RISE(_MP_RISE_794025960),
        .FALL(_MP_FALL_794025960)
    ) slow_clock_edge (
        .clk(clk),
        .in(M_slow_clock_edge_in),
        .out(M_slow_clock_edge_out)
    );
    
    
    localparam logic [4:0][0:0] _MP_RISE_1783367272 = {{1'h1, 1'h1, 1'h1, 1'h1, 1'h1}};
    localparam logic [4:0][0:0] _MP_FALL_1783367272 = {{1'h0, 1'h0, 1'h0, 1'h0, 1'h0}};
    logic [4:0] M_io_button_edge_in;
    logic [4:0] M_io_button_edge_out;
    
    genvar idx_0_1783367272;
    
    generate
        for (idx_0_1783367272 = 0; idx_0_1783367272 < 5; idx_0_1783367272 = idx_0_1783367272 + 1) begin: forLoop_idx_0_1783367272
            edge_detector #(
                .RISE(_MP_RISE_1783367272[idx_0_1783367272]),
                .FALL(_MP_FALL_1783367272[idx_0_1783367272])
            ) io_button_edge (
                .clk(clk),
                .in(M_io_button_edge_in[idx_0_1783367272]),
                .out(M_io_button_edge_out[idx_0_1783367272])
            );
        end
    endgenerate
    
    
    localparam logic [4:0][26:0] _MP_CLK_FREQ_989949942 = {{27'h5f5e100, 27'h5f5e100, 27'h5f5e100, 27'h5f5e100, 27'h5f5e100}};
    localparam _MP_MIN_DELAY_989949942 = 5'h14;
    localparam _MP_NUM_SYNC_989949942 = 2'h2;
    logic [4:0] M_io_button_cond_in;
    logic [4:0] M_io_button_cond_out;
    
    genvar idx_0_989949942;
    
    generate
        for (idx_0_989949942 = 0; idx_0_989949942 < 5; idx_0_989949942 = idx_0_989949942 + 1) begin: forLoop_idx_0_989949942
            button_conditioner #(
                .CLK_FREQ(_MP_CLK_FREQ_989949942[idx_0_989949942]),
                .MIN_DELAY(_MP_MIN_DELAY_989949942),
                .NUM_SYNC(_MP_NUM_SYNC_989949942)
            ) io_button_cond (
                .clk(clk),
                .in(M_io_button_cond_in[idx_0_989949942]),
                .out(M_io_button_cond_out[idx_0_989949942])
            );
        end
    endgenerate
    
    
    logic [1:0] D_seg_multiplex_d, D_seg_multiplex_q = 1'h0;
    localparam _MP_SIZE_1547058878 = 1'h1;
    localparam _MP_DIV_1547058878 = 5'h1a;
    localparam _MP_TOP_1547058878 = 1'h0;
    localparam _MP_UP_1547058878 = 1'h1;
    logic [0:0] M_slow_clk_value;
    
    counter #(
        .SIZE(_MP_SIZE_1547058878),
        .DIV(_MP_DIV_1547058878),
        .TOP(_MP_TOP_1547058878),
        .UP(_MP_UP_1547058878)
    ) slow_clk (
        .clk(clk),
        .rst(rst),
        .value(M_slow_clk_value)
    );
    
    
    localparam _MP_SIZE_124578976 = 1'h1;
    localparam _MP_DIV_124578976 = 4'ha;
    localparam _MP_TOP_124578976 = 1'h0;
    localparam _MP_UP_124578976 = 1'h1;
    logic [0:0] M_seg_clk_value;
    
    counter #(
        .SIZE(_MP_SIZE_124578976),
        .DIV(_MP_DIV_124578976),
        .TOP(_MP_TOP_124578976),
        .UP(_MP_UP_124578976)
    ) seg_clk (
        .clk(clk),
        .rst(rst),
        .value(M_seg_clk_value)
    );
    
    
    logic [7:0] D_counter_d, D_counter_q = 0;
    logic [2:0] D_speed_pointer_d, D_speed_pointer_q = 5'h1a;
    logic D_slow_clock_enable_d, D_slow_clock_enable_q = 1'h0;
    logic [2:0] D_state_d, D_state_q = 3'h4;
    logic [15:0] D_a_low_d, D_a_low_q = 0;
    logic [15:0] D_a_high_d, D_a_high_q = 0;
    logic [15:0] D_b_low_d, D_b_low_q = 0;
    logic [15:0] D_b_high_d, D_b_high_q = 0;
    localparam _MP_DIGITS_1475807104 = 3'h4;
    localparam _MP_DIV_1475807104 = 5'h10;
    logic [3:0][3:0] M_seg_values;
    logic [6:0] M_seg_seg;
    logic [3:0] M_seg_sel;
    
    multi_seven_seg #(
        .DIGITS(_MP_DIGITS_1475807104),
        .DIV(_MP_DIV_1475807104)
    ) seg (
        .clk(clk),
        .rst(rst),
        .values(M_seg_values),
        .seg(M_seg_seg),
        .sel(M_seg_sel)
    );
    
    
    localparam _MP_RISE_2133601753 = 1'h1;
    localparam _MP_FALL_2133601753 = 1'h0;
    logic M_seg_clk_edge_out;
    
    edge_detector #(
        .RISE(_MP_RISE_2133601753),
        .FALL(_MP_FALL_2133601753)
    ) seg_clk_edge (
        .in(M_seg_clk_value),
        .clk(clk),
        .out(M_seg_clk_edge_out)
    );
    
    
    localparam _MP_DIGITS_858711076 = 3'h4;
    localparam _MP_LEADING_ZEROS_858711076 = 1'h1;
    logic [13:0] M_decimal_renderer_value;
    logic [3:0][3:0] M_decimal_renderer_digits;
    
    bin_to_dec #(
        .DIGITS(_MP_DIGITS_858711076),
        .LEADING_ZEROS(_MP_LEADING_ZEROS_858711076)
    ) decimal_renderer (
        .value(M_decimal_renderer_value),
        .digits(M_decimal_renderer_digits)
    );
    
    
    localparam _MP_WIDTH_2083986969 = 2'h2;
    logic [3:0] M_seg_selector_out;
    
    decoder #(
        .WIDTH(_MP_WIDTH_2083986969)
    ) seg_selector (
        .in(D_seg_multiplex_q),
        .out(M_seg_selector_out)
    );
    
    
    logic [3:0][6:0] M_encoder_segs;
    logic [3:0][3:0] M_encoder_char = (M_decimal_renderer_digits);
    
    genvar idx_0_508579839;
    
    generate
        for (idx_0_508579839 = 0; idx_0_508579839 < 4; idx_0_508579839 = idx_0_508579839 + 1) begin: forLoop_idx_0_508579839
            seven_seg encoder (
                .char(M_encoder_char[idx_0_508579839]),
                .segs(M_encoder_segs[idx_0_508579839])
            );
        end
    endgenerate
    
    
    logic [31:0] M_alu_a;
    logic [31:0] M_alu_b;
    logic [5:0] M_alu_alufn;
    logic [31:0] M_alu_out;
    logic M_alu_z;
    logic M_alu_v;
    logic M_alu_n;
    
    alu alu (
        .a(M_alu_a),
        .b(M_alu_b),
        .alufn(M_alu_alufn),
        .out(M_alu_out),
        .z(M_alu_z),
        .v(M_alu_v),
        .n(M_alu_n)
    );
    
    
    always @* begin
        D_seg_multiplex_d = D_seg_multiplex_q;
        D_counter_d = D_counter_q;
        D_speed_pointer_d = D_speed_pointer_q;
        D_a_high_d = D_a_high_q;
        D_a_low_d = D_a_low_q;
        D_b_high_d = D_b_high_q;
        D_b_low_d = D_b_low_q;
        D_slow_clock_enable_d = D_slow_clock_enable_q;
        D_state_d = D_state_q;
        
        D_seg_multiplex_d = D_seg_multiplex_q;
        if (M_seg_clk_edge_out) begin
            D_seg_multiplex_d = D_seg_multiplex_q + 1'h1;
        end
        M_io_button_cond_in = io_button;
        M_io_button_edge_in = M_io_button_cond_out;
        D_counter_d = D_counter_q + 1'h1;
        D_speed_pointer_d = D_speed_pointer_q;
        D_a_high_d = D_a_high_q;
        D_a_low_d = D_a_low_q;
        D_b_high_d = D_b_high_q;
        D_b_low_d = D_b_low_q;
        D_slow_clock_enable_d = D_slow_clock_enable_q;
        D_state_d = D_state_q;
        slow_clock = D_counter_q[D_speed_pointer_q];
        
        case (D_slow_clock_enable_q)
            1'h0: begin
                M_slow_clock_edge_in = 1'h0;
            end
            1'h1: begin
                M_slow_clock_edge_in = slow_clock;
            end
            default: begin
                M_slow_clock_edge_in = 1'h0;
            end
        endcase
        M_alu_a = 1'h0;
        M_alu_b = 1'h0;
        M_alu_alufn = 1'h0;
        io_led[1'h0] = M_alu_out[3'h7:1'h0];
        io_led[1'h1] = D_a_low_q[3'h7:1'h0];
        io_led[2'h2] = D_a_low_q[4'hf:4'h8];
        io_segment = 1'h0;
        io_select = 4'hf;
        led = 1'h0;
        
        case (D_state_q)
            3'h4: begin
                if (M_io_button_edge_out[1'h1]) begin
                    D_state_d = 3'h0;
                end
                M_alu_a = {D_a_high_q, D_a_low_q};
                M_alu_b = {D_b_high_q, D_b_low_q};
                M_alu_alufn = io_dip[2'h2][3'h5:1'h0];
                led = M_alu_out[3'h7:1'h0];
                io_led[1'h0] = M_alu_out[4'hf:4'h8];
                io_led[1'h1] = M_alu_out[5'h17:5'h10];
                io_led[2'h2] = M_alu_out[5'h1f:5'h18];
            end
            3'h0: begin
                if (M_io_button_edge_out[1'h0]) begin
                    D_state_d = 3'h1;
                end
                io_led[1'h0] = 1'h0;
                D_a_high_d = {io_dip[1'h1], io_dip[1'h0]};
            end
            3'h1: begin
                if (M_io_button_edge_out[2'h2]) begin
                    D_state_d = 3'h2;
                end
                io_led[1'h0] = 1'h0;
                D_a_low_d = {io_dip[1'h1], io_dip[1'h0]};
            end
            3'h2: begin
                if (M_io_button_edge_out[1'h0]) begin
                    D_state_d = 3'h3;
                end
                io_led[1'h0] = 1'h0;
                D_b_high_d = {io_dip[1'h1], io_dip[1'h0]};
            end
            3'h3: begin
                if (M_io_button_edge_out[2'h2]) begin
                    D_state_d = 3'h4;
                end
                io_led[1'h0] = 1'h0;
                D_b_low_d = {io_dip[1'h1], io_dip[1'h0]};
            end
        endcase
        if ({M_alu_z, M_alu_v, M_alu_n} == 3'h0) begin
            M_decimal_renderer_value = 4'h0;
        end else begin
            if ({M_alu_z, M_alu_v, M_alu_n} == 3'h1) begin
                M_decimal_renderer_value = 4'h1;
            end else begin
                if ({M_alu_z, M_alu_v, M_alu_n} == 3'h2) begin
                    M_decimal_renderer_value = 4'ha;
                end else begin
                    if ({M_alu_z, M_alu_v, M_alu_n} == 3'h3) begin
                        M_decimal_renderer_value = 4'hb;
                    end else begin
                        if ({M_alu_z, M_alu_v, M_alu_n} == 3'h4) begin
                            M_decimal_renderer_value = 7'h64;
                        end else begin
                            if ({M_alu_z, M_alu_v, M_alu_n} == 3'h5) begin
                                M_decimal_renderer_value = 7'h65;
                            end else begin
                                if ({M_alu_z, M_alu_v, M_alu_n} == 3'h6) begin
                                    M_decimal_renderer_value = 7'h6e;
                                end else begin
                                    if ({M_alu_z, M_alu_v, M_alu_n} == 3'h7) begin
                                        M_decimal_renderer_value = 7'h6f;
                                    end else begin
                                        M_decimal_renderer_value = 1'h0;
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
        M_seg_values = M_decimal_renderer_digits;
        io_segment = ~M_encoder_segs[D_seg_multiplex_q];
        io_select = ~M_seg_selector_out;
    end
    
    
    always @(posedge (clk)) begin
        if ((rst) == 1'b1) begin
            D_seg_multiplex_q <= 1'h0;
            D_counter_q <= 0;
            D_speed_pointer_q <= 5'h1a;
            D_slow_clock_enable_q <= 1'h0;
            D_state_q <= 3'h4;
            D_a_low_q <= 0;
            D_a_high_q <= 0;
            D_b_low_q <= 0;
            D_b_high_q <= 0;
        end else begin
            D_seg_multiplex_q <= D_seg_multiplex_d;
            D_counter_q <= D_counter_d;
            D_speed_pointer_q <= D_speed_pointer_d;
            D_slow_clock_enable_q <= D_slow_clock_enable_d;
            D_state_q <= D_state_d;
            D_a_low_q <= D_a_low_d;
            D_a_high_q <= D_a_high_d;
            D_b_low_q <= D_b_low_d;
            D_b_high_q <= D_b_high_d;
        end
    end
endmodule