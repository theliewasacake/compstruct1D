/*
    This file was generated automatically by Alchitry Labs 2.0.29-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module shifter (
        input wire [31:0] a,
        input wire [4:0] b,
        input wire [5:0] alufn,
        output reg [31:0] shift
    );
    logic [31:0] R_0bb5cc90_i;
    logic [31:0] RR_0bb5cc90_i;
    logic [31:0] R_2ec7f8b4_i;
    logic [31:0] RR_2ec7f8b4_i;
    logic [31:0] R_60f68278_i;
    logic [31:0] RR_60f68278_i;
    logic [31:0] R_4b7c6b58_i;
    logic [31:0] RR_4b7c6b58_i;
    logic [31:0] R_5c220734_i;
    logic [31:0] RR_5c220734_i;
    logic [31:0] R_13df5973_i;
    logic [31:0] RR_13df5973_i;
    logic [31:0] R_7fa1574f_i;
    logic [31:0] RR_7fa1574f_i;
    logic [31:0] R_461d6ef7_i;
    logic [31:0] RR_461d6ef7_i;
    logic [31:0] R_6a795aab_i;
    logic [31:0] RR_6a795aab_i;
    logic [31:0] R_7d6ea400_i;
    logic [31:0] RR_7d6ea400_i;
    logic [31:0] R_34e07fb3_i;
    logic [31:0] RR_34e07fb3_i;
    logic [31:0] R_6f66f44f_i;
    logic [31:0] RR_6f66f44f_i;
    logic [31:0] R_7e7a4a39_i;
    logic [31:0] RR_7e7a4a39_i;
    logic [31:0] R_338a1fd1_i;
    logic [31:0] RR_338a1fd1_i;
    logic [31:0] R_64f2c460_i;
    logic [31:0] RR_64f2c460_i;
    logic [31:0] R_48f6416b_i;
    logic [31:0] RR_48f6416b_i;
    logic [31:0] w;
    logic [31:0] x;
    logic [31:0] y;
    logic [31:0] z;
    logic [31:0] M_left_mux1_s0;
    logic [31:0][1:0] M_left_mux1_in;
    logic [31:0] M_left_mux1_out;
    
    genvar idx_0_1384338513;
    
    generate
        for (idx_0_1384338513 = 0; idx_0_1384338513 < 32; idx_0_1384338513 = idx_0_1384338513 + 1) begin: forLoop_idx_0_1384338513
            mux_2 left_mux1 (
                .s0(M_left_mux1_s0[idx_0_1384338513]),
                .in(M_left_mux1_in[idx_0_1384338513]),
                .out(M_left_mux1_out[idx_0_1384338513])
            );
        end
    endgenerate
    
    
    logic [31:0] M_left_mux2_s0;
    logic [31:0][1:0] M_left_mux2_in;
    logic [31:0] M_left_mux2_out;
    
    genvar idx_0_1595050565;
    
    generate
        for (idx_0_1595050565 = 0; idx_0_1595050565 < 32; idx_0_1595050565 = idx_0_1595050565 + 1) begin: forLoop_idx_0_1595050565
            mux_2 left_mux2 (
                .s0(M_left_mux2_s0[idx_0_1595050565]),
                .in(M_left_mux2_in[idx_0_1595050565]),
                .out(M_left_mux2_out[idx_0_1595050565])
            );
        end
    endgenerate
    
    
    logic [31:0] M_left_mux3_s0;
    logic [31:0][1:0] M_left_mux3_in;
    logic [31:0] M_left_mux3_out;
    
    genvar idx_0_172712694;
    
    generate
        for (idx_0_172712694 = 0; idx_0_172712694 < 32; idx_0_172712694 = idx_0_172712694 + 1) begin: forLoop_idx_0_172712694
            mux_2 left_mux3 (
                .s0(M_left_mux3_s0[idx_0_172712694]),
                .in(M_left_mux3_in[idx_0_172712694]),
                .out(M_left_mux3_out[idx_0_172712694])
            );
        end
    endgenerate
    
    
    logic [31:0] M_left_mux4_s0;
    logic [31:0][1:0] M_left_mux4_in;
    logic [31:0] M_left_mux4_out;
    
    genvar idx_0_1446377409;
    
    generate
        for (idx_0_1446377409 = 0; idx_0_1446377409 < 32; idx_0_1446377409 = idx_0_1446377409 + 1) begin: forLoop_idx_0_1446377409
            mux_2 left_mux4 (
                .s0(M_left_mux4_s0[idx_0_1446377409]),
                .in(M_left_mux4_in[idx_0_1446377409]),
                .out(M_left_mux4_out[idx_0_1446377409])
            );
        end
    endgenerate
    
    
    logic [31:0] M_left_mux5_s0;
    logic [31:0][1:0] M_left_mux5_in;
    logic [31:0] M_left_mux5_out;
    
    genvar idx_0_840156680;
    
    generate
        for (idx_0_840156680 = 0; idx_0_840156680 < 32; idx_0_840156680 = idx_0_840156680 + 1) begin: forLoop_idx_0_840156680
            mux_2 left_mux5 (
                .s0(M_left_mux5_s0[idx_0_840156680]),
                .in(M_left_mux5_in[idx_0_840156680]),
                .out(M_left_mux5_out[idx_0_840156680])
            );
        end
    endgenerate
    
    
    logic [31:0] wr;
    logic [31:0] xr;
    logic [31:0] yr;
    logic [31:0] zr;
    logic [31:0] M_right_mux1_s0;
    logic [31:0][1:0] M_right_mux1_in;
    logic [31:0] M_right_mux1_out;
    
    genvar idx_0_2075197752;
    
    generate
        for (idx_0_2075197752 = 0; idx_0_2075197752 < 32; idx_0_2075197752 = idx_0_2075197752 + 1) begin: forLoop_idx_0_2075197752
            mux_2 right_mux1 (
                .s0(M_right_mux1_s0[idx_0_2075197752]),
                .in(M_right_mux1_in[idx_0_2075197752]),
                .out(M_right_mux1_out[idx_0_2075197752])
            );
        end
    endgenerate
    
    
    logic [31:0] M_right_mux2_s0;
    logic [31:0][1:0] M_right_mux2_in;
    logic [31:0] M_right_mux2_out;
    
    genvar idx_0_1328856182;
    
    generate
        for (idx_0_1328856182 = 0; idx_0_1328856182 < 32; idx_0_1328856182 = idx_0_1328856182 + 1) begin: forLoop_idx_0_1328856182
            mux_2 right_mux2 (
                .s0(M_right_mux2_s0[idx_0_1328856182]),
                .in(M_right_mux2_in[idx_0_1328856182]),
                .out(M_right_mux2_out[idx_0_1328856182])
            );
        end
    endgenerate
    
    
    logic [31:0] M_right_mux3_s0;
    logic [31:0][1:0] M_right_mux3_in;
    logic [31:0] M_right_mux3_out;
    
    genvar idx_0_326160638;
    
    generate
        for (idx_0_326160638 = 0; idx_0_326160638 < 32; idx_0_326160638 = idx_0_326160638 + 1) begin: forLoop_idx_0_326160638
            mux_2 right_mux3 (
                .s0(M_right_mux3_s0[idx_0_326160638]),
                .in(M_right_mux3_in[idx_0_326160638]),
                .out(M_right_mux3_out[idx_0_326160638])
            );
        end
    endgenerate
    
    
    logic [31:0] M_right_mux4_s0;
    logic [31:0][1:0] M_right_mux4_in;
    logic [31:0] M_right_mux4_out;
    
    genvar idx_0_2119466317;
    
    generate
        for (idx_0_2119466317 = 0; idx_0_2119466317 < 32; idx_0_2119466317 = idx_0_2119466317 + 1) begin: forLoop_idx_0_2119466317
            mux_2 right_mux4 (
                .s0(M_right_mux4_s0[idx_0_2119466317]),
                .in(M_right_mux4_in[idx_0_2119466317]),
                .out(M_right_mux4_out[idx_0_2119466317])
            );
        end
    endgenerate
    
    
    logic [31:0] M_right_mux5_s0;
    logic [31:0][1:0] M_right_mux5_in;
    logic [31:0] M_right_mux5_out;
    
    genvar idx_0_384847865;
    
    generate
        for (idx_0_384847865 = 0; idx_0_384847865 < 32; idx_0_384847865 = idx_0_384847865 + 1) begin: forLoop_idx_0_384847865
            mux_2 right_mux5 (
                .s0(M_right_mux5_s0[idx_0_384847865]),
                .in(M_right_mux5_in[idx_0_384847865]),
                .out(M_right_mux5_out[idx_0_384847865])
            );
        end
    endgenerate
    
    
    logic [31:0] wra;
    logic [31:0] xra;
    logic [31:0] yra;
    logic [31:0] zra;
    logic [31:0] M_sra_mux1_s0;
    logic [31:0][1:0] M_sra_mux1_in;
    logic [31:0] M_sra_mux1_out;
    
    genvar idx_0_140398201;
    
    generate
        for (idx_0_140398201 = 0; idx_0_140398201 < 32; idx_0_140398201 = idx_0_140398201 + 1) begin: forLoop_idx_0_140398201
            mux_2 sra_mux1 (
                .s0(M_sra_mux1_s0[idx_0_140398201]),
                .in(M_sra_mux1_in[idx_0_140398201]),
                .out(M_sra_mux1_out[idx_0_140398201])
            );
        end
    endgenerate
    
    
    logic [31:0] M_sra_mux2_s0;
    logic [31:0][1:0] M_sra_mux2_in;
    logic [31:0] M_sra_mux2_out;
    
    genvar idx_0_1156985392;
    
    generate
        for (idx_0_1156985392 = 0; idx_0_1156985392 < 32; idx_0_1156985392 = idx_0_1156985392 + 1) begin: forLoop_idx_0_1156985392
            mux_2 sra_mux2 (
                .s0(M_sra_mux2_s0[idx_0_1156985392]),
                .in(M_sra_mux2_in[idx_0_1156985392]),
                .out(M_sra_mux2_out[idx_0_1156985392])
            );
        end
    endgenerate
    
    
    logic [31:0] M_sra_mux3_s0;
    logic [31:0][1:0] M_sra_mux3_in;
    logic [31:0] M_sra_mux3_out;
    
    genvar idx_0_1524495310;
    
    generate
        for (idx_0_1524495310 = 0; idx_0_1524495310 < 32; idx_0_1524495310 = idx_0_1524495310 + 1) begin: forLoop_idx_0_1524495310
            mux_2 sra_mux3 (
                .s0(M_sra_mux3_s0[idx_0_1524495310]),
                .in(M_sra_mux3_in[idx_0_1524495310]),
                .out(M_sra_mux3_out[idx_0_1524495310])
            );
        end
    endgenerate
    
    
    logic [31:0] M_sra_mux4_s0;
    logic [31:0][1:0] M_sra_mux4_in;
    logic [31:0] M_sra_mux4_out;
    
    genvar idx_0_41528579;
    
    generate
        for (idx_0_41528579 = 0; idx_0_41528579 < 32; idx_0_41528579 = idx_0_41528579 + 1) begin: forLoop_idx_0_41528579
            mux_2 sra_mux4 (
                .s0(M_sra_mux4_s0[idx_0_41528579]),
                .in(M_sra_mux4_in[idx_0_41528579]),
                .out(M_sra_mux4_out[idx_0_41528579])
            );
        end
    endgenerate
    
    
    logic [31:0] M_sra_mux5_s0;
    logic [31:0][1:0] M_sra_mux5_in;
    logic [31:0] M_sra_mux5_out;
    
    genvar idx_0_254567104;
    
    generate
        for (idx_0_254567104 = 0; idx_0_254567104 < 32; idx_0_254567104 = idx_0_254567104 + 1) begin: forLoop_idx_0_254567104
            mux_2 sra_mux5 (
                .s0(M_sra_mux5_s0[idx_0_254567104]),
                .in(M_sra_mux5_in[idx_0_254567104]),
                .out(M_sra_mux5_out[idx_0_254567104])
            );
        end
    endgenerate
    
    
    always @* begin
        M_left_mux1_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux2_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux3_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux4_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux5_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux1_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux2_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux3_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux4_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux5_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux1_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux2_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux3_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux4_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux5_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux1_s0 = 32'h0;
        M_right_mux1_s0 = 32'h0;
        M_sra_mux1_s0 = 32'h0;
        M_left_mux2_s0 = 32'h0;
        M_right_mux2_s0 = 32'h0;
        M_sra_mux2_s0 = 32'h0;
        M_left_mux3_s0 = 32'h0;
        M_right_mux3_s0 = 32'h0;
        M_sra_mux3_s0 = 32'h0;
        M_left_mux4_s0 = 32'h0;
        M_right_mux4_s0 = 32'h0;
        M_sra_mux4_s0 = 32'h0;
        M_left_mux5_s0 = 32'h0;
        M_right_mux5_s0 = 32'h0;
        M_sra_mux5_s0 = 32'h0;
        w = 32'h0;
        x = 32'h0;
        y = 32'h0;
        z = 32'h0;
        wr = 32'h0;
        xr = 32'h0;
        yr = 32'h0;
        zr = 32'h0;
        wra = 32'h0;
        xra = 32'h0;
        yra = 32'h0;
        zra = 32'h0;
        if (alufn[1'h1:1'h0] == 2'h0) begin
            for (RR_0bb5cc90_i = 0; RR_0bb5cc90_i < 6'h20; RR_0bb5cc90_i = RR_0bb5cc90_i + 1) begin
        R_0bb5cc90_i = (0) + RR_0bb5cc90_i * (1);
                M_left_mux1_in[R_0bb5cc90_i][1'h0] = a[R_0bb5cc90_i];
                if (R_0bb5cc90_i < 5'h10) begin
                    M_left_mux1_in[R_0bb5cc90_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux1_in[R_0bb5cc90_i][1'h1] = a[R_0bb5cc90_i - 5'h10];
                end
            end
            w = M_left_mux1_out;
            for (RR_2ec7f8b4_i = 0; RR_2ec7f8b4_i < 6'h20; RR_2ec7f8b4_i = RR_2ec7f8b4_i + 1) begin
        R_2ec7f8b4_i = (0) + RR_2ec7f8b4_i * (1);
                M_left_mux2_in[R_2ec7f8b4_i][1'h0] = w[R_2ec7f8b4_i];
                if (R_2ec7f8b4_i < 4'h8) begin
                    M_left_mux2_in[R_2ec7f8b4_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux2_in[R_2ec7f8b4_i][1'h1] = w[R_2ec7f8b4_i - 4'h8];
                end
            end
            x = M_left_mux2_out;
            for (RR_60f68278_i = 0; RR_60f68278_i < 6'h20; RR_60f68278_i = RR_60f68278_i + 1) begin
        R_60f68278_i = (0) + RR_60f68278_i * (1);
                M_left_mux3_in[R_60f68278_i][1'h0] = x[R_60f68278_i];
                if (R_60f68278_i < 3'h4) begin
                    M_left_mux3_in[R_60f68278_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux3_in[R_60f68278_i][1'h1] = x[R_60f68278_i - 3'h4];
                end
            end
            y = M_left_mux3_out;
            for (RR_4b7c6b58_i = 0; RR_4b7c6b58_i < 6'h20; RR_4b7c6b58_i = RR_4b7c6b58_i + 1) begin
        R_4b7c6b58_i = (0) + RR_4b7c6b58_i * (1);
                M_left_mux4_in[R_4b7c6b58_i][1'h0] = y[R_4b7c6b58_i];
                if (R_4b7c6b58_i < 2'h2) begin
                    M_left_mux4_in[R_4b7c6b58_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux4_in[R_4b7c6b58_i][1'h1] = y[R_4b7c6b58_i - 2'h2];
                end
            end
            z = M_left_mux4_out;
            for (RR_5c220734_i = 0; RR_5c220734_i < 6'h20; RR_5c220734_i = RR_5c220734_i + 1) begin
        R_5c220734_i = (0) + RR_5c220734_i * (1);
                M_left_mux5_in[R_5c220734_i][1'h0] = z[R_5c220734_i];
                if (R_5c220734_i < 1'h1) begin
                    M_left_mux5_in[R_5c220734_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux5_in[R_5c220734_i][1'h1] = z[R_5c220734_i - 1'h1];
                end
            end
        end else begin
            if (alufn[1'h1:1'h0] == 2'h1) begin
                for (RR_13df5973_i = 0; RR_13df5973_i < 6'h20; RR_13df5973_i = RR_13df5973_i + 1) begin
          R_13df5973_i = (0) + RR_13df5973_i * (1);
                    M_right_mux1_in[R_13df5973_i][1'h0] = a[R_13df5973_i];
                    if (R_13df5973_i < 5'h10) begin
                        M_right_mux1_in[R_13df5973_i][1'h1] = a[5'h10 + R_13df5973_i];
                    end else begin
                        M_right_mux1_in[R_13df5973_i][1'h1] = 1'h0;
                    end
                end
                wr = M_right_mux1_out;
                for (RR_7fa1574f_i = 0; RR_7fa1574f_i < 6'h20; RR_7fa1574f_i = RR_7fa1574f_i + 1) begin
          R_7fa1574f_i = (0) + RR_7fa1574f_i * (1);
                    M_right_mux2_in[R_7fa1574f_i][1'h0] = wr[R_7fa1574f_i];
                    if (R_7fa1574f_i < 5'h18) begin
                        M_right_mux2_in[R_7fa1574f_i][1'h1] = wr[4'h8 + R_7fa1574f_i];
                    end else begin
                        M_right_mux2_in[R_7fa1574f_i][1'h1] = 1'h0;
                    end
                end
                xr = M_right_mux2_out;
                for (RR_461d6ef7_i = 0; RR_461d6ef7_i < 6'h20; RR_461d6ef7_i = RR_461d6ef7_i + 1) begin
          R_461d6ef7_i = (0) + RR_461d6ef7_i * (1);
                    M_right_mux3_in[R_461d6ef7_i][1'h0] = xr[R_461d6ef7_i];
                    if (R_461d6ef7_i < 5'h1c) begin
                        M_right_mux3_in[R_461d6ef7_i][1'h1] = xr[3'h4 + R_461d6ef7_i];
                    end else begin
                        M_right_mux3_in[R_461d6ef7_i][1'h1] = 1'h0;
                    end
                end
                yr = M_right_mux3_out;
                for (RR_6a795aab_i = 0; RR_6a795aab_i < 6'h20; RR_6a795aab_i = RR_6a795aab_i + 1) begin
          R_6a795aab_i = (0) + RR_6a795aab_i * (1);
                    M_right_mux4_in[R_6a795aab_i][1'h0] = yr[R_6a795aab_i];
                    if (R_6a795aab_i < 5'h1e) begin
                        M_right_mux4_in[R_6a795aab_i][1'h1] = yr[2'h2 + R_6a795aab_i];
                    end else begin
                        M_right_mux4_in[R_6a795aab_i][1'h1] = 1'h0;
                    end
                end
                zr = M_right_mux4_out;
                for (RR_7d6ea400_i = 0; RR_7d6ea400_i < 6'h20; RR_7d6ea400_i = RR_7d6ea400_i + 1) begin
          R_7d6ea400_i = (0) + RR_7d6ea400_i * (1);
                    M_right_mux5_in[R_7d6ea400_i][1'h0] = zr[R_7d6ea400_i];
                    if (R_7d6ea400_i < 5'h1f) begin
                        M_right_mux5_in[R_7d6ea400_i][1'h1] = zr[1'h1 + R_7d6ea400_i];
                    end else begin
                        M_right_mux5_in[R_7d6ea400_i][1'h1] = 1'h0;
                    end
                end
            end else begin
                if (alufn[1'h1:1'h0] == 2'h3) begin
                    for (RR_34e07fb3_i = 0; RR_34e07fb3_i < 6'h20; RR_34e07fb3_i = RR_34e07fb3_i + 1) begin
            R_34e07fb3_i = (0) + RR_34e07fb3_i * (1);
                        M_sra_mux1_in[R_34e07fb3_i][1'h0] = a[R_34e07fb3_i];
                        if (R_34e07fb3_i < 5'h10) begin
                            M_sra_mux1_in[R_34e07fb3_i][1'h1] = a[5'h10 + R_34e07fb3_i];
                        end else begin
                            M_sra_mux1_in[R_34e07fb3_i][1'h1] = a[5'h1f];
                        end
                        wra[R_34e07fb3_i] = M_sra_mux1_out[R_34e07fb3_i];
                    end
                    for (RR_6f66f44f_i = 0; RR_6f66f44f_i < 6'h20; RR_6f66f44f_i = RR_6f66f44f_i + 1) begin
            R_6f66f44f_i = (0) + RR_6f66f44f_i * (1);
                        M_sra_mux2_in[R_6f66f44f_i][1'h0] = wra[R_6f66f44f_i];
                        if (R_6f66f44f_i < 5'h18) begin
                            M_sra_mux2_in[R_6f66f44f_i][1'h1] = wra[4'h8 + R_6f66f44f_i];
                        end else begin
                            M_sra_mux2_in[R_6f66f44f_i][1'h1] = a[5'h1f];
                        end
                        M_sra_mux2_s0[R_6f66f44f_i] = b[2'h3];
                        xra[R_6f66f44f_i] = M_sra_mux2_out[R_6f66f44f_i];
                    end
                    for (RR_7e7a4a39_i = 0; RR_7e7a4a39_i < 6'h20; RR_7e7a4a39_i = RR_7e7a4a39_i + 1) begin
            R_7e7a4a39_i = (0) + RR_7e7a4a39_i * (1);
                        M_sra_mux3_in[R_7e7a4a39_i][1'h0] = xra[R_7e7a4a39_i];
                        if (R_7e7a4a39_i < 5'h1c) begin
                            M_sra_mux3_in[R_7e7a4a39_i][1'h1] = xra[3'h4 + R_7e7a4a39_i];
                        end else begin
                            M_sra_mux3_in[R_7e7a4a39_i][1'h1] = a[5'h1f];
                        end
                        M_sra_mux3_s0[R_7e7a4a39_i] = b[2'h2];
                        yra[R_7e7a4a39_i] = M_sra_mux3_out[R_7e7a4a39_i];
                    end
                    for (RR_338a1fd1_i = 0; RR_338a1fd1_i < 6'h20; RR_338a1fd1_i = RR_338a1fd1_i + 1) begin
            R_338a1fd1_i = (0) + RR_338a1fd1_i * (1);
                        M_sra_mux4_in[R_338a1fd1_i][1'h0] = yra[R_338a1fd1_i];
                        if (R_338a1fd1_i < 5'h1e) begin
                            M_sra_mux4_in[R_338a1fd1_i][1'h1] = yra[2'h2 + R_338a1fd1_i];
                        end else begin
                            M_sra_mux4_in[R_338a1fd1_i][1'h1] = a[5'h1f];
                        end
                        M_sra_mux4_s0[R_338a1fd1_i] = b[1'h1];
                        zra[R_338a1fd1_i] = M_sra_mux4_out[R_338a1fd1_i];
                    end
                    for (RR_64f2c460_i = 0; RR_64f2c460_i < 6'h20; RR_64f2c460_i = RR_64f2c460_i + 1) begin
            R_64f2c460_i = (0) + RR_64f2c460_i * (1);
                        M_sra_mux5_in[R_64f2c460_i][1'h0] = zra[R_64f2c460_i];
                        if (R_64f2c460_i < 5'h1f) begin
                            M_sra_mux5_in[R_64f2c460_i][1'h1] = zra[1'h1 + R_64f2c460_i];
                        end else begin
                            M_sra_mux5_in[R_64f2c460_i][1'h1] = a[5'h1f];
                        end
                        M_sra_mux5_s0[R_64f2c460_i] = b[1'h0];
                    end
                end
            end
        end
        for (RR_48f6416b_i = 0; RR_48f6416b_i < 6'h20; RR_48f6416b_i = RR_48f6416b_i + 1) begin
      R_48f6416b_i = (0) + RR_48f6416b_i * (1);
            M_left_mux1_s0[R_48f6416b_i] = b[3'h4];
            M_left_mux2_s0[R_48f6416b_i] = b[2'h3];
            M_left_mux3_s0[R_48f6416b_i] = b[2'h2];
            M_left_mux4_s0[R_48f6416b_i] = b[1'h1];
            M_left_mux5_s0[R_48f6416b_i] = b[1'h0];
            M_right_mux1_s0[R_48f6416b_i] = b[3'h4];
            M_right_mux2_s0[R_48f6416b_i] = b[2'h3];
            M_right_mux3_s0[R_48f6416b_i] = b[2'h2];
            M_right_mux4_s0[R_48f6416b_i] = b[1'h1];
            M_right_mux5_s0[R_48f6416b_i] = b[1'h0];
            M_sra_mux1_s0[R_48f6416b_i] = b[3'h4];
            M_sra_mux2_s0[R_48f6416b_i] = b[2'h3];
            M_sra_mux3_s0[R_48f6416b_i] = b[2'h2];
            M_sra_mux4_s0[R_48f6416b_i] = b[1'h1];
            M_sra_mux5_s0[R_48f6416b_i] = b[1'h0];
        end
        
        case (alufn[1'h1:1'h0])
            2'h0: begin
                shift = M_left_mux5_out;
            end
            2'h1: begin
                shift = M_right_mux5_out;
            end
            2'h3: begin
                shift = M_sra_mux5_out;
            end
            default: begin
                shift = 1'h0;
            end
        endcase
    end
    
    
endmodule