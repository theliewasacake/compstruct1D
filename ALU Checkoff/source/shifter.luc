    module shifter (
        input a[32],
        input b[5],
        input alufn[6],
        output shift[32]
    ) {
    sig w[32]
    sig x[32]
    sig y[32]
    sig z[32]
    
    mux_2 left_mux1[32]
    mux_2 left_mux2[32]
    mux_2 left_mux3[32]
    mux_2 left_mux4[32]
    mux_2 left_mux5[32]
    
    sig wr[32]
    sig xr[32]
    sig yr[32]
    sig zr[32]
    
    mux_2 right_mux1[32]
    mux_2 right_mux2[32]
    mux_2 right_mux3[32]
    mux_2 right_mux4[32]
    mux_2 right_mux5[32]
    
    sig wra[32]
    sig xra[32]
    sig yra[32]
    sig zra[32]
    
    mux_2 sra_mux1[32]
    mux_2 sra_mux2[32]
    mux_2 sra_mux3[32]
    mux_2 sra_mux4[32]
    mux_2 sra_mux5[32]
    
    always {
        left_mux1.in = 32x{{2b00}}
        left_mux2.in = 32x{{2b00}}
        left_mux3.in = 32x{{2b00}}
        left_mux4.in = 32x{{2b00}}
        left_mux5.in = 32x{{2b00}}
        
        right_mux1.in = 32x{{2b00}}
        right_mux2.in = 32x{{2b00}}
        right_mux3.in = 32x{{2b00}}
        right_mux4.in = 32x{{2b00}}
        right_mux5.in = 32x{{2b00}}
        
        sra_mux1.in = 32x{{2b00}}
        sra_mux2.in = 32x{{2b00}}
        sra_mux3.in = 32x{{2b00}}
        sra_mux4.in = 32x{{2b00}}
        sra_mux5.in = 32x{{2b00}}
        
        left_mux1.s0 = 32x{1b0}
        right_mux1.s0 = 32x{1b0}
        sra_mux1.s0 = 32x{1b0}
        
        left_mux2.s0 = 32x{1b0}
        right_mux2.s0 = 32x{1b0}
        sra_mux2.s0 = 32x{1b0}
        
        left_mux3.s0 = 32x{1b0}
        right_mux3.s0 = 32x{1b0}
        sra_mux3.s0 = 32x{1b0}
        
        left_mux4.s0 = 32x{1b0}
        right_mux4.s0 = 32x{1b0}
        sra_mux4.s0 = 32x{1b0}
        
        left_mux5.s0 = 32x{1b0}
        right_mux5.s0 = 32x{1b0}
        sra_mux5.s0 = 32x{1b0}
        
        w = 32x{1b0}
        x = 32x{1b0}
        y = 32x{1b0}
        z = 32x{1b0}
        
        wr = 32x{1b0}
        xr = 32x{1b0}
        yr = 32x{1b0}
        zr = 32x{1b0}
        
        wra = 32x{1b0}
        xra = 32x{1b0}
        yra = 32x{1b0}
        zra = 32x{1b0}

        // implement shifter unit logic here
        if(alufn[1:0] == 2b00){
            repeat(i,32){
                left_mux1.in[i][0] = a[i]
                if(i < 16)
                    left_mux1.in[i][1] = 1b0
                else
                    left_mux1.in[i][1] = a[i-16]
            }
            w = left_mux1.out
            repeat(i,32){
                left_mux2.in[i][0] = w[i]
                if(i < 8)
                    left_mux2.in[i][1] = 1b0
                else
                    left_mux2.in[i][1] = w[i-8]
            }
            x = left_mux2.out
            repeat(i,32){
                left_mux3.in[i][0] = x[i]
                if(i < 4)
                    left_mux3.in[i][1] = 1b0
                else
                    left_mux3.in[i][1] = x[i-4]
            }
            y = left_mux3.out
            repeat(i,32){    
                left_mux4.in[i][0] = y[i]
                if(i < 2)
                    left_mux4.in[i][1] = 1b0
                else
                    left_mux4.in[i][1] = y[i-2]
            }
            z = left_mux4.out
            repeat(i,32){
                left_mux5.in[i][0] = z[i]
                if(i < 1)
                    left_mux5.in[i][1] = 1b0
                else
                    left_mux5.in[i][1] = z[i-1]
            }
        }
        else if(alufn[1:0] == 2b01){
            repeat(i,32){
                right_mux1.in[i][0] = a[i]
                if(i < 16)
                    right_mux1.in[i][1] = a[16+i]
                else
                    right_mux1.in[i][1] = 1b0
            }
            wr = right_mux1.out
            repeat(i,32){
                right_mux2.in[i][0] = wr[i]
                if(i < 24)
                    right_mux2.in[i][1] = wr[8+i]
                else
                    right_mux2.in[i][1] = 1b0
            }
            xr = right_mux2.out
            repeat(i,32){
                right_mux3.in[i][0] = xr[i]
                if(i < 28)
                    right_mux3.in[i][1] = xr[4+i]
                else
                    right_mux3.in[i][1] = 1b0
            }
            yr = right_mux3.out
            repeat(i,32){
                right_mux4.in[i][0] = yr[i]
                if(i < 30)
                    right_mux4.in[i][1] = yr[2+i]
                else
                    right_mux4.in[i][1] = 1b0
            }
            zr = right_mux4.out
            repeat(i,32){
                right_mux5.in[i][0] = zr[i]
                if(i < 31)
                    right_mux5.in[i][1] = zr[1+i]
                else
                    right_mux5.in[i][1] = 1b0
            }
        }
        else if(alufn[1:0] == 2b11){
            repeat(i,32){
                sra_mux1.in[i][0] = a[i]
                if(i < 16)
                    sra_mux1.in[i][1] = a[16+i]
                else
                    sra_mux1.in[i][1] = a[31]
                wra[i] = sra_mux1.out[i]
            }
            
            repeat(i,32){
                sra_mux2.in[i][0] = wra[i]
                if(i < 24)
                    sra_mux2.in[i][1] = wra[8+i]
                else
                    sra_mux2.in[i][1] = a[31]
                sra_mux2.s0[i] = b[3]
                xra[i] = sra_mux2.out[i]
            }
            
            repeat(i,32){
                sra_mux3.in[i][0] = xra[i]
                if(i < 28)
                    sra_mux3.in[i][1] = xra[4+i]
                else
                    sra_mux3.in[i][1] = a[31]
                sra_mux3.s0[i] = b[2]
                yra[i] = sra_mux3.out[i]
            }
            
            repeat(i,32){
                sra_mux4.in[i][0] = yra[i]
                if(i < 30)
                    sra_mux4.in[i][1] = yra[2+i]
                else
                    sra_mux4.in[i][1] = a[31]
                sra_mux4.s0[i] = b[1]
                zra[i] = sra_mux4.out[i]
            }
            
            repeat(i,32){
                sra_mux5.in[i][0] = zra[i]
                if(i < 31)
                    sra_mux5.in[i][1] = zra[1+i]
                else
                    sra_mux5.in[i][1] = a[31]
                sra_mux5.s0[i] = b[0]
            }
        }
        
        repeat (i, 32) {
            left_mux1.s0[i] = b[4]
            left_mux2.s0[i] = b[3]
            left_mux3.s0[i] = b[2]
            left_mux4.s0[i] = b[1]
            left_mux5.s0[i] = b[0]
            
            right_mux1.s0[i] = b[4]
            right_mux2.s0[i] = b[3]
            right_mux3.s0[i] = b[2]
            right_mux4.s0[i] = b[1]
            right_mux5.s0[i] = b[0]
            
            sra_mux1.s0[i] = b[4]
            sra_mux2.s0[i] = b[3]
            sra_mux3.s0[i] = b[2]
            sra_mux4.s0[i] = b[1]
            sra_mux5.s0[i] = b[0]
        }
        
        case(alufn[1:0]){
            2b00:
                shift = left_mux5.out
            2b01:
                shift = right_mux5.out
            2b11:
                shift = sra_mux5.out
            default:
                shift = 0
        }
    } 
}