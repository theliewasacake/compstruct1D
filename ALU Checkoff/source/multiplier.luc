module multiplier #(
    WIDTH = 32
) (
    input a[WIDTH],         // 32-bit input a
    input b[WIDTH],         // 32-bit input b
    output mul[WIDTH]       // 32-bit output mul
) {
    sig partial_sum[WIDTH][WIDTH]     // To hold partial products
    sig shifted_bits[WIDTH][WIDTH]    // To handle the shifting
    sig sum[WIDTH]                    // Sum of partial products
    sig carry[WIDTH]                  // Carry propagation
    rca rca[WIDTH]                    // Ripple carry adders for sum
    sig negated[WIDTH]
    adder adder
    //shifter shifter
    //shift_lookup shift_lookup
    always {
        // Generate partial products (AND operation)
        negated = 32b0
        adder.a = 32b0
        adder.b = 32b0
        adder.alufn = 5b0
        repeat (i, WIDTH) {
            repeat (j, WIDTH) {
                shifted_bits[i] = 32b0
                partial_sum[i][j] = a[j] & b[i]  // AND operation to form partial product
            }
        }

        // Initialize the first row (partial sum)
        sum = partial_sum[0]
        carry = 0

        // First adder for the first partial sum
        rca.a[0] = sum
        rca.b[0] = 0
        rca.cin = 0
        
        // Perform addition using RCAs for each row of partial sums
        repeat (i, WIDTH-1) {
            if(i != WIDTH-1){
                shifted_bits[i + 1] = partial_sum[i + 1] << (i + 1)  // Shift partial sum
                rca.b[i + 1] = shifted_bits[i + 1]
            }
            else{
                //negated = ~$flatten((partial_sum[i + 1] << (i + 1)))
                //adder.a = negated
                //adder.b = 1b1
                negated = partial_sum[i + 1] << (i + 1)
                rca.b[i + 1] = ~$flatten(negated) + 1
            }
            // Add the shifted partial sums
            rca.a[i + 1] = rca.s[i]
            //rca.cin[i + 1] = rca.cout[i]

            // Update the sum and carry
            sum = rca.s[i + 1]
            carry = rca.cout[i + 1]
        }

        // Final result
        mul = sum  // The result is stored in 'sum'
    }
}