/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module datapath #(
        parameter SLOW_CLOCK_DIV = 5'h1a,
        parameter FAST_CLOCK_DIV = 5'h15
    ) (
        input wire clk,
        input wire rst,
        input wire left_button,
        input wire right_button,
        input wire start_button,
        output reg [3:0] debug_general,
        output reg data
    );
    logic [31:0] input_alu_a;
    logic [31:0] input_alu_b;
    localparam COLUMN_DIMENSION = 5'h8;
    localparam ROW_DIMENSION = 5'h8;
    localparam PIXEL_COUNT = 10'h40;
    logic [31:0] M_game_alu_a;
    logic [31:0] M_game_alu_b;
    logic [5:0] M_game_alu_alufn;
    logic [31:0] M_game_alu_out;
    logic M_game_alu_z;
    logic M_game_alu_v;
    logic M_game_alu_n;
    
    alu game_alu (
        .a(M_game_alu_a),
        .b(M_game_alu_b),
        .alufn(M_game_alu_alufn),
        .out(M_game_alu_out),
        .z(M_game_alu_z),
        .v(M_game_alu_v),
        .n(M_game_alu_n)
    );
    
    
    logic player_collided_out;
    logic [31:0] M_control_unit_regfile_rd2;
    logic [5:0] M_control_unit_alufn;
    logic [2:0] M_control_unit_asel;
    logic [2:0] M_control_unit_bsel;
    logic [1:0] M_control_unit_alu_out_sel;
    logic [2:0] M_control_unit_regfile_wa;
    logic [2:0] M_control_unit_regfile_ra1;
    logic [2:0] M_control_unit_regfile_ra2;
    logic M_control_unit_regfile_we;
    logic [3:0] M_control_unit_debug;
    
    control_unit control_unit (
        .left_button(left_button),
        .right_button(right_button),
        .start_button(start_button),
        .player_collided(player_collided_out),
        .clk(clk),
        .rst(rst),
        .regfile_rd2(M_control_unit_regfile_rd2),
        .alufn(M_control_unit_alufn),
        .asel(M_control_unit_asel),
        .bsel(M_control_unit_bsel),
        .alu_out_sel(M_control_unit_alu_out_sel),
        .regfile_wa(M_control_unit_regfile_wa),
        .regfile_ra1(M_control_unit_regfile_ra1),
        .regfile_ra2(M_control_unit_regfile_ra2),
        .regfile_we(M_control_unit_regfile_we),
        .debug(M_control_unit_debug)
    );
    
    
    logic [31:0] M_register_files_data;
    logic [31:0] M_register_files_rd1;
    logic [31:0] M_register_files_rd2;
    logic [31:0] M_register_files_player_x_data;
    
    register_files register_files (
        .we(M_control_unit_regfile_we),
        .wa(M_control_unit_regfile_wa),
        .ra1(M_control_unit_regfile_ra1),
        .ra2(M_control_unit_regfile_ra2),
        .clk(clk),
        .rst(rst),
        .data(M_register_files_data),
        .rd1(M_register_files_rd1),
        .rd2(M_register_files_rd2),
        .player_x_data(M_register_files_player_x_data)
    );
    
    
    localparam _MP_COLUMN_DIMENSION_1519347830 = 5'h8;
    localparam _MP_ROW_DIMENSION_1519347830 = 5'h8;
    localparam _MP_PIXEL_COUNT_1519347830 = 10'h40;
    localparam _MP_BUFFER_SIZE_1519347830 = 11'h400;
    logic [7:0] M_player_mode_led;
    logic [2:0][7:0] M_player_mode_io_led;
    logic [7:0] M_player_mode_io_segment;
    logic [3:0] M_player_mode_io_select;
    logic M_player_mode_data;
    logic [1:0] M_player_mode_debug;
    logic M_player_mode_player_collided;
    
    player_mode #(
        .COLUMN_DIMENSION(_MP_COLUMN_DIMENSION_1519347830),
        .ROW_DIMENSION(_MP_ROW_DIMENSION_1519347830),
        .PIXEL_COUNT(_MP_PIXEL_COUNT_1519347830),
        .BUFFER_SIZE(_MP_BUFFER_SIZE_1519347830)
    ) player_mode (
        .left_button(left_button),
        .right_button(right_button),
        .start_button(start_button),
        .clk(clk),
        .rst(rst),
        .led(M_player_mode_led),
        .io_led(M_player_mode_io_led),
        .io_segment(M_player_mode_io_segment),
        .io_select(M_player_mode_io_select),
        .data(M_player_mode_data),
        .debug(M_player_mode_debug),
        .player_collided(M_player_mode_player_collided)
    );
    
    
    always @* begin
        M_control_unit_regfile_rd2 = M_register_files_rd2;
        
        case (M_control_unit_asel)
            2'h0: begin
                input_alu_a = M_register_files_rd1;
            end
            2'h1: begin
                input_alu_a = 2'h3;
            end
            2'h3: begin
                input_alu_a = 1'h0;
            end
            default: begin
                input_alu_a = 1'h0;
            end
        endcase
        
        case (M_control_unit_bsel)
            2'h0: begin
                input_alu_b = M_register_files_rd2;
            end
            2'h1: begin
                input_alu_b = 1'h1;
            end
            2'h3: begin
                input_alu_b = 2'h3;
            end
            2'h2: begin
                input_alu_b = 1'h0;
            end
            default: begin
                input_alu_b = 1'h0;
            end
        endcase
        M_game_alu_a = input_alu_a;
        M_game_alu_b = input_alu_b;
        M_game_alu_alufn = M_control_unit_alufn;
        
        case (M_control_unit_alu_out_sel)
            2'h1: begin
                M_register_files_data = 16'hffff;
            end
            2'h2: begin
                M_register_files_data = 4'hf;
            end
            2'h3: begin
                M_register_files_data = 1'h0;
            end
            default: begin
                M_register_files_data = M_game_alu_out;
            end
        endcase
        debug_general = M_control_unit_debug;
        data = M_player_mode_data;
        player_collided_out = M_player_mode_player_collided;
    end
    
    
endmodule