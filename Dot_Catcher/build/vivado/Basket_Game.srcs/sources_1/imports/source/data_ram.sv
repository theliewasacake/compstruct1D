/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module data_ram #(
        parameter ROW_DIMENSION = 4'h8,
        parameter COLUMN_DIMENSION = 4'h8,
        parameter ENCODING_AMOUNT = 3'h4
    ) (
        input wire clk,
        input wire rst,
        input wire update,
        input wire [($clog2(COLUMN_DIMENSION))-1:0] player_x_pos,
        input wire [($clog2(ROW_DIMENSION))-1:0] player_y_pos,
        input wire [($clog2((5'h10)'(ROW_DIMENSION * COLUMN_DIMENSION)))-1:0] address,
        output reg [2:0] out_encoding,
        output reg ready,
        output reg [($clog2((5'h10)'(ROW_DIMENSION * COLUMN_DIMENSION)))-1:0] debug_address_pointer,
        input wire start_button,
        output reg [1:0] debug_data,
        input wire start_game,
        output reg player_collided
    );
    logic [($clog2(COLUMN_DIMENSION))-1:0] L_25ef4d04_new_x_pos;
    logic [($clog2(COLUMN_DIMENSION))-1:0] L_1efaf1ad_new_x_pos;
    localparam DEPTH = (5'h10)'(COLUMN_DIMENSION * ROW_DIMENSION);
    localparam E_States_WAIT = 4'h0;
    localparam E_States_CLEAR = 4'h1;
    localparam E_States_CLEAR_PLAYER = 4'h2;
    localparam E_States_WRITE_PLAYER = 4'h3;
    localparam E_States_WRITE_DOT = 4'h4;
    localparam E_States_CLEAR_DOT = 4'h5;
    localparam E_States_CHECK_COLLISION = 4'h6;
    localparam E_States_CHECK_MISS = 4'h7;
    localparam E_States_IDLE = 4'h8;
    localparam E_States_GAME_OVER_INIT = 4'h9;
    localparam E_States_GAME_OVER = 4'ha;
    localparam CLK_FREQ = 24'h989680;
    localparam BACKGROUND_COLOR = 2'h0;
    localparam PLAYER_COLOR = 2'h1;
    localparam DOT_COLOR = 2'h2;
    localparam WHITE_COLOR = 2'h3;
    localparam O = 2'h0;
    localparam X = 2'h2;
    localparam Y = 2'h1;
    localparam logic [63:0][1:0] GAME_OVER_BITMAP = {{2'h2, 2'h2, 2'h2, 2'h2, 2'h1, 2'h1, 2'h1, 2'h1, 2'h0, 2'h0, 2'h0, 2'h2, 2'h0, 2'h0, 2'h0, 2'h1, 2'h0, 2'h0, 2'h0, 2'h2, 2'h0, 2'h0, 2'h0, 2'h1, 2'h0, 2'h0, 2'h0, 2'h2, 2'h0, 2'h0, 2'h0, 2'h1, 2'h2, 2'h2, 2'h0, 2'h2, 2'h1, 2'h1, 2'h0, 2'h1, 2'h2, 2'h0, 2'h0, 2'h2, 2'h1, 2'h0, 2'h0, 2'h1, 2'h2, 2'h0, 2'h0, 2'h2, 2'h1, 2'h0, 2'h0, 2'h1, 2'h2, 2'h2, 2'h2, 2'h2, 2'h1, 2'h1, 2'h1, 2'h1}};
    logic [3:0] D_fsm_d, D_fsm_q = 4'h0;
    logic [($clog2(DEPTH))-1:0] D_writer_pointer_d, D_writer_pointer_q = 1'h0;
    logic D_update_flag_d, D_update_flag_q = 1'h0;
    logic [23:0] D_tick_counter_d, D_tick_counter_q = 1'h0;
    logic [($clog2(ROW_DIMENSION))-1:0] D_dot_y_pos_d, D_dot_y_pos_q = 3'h7;
    logic [($clog2(COLUMN_DIMENSION))-1:0] D_dot_x_pos_d, D_dot_x_pos_q = 1'h0;
    logic [($clog2(ROW_DIMENSION))-1:0] D_prev_dot_y_pos_d, D_prev_dot_y_pos_q = 1'h0;
    logic [($clog2(COLUMN_DIMENSION))-1:0] D_prev_dot_x_pos_d, D_prev_dot_x_pos_q = 1'h0;
    logic [($clog2(COLUMN_DIMENSION))-1:0] D_prev_player_x_d, D_prev_player_x_q = 1'h0;
    logic [($clog2(ROW_DIMENSION))-1:0] D_prev_player_y_d, D_prev_player_y_q = 1'h0;
    logic D_start_dot_d, D_start_dot_q = 1'h0;
    logic [1:0] D_lives_d, D_lives_q = 2'h3;
    logic D_dot_caught_d, D_dot_caught_q = 1'h0;
    logic D_game_over_flag_d, D_game_over_flag_q = 1'h0;
    logic [31:0] D_seed_d, D_seed_q = 1'h0;
    localparam _MP_SEED_1395812819 = 33'h19430f418;
    logic M_rng_next;
    logic [4:0] M_rng_num;
    
    pn_gen #(
        .SEED(_MP_SEED_1395812819)
    ) rng (
        .clk(clk),
        .rst(rst),
        .seed(D_seed_q),
        .next(M_rng_next),
        .num(M_rng_num)
    );
    
    
    localparam _MP_CLK_FREQ_157673401 = 24'h989680;
    localparam _MP_MIN_DELAY_157673401 = 5'h14;
    localparam _MP_NUM_SYNC_157673401 = 2'h2;
    logic M_start_button_cond_in;
    logic M_start_button_cond_out;
    
    button_conditioner #(
        .CLK_FREQ(_MP_CLK_FREQ_157673401),
        .MIN_DELAY(_MP_MIN_DELAY_157673401),
        .NUM_SYNC(_MP_NUM_SYNC_157673401)
    ) start_button_cond (
        .clk(clk),
        .in(M_start_button_cond_in),
        .out(M_start_button_cond_out)
    );
    
    
    localparam _MP_RISE_1647064867 = 1'h1;
    localparam _MP_FALL_1647064867 = 1'h0;
    logic M_start_button_edge_in;
    logic M_start_button_edge_out;
    
    edge_detector #(
        .RISE(_MP_RISE_1647064867),
        .FALL(_MP_FALL_1647064867)
    ) start_button_edge (
        .clk(clk),
        .in(M_start_button_edge_in),
        .out(M_start_button_edge_out)
    );
    
    
    localparam _MP_WIDTH_1146248432 = $clog2(ENCODING_AMOUNT);
    localparam _MP_ENTRIES_1146248432 = DEPTH;
    logic [((($clog2(_MP_ENTRIES_1146248432)-1) - (0) + 1))-1:0] M_ram_waddr;
    logic [(((_MP_WIDTH_1146248432-1) - (0) + 1))-1:0] M_ram_write_data;
    logic M_ram_write_enable;
    logic [((($clog2(_MP_ENTRIES_1146248432)-1) - (0) + 1))-1:0] M_ram_raddr;
    logic [(((_MP_WIDTH_1146248432-1) - (0) + 1))-1:0] M_ram_read_data;
    
    simple_dual_port_ram #(
        .WIDTH(_MP_WIDTH_1146248432),
        .ENTRIES(_MP_ENTRIES_1146248432)
    ) ram (
        .rclk(clk),
        .wclk(clk),
        .waddr(M_ram_waddr),
        .write_data(M_ram_write_data),
        .write_enable(M_ram_write_enable),
        .raddr(M_ram_raddr),
        .read_data(M_ram_read_data)
    );
    
    
    logic [3:0] D_player_col_d, D_player_col_q = 1'h0;
    logic [31:0] M_alu_game_a;
    logic [31:0] M_alu_game_b;
    logic [5:0] M_alu_game_alufn;
    logic [31:0] M_alu_game_out;
    logic M_alu_game_z;
    logic M_alu_game_v;
    logic M_alu_game_n;
    
    alu alu_game (
        .a(M_alu_game_a),
        .b(M_alu_game_b),
        .alufn(M_alu_game_alufn),
        .out(M_alu_game_out),
        .z(M_alu_game_z),
        .v(M_alu_game_v),
        .n(M_alu_game_n)
    );
    
    
    always @* begin
        D_player_col_d = D_player_col_q;
        D_seed_d = D_seed_q;
        D_start_dot_d = D_start_dot_q;
        D_lives_d = D_lives_q;
        D_writer_pointer_d = D_writer_pointer_q;
        D_dot_y_pos_d = D_dot_y_pos_q;
        D_dot_x_pos_d = D_dot_x_pos_q;
        D_prev_dot_y_pos_d = D_prev_dot_y_pos_q;
        D_prev_dot_x_pos_d = D_prev_dot_x_pos_q;
        D_prev_player_x_d = D_prev_player_x_q;
        D_prev_player_y_d = D_prev_player_y_q;
        D_fsm_d = D_fsm_q;
        D_update_flag_d = D_update_flag_q;
        D_tick_counter_d = D_tick_counter_q;
        D_dot_caught_d = D_dot_caught_q;
        D_game_over_flag_d = D_game_over_flag_q;
        
        D_player_col_d = D_player_col_q;
        player_collided = 1'h0;
        M_ram_raddr = address;
        M_ram_waddr = 1'h0;
        M_ram_write_data = 1'h0;
        M_ram_write_enable = 1'h0;
        out_encoding = M_ram_read_data;
        M_alu_game_a = 1'h0;
        M_alu_game_b = 1'h0;
        M_alu_game_alufn = 1'h0;
        M_start_button_cond_in = start_button;
        M_start_button_edge_in = M_start_button_cond_out;
        D_seed_d = D_seed_q + 1'h1;
        D_start_dot_d = D_start_dot_q;
        D_lives_d = D_lives_q;
        D_writer_pointer_d = D_writer_pointer_q;
        D_dot_y_pos_d = D_dot_y_pos_q;
        D_dot_x_pos_d = D_dot_x_pos_q;
        D_prev_dot_y_pos_d = D_prev_dot_y_pos_q;
        D_prev_dot_x_pos_d = D_prev_dot_x_pos_q;
        D_prev_player_x_d = D_prev_player_x_q;
        D_prev_player_y_d = D_prev_player_y_q;
        D_fsm_d = D_fsm_q;
        D_update_flag_d = D_update_flag_q;
        D_tick_counter_d = D_tick_counter_q + 1'h1;
        D_dot_caught_d = D_dot_caught_q;
        D_game_over_flag_d = D_game_over_flag_q;
        M_rng_next = 1'h0;
        if (!D_game_over_flag_q && (player_x_pos != D_prev_player_x_q || player_y_pos != D_prev_player_y_q)) begin
            D_update_flag_d = 1'h1;
        end
        if ((&D_tick_counter_q) && D_start_dot_q && !D_game_over_flag_q) begin
            D_tick_counter_d = 1'h0;
            D_prev_dot_x_pos_d = D_dot_x_pos_q;
            D_prev_dot_y_pos_d = D_dot_y_pos_q;
            if (D_dot_y_pos_q > 1'h0) begin
                D_dot_y_pos_d = D_dot_y_pos_q - 1'h1;
            end else begin
                if (!D_dot_caught_q) begin
                    D_fsm_d = 4'h7;
                end else begin
                    D_dot_caught_d = 1'h0;
                    D_dot_y_pos_d = ROW_DIMENSION - 1'h1;
                    L_25ef4d04_new_x_pos = M_rng_num[$clog2(COLUMN_DIMENSION) - 1'h1:1'h0];
                    if (L_25ef4d04_new_x_pos >= COLUMN_DIMENSION) begin
                        D_dot_x_pos_d = L_25ef4d04_new_x_pos - (COLUMN_DIMENSION >> 1'h1);
                    end else begin
                        D_dot_x_pos_d = L_25ef4d04_new_x_pos;
                    end
                    M_rng_next = 1'h1;
                end
            end
            D_update_flag_d = 1'h1;
        end
        ready = D_fsm_q == 4'h8 || D_fsm_q == 4'ha;
        if (update && !D_game_over_flag_q) begin
            D_update_flag_d = 1'h1;
        end
        
        case (D_fsm_q)
            4'h0: begin
                if (start_game) begin
                    D_start_dot_d = 1'h1;
                    D_dot_caught_d = 1'h0;
                    D_game_over_flag_d = 1'h0;
                    D_writer_pointer_d = 1'h0;
                    D_prev_player_x_d = 2'h3;
                    D_fsm_d = 4'h1;
                end
            end
            4'h1: begin
                M_ram_write_enable = 1'h1;
                M_ram_waddr = D_writer_pointer_q;
                M_ram_write_data = 2'h0;
                D_writer_pointer_d = D_writer_pointer_q + 1'h1;
                if ((&D_writer_pointer_q)) begin
                    D_writer_pointer_d = 1'h0;
                    D_fsm_d = 4'h2;
                end
            end
            4'h2: begin
                M_ram_write_enable = 1'h1;
                M_ram_waddr = D_prev_player_y_q * COLUMN_DIMENSION + D_prev_player_x_q;
                M_ram_write_data = 2'h0;
                if (D_prev_player_x_q < COLUMN_DIMENSION - 1'h1) begin
                    D_writer_pointer_d = D_prev_player_y_q * COLUMN_DIMENSION + D_prev_player_x_q + 1'h1;
                end else begin
                    D_writer_pointer_d = player_y_pos * COLUMN_DIMENSION + player_x_pos;
                    D_fsm_d = 4'h3;
                end
                if (D_fsm_q == 4'h2 && D_writer_pointer_q == D_prev_player_y_q * COLUMN_DIMENSION + D_prev_player_x_q + 1'h1) begin
                    M_ram_write_enable = 1'h1;
                    M_ram_waddr = D_writer_pointer_q;
                    M_ram_write_data = 2'h0;
                    D_writer_pointer_d = player_y_pos * COLUMN_DIMENSION + player_x_pos;
                    D_fsm_d = 4'h3;
                end
            end
            4'h3: begin
                M_ram_write_enable = 1'h1;
                M_ram_waddr = D_writer_pointer_q;
                M_ram_write_data = 2'h1;
                D_prev_player_x_d = player_x_pos;
                D_prev_player_y_d = player_y_pos;
                if (player_x_pos < COLUMN_DIMENSION - 1'h1) begin
                    D_writer_pointer_d = player_y_pos * COLUMN_DIMENSION + player_x_pos + 1'h1;
                end else begin
                    D_fsm_d = 4'h4;
                end
                if (D_fsm_q == 4'h3 && D_writer_pointer_q == player_y_pos * COLUMN_DIMENSION + player_x_pos + 1'h1) begin
                    M_ram_write_enable = 1'h1;
                    M_ram_waddr = D_writer_pointer_q;
                    M_ram_write_data = 2'h1;
                    D_fsm_d = 4'h4;
                end
            end
            4'h4: begin
                if (D_dot_y_pos_q == player_y_pos && (D_dot_x_pos_q == player_x_pos || D_dot_x_pos_q == player_x_pos + 1'h1)) begin
                    D_player_col_d = 1'h1;
                    player_collided = 1'h1;
                    D_dot_caught_d = 1'h1;
                    M_ram_write_enable = 1'h1;
                    M_ram_waddr = D_dot_y_pos_q * COLUMN_DIMENSION + D_dot_x_pos_q;
                    M_ram_write_data = 2'h3;
                end else begin
                    M_ram_write_enable = 1'h1;
                    M_ram_waddr = D_dot_y_pos_q * COLUMN_DIMENSION + D_dot_x_pos_q;
                    M_ram_write_data = 2'h2;
                end
                D_fsm_d = 4'h8;
            end
            4'h6: begin
                if (D_dot_y_pos_q == player_y_pos && (D_dot_x_pos_q == player_x_pos || D_dot_x_pos_q == player_x_pos + 1'h1)) begin
                    player_collided = 1'h1;
                    D_player_col_d = 1'h1;
                    D_dot_caught_d = 1'h1;
                end
                D_fsm_d = 4'h8;
            end
            4'h7: begin
                M_alu_game_a = D_lives_q;
                M_alu_game_b = 3'h1;
                M_alu_game_alufn = 6'h1;
                D_lives_d = M_alu_game_out[1'h1:1'h0];
                if (D_lives_q == 1'h1) begin
                    D_player_col_d = 1'h0;
                    D_game_over_flag_d = 1'h1;
                    D_writer_pointer_d = 1'h0;
                    D_fsm_d = 4'h9;
                end else begin
                    D_player_col_d = 1'h0;
                    D_dot_y_pos_d = ROW_DIMENSION - 1'h1;
                    L_1efaf1ad_new_x_pos = M_rng_num[$clog2(COLUMN_DIMENSION) - 1'h1:1'h0];
                    if (L_1efaf1ad_new_x_pos >= COLUMN_DIMENSION) begin
                        D_dot_x_pos_d = L_1efaf1ad_new_x_pos - (COLUMN_DIMENSION >> 1'h1);
                    end else begin
                        D_dot_x_pos_d = L_1efaf1ad_new_x_pos;
                    end
                    M_rng_next = 1'h1;
                    D_dot_caught_d = 1'h0;
                    D_fsm_d = 4'h8;
                end
            end
            4'h8: begin
                if (D_update_flag_q && !D_game_over_flag_q) begin
                    D_update_flag_d = 1'h0;
                    D_fsm_d = 4'h5;
                end
            end
            4'h5: begin
                M_ram_write_enable = 1'h1;
                M_ram_waddr = D_prev_dot_y_pos_q * COLUMN_DIMENSION + D_prev_dot_x_pos_q;
                M_ram_write_data = 2'h0;
                D_fsm_d = 4'h1;
            end
            4'h9: begin
                D_writer_pointer_d = 1'h0;
                D_fsm_d = 4'ha;
            end
            4'ha: begin
                M_ram_write_enable = 1'h1;
                M_ram_waddr = D_writer_pointer_q;
                M_ram_write_data = GAME_OVER_BITMAP[D_writer_pointer_q];
                D_writer_pointer_d = D_writer_pointer_q + 1'h1;
                if (D_writer_pointer_q == 6'h3f) begin
                    D_writer_pointer_d = 1'h0;
                    D_fsm_d = 4'h9;
                end
                if (!start_game && M_start_button_edge_out) begin
                    D_prev_player_x_d = 1'h0;
                    D_writer_pointer_d = 1'h0;
                    D_lives_d = 2'h3;
                    D_dot_caught_d = 1'h0;
                    D_dot_y_pos_d = ROW_DIMENSION - 1'h1;
                    D_dot_x_pos_d = 1'h0;
                    D_prev_dot_y_pos_d = 1'h0;
                    D_prev_dot_x_pos_d = 1'h0;
                    D_game_over_flag_d = 1'h0;
                    M_rng_next = 1'h1;
                    D_fsm_d = 4'h0;
                end
            end
        endcase
        debug_address_pointer = D_writer_pointer_q;
        debug_data = D_lives_q;
    end
    
    
    always @(posedge (clk)) begin
        if ((rst) == 1'b1) begin
            D_fsm_q <= 4'h0;
            D_writer_pointer_q <= 1'h0;
            D_update_flag_q <= 1'h0;
            D_tick_counter_q <= 1'h0;
            D_dot_y_pos_q <= 3'h7;
            D_dot_x_pos_q <= 1'h0;
            D_prev_dot_y_pos_q <= 1'h0;
            D_prev_dot_x_pos_q <= 1'h0;
            D_prev_player_x_q <= 1'h0;
            D_prev_player_y_q <= 1'h0;
            D_start_dot_q <= 1'h0;
            D_lives_q <= 2'h3;
            D_dot_caught_q <= 1'h0;
            D_game_over_flag_q <= 1'h0;
            D_player_col_q <= 1'h0;
        end else begin
            D_fsm_q <= D_fsm_d;
            D_writer_pointer_q <= D_writer_pointer_d;
            D_update_flag_q <= D_update_flag_d;
            D_tick_counter_q <= D_tick_counter_d;
            D_dot_y_pos_q <= D_dot_y_pos_d;
            D_dot_x_pos_q <= D_dot_x_pos_d;
            D_prev_dot_y_pos_q <= D_prev_dot_y_pos_d;
            D_prev_dot_x_pos_q <= D_prev_dot_x_pos_d;
            D_prev_player_x_q <= D_prev_player_x_d;
            D_prev_player_y_q <= D_prev_player_y_d;
            D_start_dot_q <= D_start_dot_d;
            D_lives_q <= D_lives_d;
            D_dot_caught_q <= D_dot_caught_d;
            D_game_over_flag_q <= D_game_over_flag_d;
            D_player_col_q <= D_player_col_d;
        end
    end
    always @(posedge (clk)) begin
        D_seed_q <= D_seed_d;
        
    end
endmodule