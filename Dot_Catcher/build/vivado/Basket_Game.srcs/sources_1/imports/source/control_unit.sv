/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module control_unit (
        input wire clk,
        input wire rst,
        input wire left_button,
        input wire right_button,
        input wire start_button,
        input wire [31:0] regfile_rd2,
        output reg [5:0] alufn,
        output reg [2:0] asel,
        output reg [2:0] bsel,
        output reg [1:0] alu_out_sel,
        output reg [2:0] regfile_wa,
        output reg [2:0] regfile_ra1,
        output reg [2:0] regfile_ra2,
        output reg regfile_we,
        output reg [3:0] debug,
        input wire player_collided
    );
    logic player_collided_out;
    localparam E_GameFSM_INIT = 4'h0;
    localparam E_GameFSM_RESET_PLAYER_LIVES = 4'h1;
    localparam E_GameFSM_RESET_PLAYER_SCORE = 4'h2;
    localparam E_GameFSM_RESET_PLAYER_POSITION = 4'h3;
    localparam E_GameFSM_CHECK_BUTTONPRESS = 4'h4;
    localparam E_GameFSM_CHECK_PLAYER_COLLISION = 4'h5;
    localparam E_GameFSM_CHECK_PLAYERLIVES = 4'h6;
    localparam E_GameFSM_CHECK_DOT = 4'h7;
    localparam E_GameFSM_UPDATE_PLAYER = 4'h8;
    localparam E_GameFSM_UPDATE_DOT = 4'h9;
    localparam E_GameFSM_GAME_OVER = 4'ha;
    logic [3:0] D_gameStates_d, D_gameStates_q = 4'h0;
    always @* begin
        D_gameStates_d = D_gameStates_q;
        
        alufn = 1'h0;
        asel = 1'h0;
        bsel = 1'h0;
        regfile_we = 1'h0;
        regfile_wa = 3'h6;
        regfile_ra1 = 1'h0;
        regfile_ra2 = 1'h0;
        alu_out_sel = 1'h0;
        debug = 4'h0;
        player_collided_out = player_collided;
        D_gameStates_d = D_gameStates_q;
        if (rst) begin
            D_gameStates_d = 4'h0;
        end else begin
            
            case (D_gameStates_q)
                4'h0: begin
                    D_gameStates_d = 4'h1;
                end
                4'h1: begin
                    alufn = 6'h1a;
                    asel = 2'h1;
                    bsel = 2'h0;
                    regfile_we = 1'h1;
                    regfile_wa = 1'h0;
                    D_gameStates_d = 4'h2;
                end
                4'h2: begin
                    alufn = 6'h1a;
                    asel = 2'h3;
                    bsel = 2'h0;
                    regfile_we = 1'h1;
                    regfile_wa = 1'h1;
                    D_gameStates_d = 4'h3;
                end
                4'h3: begin
                    alufn = 6'h1a;
                    asel = 2'h1;
                    bsel = 2'h0;
                    regfile_we = 1'h1;
                    regfile_wa = 2'h2;
                    alufn = 6'h1a;
                    asel = 2'h1;
                    bsel = 2'h0;
                    regfile_we = 1'h1;
                    regfile_wa = 2'h3;
                    D_gameStates_d = 4'h4;
                end
                4'h4: begin
                    regfile_ra1 = 2'h2;
                    if (left_button) begin
                        if (regfile_rd2 > 1'h0) begin
                            alufn = 6'h1;
                            asel = 2'h0;
                            bsel = 2'h1;
                            regfile_we = 1'h1;
                            regfile_wa = 2'h2;
                        end
                    end else begin
                        if (right_button) begin
                            if (regfile_rd2 < 3'h7) begin
                                alufn = 6'h0;
                                asel = 2'h0;
                                bsel = 2'h1;
                                regfile_we = 1'h1;
                                regfile_wa = 2'h2;
                            end
                        end
                    end
                    D_gameStates_d = 4'h5;
                end
                4'h5: begin
                    player_collided_out = player_collided;
                    if (player_collided_out) begin
                        regfile_ra1 = 1'h1;
                        alufn = 6'h0;
                        asel = 2'h0;
                        bsel = 2'h1;
                        regfile_we = 1'h1;
                        regfile_wa = 1'h1;
                        regfile_ra2 = 2'h2;
                        debug = regfile_rd2[2'h3:1'h0];
                    end
                    D_gameStates_d = 4'h4;
                end
            endcase
        end
    end
    
    
    always @(posedge (clk)) begin
        if ((rst) == 1'b1) begin
            D_gameStates_q <= 4'h0;
        end else begin
            D_gameStates_q <= D_gameStates_d;
        end
    end
endmodule