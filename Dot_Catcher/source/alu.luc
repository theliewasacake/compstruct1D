module alu (
    input a[32],
    input b[32],
    input alufn[6],
    output out[32],
    output z,
    output v,
    output n
) {
    
    sig out_sig[32]

    always {
        z = 0
        v = 0
        n = 0
        case(alufn){
            6h00: // ADD
                out_sig = a + b
                z = ~|out_sig
                v = (a[31] & (b[31] ^ alufn[0]) & !out_sig[31]) | (!a[31] & !(b[31] ^ alufn[0]) & out_sig[31]) 
                n = out_sig[31]
            6h01: // SUB
                out_sig = a - b
                z = ~|out_sig
                v = (a[31] & (b[31] ^ alufn[0]) & !out_sig[31]) | (!a[31] & !(b[31] ^ alufn[0]) & out_sig[31]) 
                n = out_sig[31]   
            6h02: // MUL
                out_sig = a * b 
            6h18: // BITWISE AND
                out_sig = a & b 
            6h1E: // BITWISE OR 
                out_sig = a | b 
            6h16: // BITWISE XOR
                out_sig = a ^ b 
            6h1A: // "A"
                out_sig = a
            6h1B: // "B"
                out_sig = b
            6h20: // SHL 
                out_sig = a << b[4:0]
            6h21: // SHR 
                out_sig = a >> b[4:0]
            6h23: // SRA 
                out_sig = a >>> b[4:0]
            6h33: // CMPEQ 
                out_sig = a == b 
            6h35: // CMPLT 
                out_sig = a < b 
            6h37: // CMPLE
                out_sig = a <= b         
            default:
                out_sig = 0        
        }
        out = out_sig   
    }
}