module beta_cpu (
    input clk,  // clock
    input slowclk,
    input rst,
    input irq,
    input lcd_spi_busy,
    input acc_spi_busy,
    input spi_in_data[8],
    input instruction[32],
    input mem_data_input[32],
    output ia[32],
    output mem_data_address[32],
    output mem_data_output[32],
    output wr,
    output lcd_enable,
    output acc_enable,
    output debug[4][16]
    
) {
    
    control_unit control_system(.clk(clk), .rst(rst))
    alu alu_system
    regfile_unit regfile_system(.clk(clk), .rst(rst))
    pc_unit pc_system(.clk(clk), .rst(rst))
    
    sig asel_out[32]
    sig bsel_out[32]
    sig wdsel_out[32]
    
    always {
        // default connections to silence errors
        ia = 0
        mem_data_address = 0
        mem_data_output = 0
        wr = 0
        
        control_system.lcd_spi_busy = lcd_spi_busy
        lcd_enable = control_system.lcd_enable
        
        control_system.acc_spi_busy = acc_spi_busy
        acc_enable = control_system.acc_enable
        
        control_system.irq = 0
        control_system.z = 0
        control_system.ia31 = 0
        control_system.opcode = 0
        control_system.slowclk = 0
        
        alu_system.a = 0
        alu_system.b = 0
        alu_system.alufn = 0
        
        regfile_system.ra = 0
        regfile_system.rb = 0
        regfile_system.rc = 0
        regfile_system.werf = 0
        regfile_system.wasel = 0
        regfile_system.ra2sel = 0
        regfile_system.slowclk = 0
        regfile_system.wdsel_out = 0 
        
        pc_system.id = 0
        pc_system.pcsel = 0
        pc_system.slowclk = 0
        pc_system.reg_data_1 = 0
        
        asel_out = 0
        bsel_out = 0
        wdsel_out = 0
        
        // Task 12
        //***** CONTROL unit ******// 
        control_system.irq = irq;
        control_system.z = regfile_system.z;
        control_system.ia31 = pc_system.ia[31];
        control_system.opcode = instruction[31:26];
        control_system.slowclk = slowclk;
        
        //***** PC unit ******// 
        pc_system.id = instruction[15:0];
        pc_system.pcsel = control_system.pcsel;
        pc_system.slowclk = slowclk;
        pc_system.reg_data_1 = regfile_system.rd1;

        
        //***** REGFILE unit *****//
        regfile_system.ra = instruction[20:16];  // RA field
        regfile_system.rb = instruction[15:11];  // RB field
        regfile_system.rc = instruction[25:21];    // RC field
        regfile_system.werf = control_system.werf;
        regfile_system.wasel = control_system.wasel;
        regfile_system.ra2sel = control_system.ra2sel;
        regfile_system.slowclk = slowclk;
        regfile_system.wdsel_out = wdsel_out

        
        //****** ALU + WDSEL unit *******//
        // ASEL mux
        case (control_system.asel) {
            1b0: asel_out = regfile_system.rd1  // From register file
            1b1: asel_out = c{1b0, pc_system.pc_4_sxtc[30:0]}        // Zero 
            default: asel_out = regfile_system.rd1
        }

        // BSEL mux
        case (control_system.bsel) {
            1b0: bsel_out = regfile_system.rd2  // From register file
            1b1: bsel_out = c{16x{instruction[15]}, instruction[15:0]} // Sign-extended immediate
            default: bsel_out = regfile_system.rd2;
        }

        // WDSEL mux
        case (control_system.wdsel) {
            2b00: wdsel_out = c{pc_system.ia[31], pc_system.pc_4[30:0]}
            2b01: wdsel_out = alu_system.out
            2b10: wdsel_out = mem_data_input //mrd
            2b11: wdsel_out = c{24h0, spi_in_data}
            default: wdsel_out = c{pc_system.ia[31], pc_system.pc_4[30:0]}
        }

        // connect asel and bsel to alu, wdsel to regfile
        alu_system.a = asel_out;
        alu_system.b = bsel_out;
        alu_system.alufn = control_system.alufn;
        regfile_system.wdsel_out = wdsel_out
        
        // remaining beta datapath connections
        // connect alu_system with asel_out and bsel_out
        // connect regfile_system with wdsel_out 
        // connect mem_data_address with the output of the alu
        // connect mem_data_output with regfile_system 
        // connect wr sig with control_system 
        // connect ia with pc system
        mem_data_address = alu_system.out
        mem_data_output = regfile_system.rd2 //mwd
        wr = control_system.wr
        ia = pc_system.ia
        
        // debug signals
        debug[0][15:0] = pc_system.pcsel_out[15:0]
        debug[1][15:0] = asel_out[15:0]
        debug[2][15:0] = bsel_out[15:0]
        debug[3][15:0] = wdsel_out[15:0]
        
    }
}