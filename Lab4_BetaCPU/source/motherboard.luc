module motherboard (
    input clk,  // clock
    input rst,  // reset
    input irq[3],
    input slowclk, 
    output id[32],
    output ia[32],
    output ma[32],  // ALU output / EA
    output mrd[32], // Mem[EA]
    output mwd[32], // RD2 output 
    output output_buffer[32],
    output input_buffer[32],
    output debug[4][16]
) {
    
    // Beta CPU
    beta_cpu beta(.clk(clk))
    
    // setup and instantiate memory unit and instruction ROM
    const MEMORY_SIZE = 32
    instruction_rom instruction_unit(#WORDS(MEMORY_SIZE))
    memory_unit memory_unit(#WORDS(MEMORY_SIZE), .clk(clk)) 
    
    // prepare output buffer
    dff system_output_buffer[32](.clk(clk), .rst(rst)) // 32 bit beta output buffer, hardwired to always read memory_unit value at byte address 0xC
    // prepare input buffer
    dff system_input_buffer[32](.clk(clk), .rst(rst)) // 32 bit beta input buffer, hardwired to always write memory_unit value at byte address 0x10
    
    // counter to write instructions from ROM to instruction memory
    dff writer_counter[$clog2(MEMORY_SIZE)](.clk(clk))
    enum MotherboardStates {INSTRUCTIONLOAD, RUN, LOAD_OUTPUT, DISPLAY_OUTPUT, UPDATE_INPUT}
    dff motherboard[$width(MotherboardStates)](.clk(clk), .rst(rst), #INIT(MotherboardStates.INSTRUCTIONLOAD))
    
    always {
        instruction_unit.addr = 0 // always set to 0 initially
        beta.irq = |irq // IRQ as long as any of of the buttons[2:0] is pressed
        
        // store the button press to input buffer 
        if (|irq){
            if (irq[0]){
                system_input_buffer.d = 32hB0
            }
            else if (irq[1]){
                system_input_buffer.d = 32hB1
            }
            else if (irq[2]){
                system_input_buffer.d = 32hB2
            }
        }
        
        beta.slowclk = slowclk 
        beta.rst = rst
        
        // connect memory unit with beta 
        beta.instruction = memory_unit.id
        beta.mem_data_input = memory_unit.mrd
        memory_unit.ia = beta.ia[31:0] 
        memory_unit.wd = beta.mem_data_output 
        memory_unit.we = beta.wr 
        memory_unit.waddr = beta.mem_data_address[31:0] 
        memory_unit.raddr = beta.mem_data_address[31:0] 
        
        // turn off instruction loading
        memory_unit.instruction_we = b0
        memory_unit.instruction_wd = 32b0 
        
        // Load ROM instructions to RAM first, then run the Beta 
        case(motherboard.q){
            // instruction loading
            MotherboardStates.INSTRUCTIONLOAD:
                beta.rst = 1
                writer_counter.d = writer_counter.q + 1
                instruction_unit.addr = writer_counter.q
                memory_unit.instruction_wd = instruction_unit.out
                memory_unit.instruction_we = b1
                memory_unit.ia = writer_counter.q<<2 // pad with two zeroes to make it byte addressable because memory_unit expects byte addresing ia
                if ((writer_counter.q + 1) == MEMORY_SIZE){
                    motherboard.d = MotherboardStates.RUN // wait one more clock cycle to allow the last instruction to be loaded before start execution
                }
            
            MotherboardStates.RUN:
                // only load output and update input at the the beginning of each "next" instruction cycle 
                // LOAD_OUTPUT will hijack EA for 2 clk cycles. At this point, the CPU is not receiving a legitimate Mem[EA] if it is doing a LD/LDR 
                // However since "slowclk" is more than 2 clk cycles, it will be fixed by the third cycle 
                // actual EA coming out from beta is valid by then, when plugged into memory unit
                if (slowclk){
                    motherboard.d = MotherboardStates.LOAD_OUTPUT
                }
                else{
                    motherboard.d = MotherboardStates.RUN
                }
            
            MotherboardStates.LOAD_OUTPUT:
                // load hardcoded byte address 32hC (12) for output 
                memory_unit.raddr = 32hC
                motherboard.d = MotherboardStates.DISPLAY_OUTPUT
            
            MotherboardStates.DISPLAY_OUTPUT:
                // display Mem[12] to beta_output_buffer for user to see
                system_output_buffer.d = memory_unit.mrd // Note: a little bit janky in simulation, will sometimes overwrite 
                motherboard.d = MotherboardStates.UPDATE_INPUT
            
            MotherboardStates.UPDATE_INPUT:
                // always store hardcoded byte address 32h10 (16) for any incoming input each time "next" happens
                // need 2x original clock cycles for data to be readable at 32h10, plenty of time since "next" is more than 2 cycles
                memory_unit.waddr = 32h10
                memory_unit.wd = system_input_buffer.q
                memory_unit.we = 1
                motherboard.d = MotherboardStates.RUN
        }
        
        // output values
        output_buffer = system_output_buffer.q
        input_buffer = system_input_buffer.q
        ia = beta.ia
        id = memory_unit.id
        ma = beta.mem_data_address
        mrd = memory_unit.mrd
        mwd = beta.mem_data_output
        debug = beta.debug
        
    }
}