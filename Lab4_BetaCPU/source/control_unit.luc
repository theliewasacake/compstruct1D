module control_unit (
    input clk,
    input irq, 
    input z,
    input rst,    
    input opcode[6],
    input slowclk,
    input ia31,
    input lcd_spi_busy,
    input acc_spi_busy,
    output pcsel[3], 
    output wasel,
    output asel,
    output ra2sel,
    output bsel,
    output alufn[6],
    output wdsel[2], 
    output werf,
    output lcd_enable,
    output acc_enable,
    output wr
  ) {
  
  const CU_ROM = { 
    b01110000000000010,
    b00000011000110110,
    b00000011000010110,
    b00000011000000110,
    b01110000000000010,
    b00000010101100110,
    b00000010111100110, 
    b00000010110000110,
    b01110000000000010,
    b00000011101110110,
    b00000011101010110,
    b00000011100110110,
    b01110000000000010,
    b01110000000000010,
    b00000010000010110,
    b00000010000000110,  
    b01110000000000010,
    b00000001000110110,
    b00000001000010110, 
    b00000001000000110,
    b01110000000000010,
    b00000000101100110,
    b00000000111100110,
    b00000000110000110, 
    b01110000000000010, 
    b00000001101110110,
    b00000001101010110,
    b00000001100110110,
    b01110000000000010, 
    b01110000000000010,
    b00000000000010110,
    b00000000000000110,
    b00001000110101010,
    b00001000110100010,
    b00001000110100010,
    b00010000000001110,// SPIRD (ACCEL)
    b01001000110100010,// JMP
    b00010000000000010,// SPIWRT (LCD)
    b00000110000000001,// ST
    b00000010000001010,// LD
    b01110000000000010,
    b01110000000000010,
    b01110000000000010,
    b01110000000000010,
    b01110000000000010,
    b01110000000000010,
    b01110000000000010,
    b01110000000000010,
    b01110000000000010,
    b01110000000000010,
    b01110000000000010,
    b01110000000000010,
    b01110000000000010,
    b01110000000000010,
    b01110000000000010,
    b01110000000000010,
    b01110000000000010,
    b01110000000000010,
    b01110000000000010,
    b01110000000000010,
    b01110000000000010,
    b01110000000000010,
    b01110000000000010,
    b00000000000000000
  };
    
  dff irq_sampler(#INIT(0), .clk(clk));
  dff acc_wait(#INIT(0), .clk(clk))
  always {
  
    // sample interrupt at the beginning of each cycle
    if (~irq_sampler.q){
      // sample only when interrupt bit is 0 (clear) 
      irq_sampler.d = irq;
    }
  
    // control signal basic output connections
    pcsel = CU_ROM[opcode][16:14]; 
    wasel = CU_ROM[opcode][13]; 
    asel = CU_ROM[opcode][12]; 
    ra2sel = CU_ROM[opcode][11]; 
    bsel = CU_ROM[opcode][10]; 
    alufn = CU_ROM[opcode][9:4]; 
    wdsel = CU_ROM[opcode][3:2];  
    werf= CU_ROM[opcode][1];
    wr = CU_ROM[opcode][0];

    // Task 10
    // PCSEL for BNE/BEQ
    if(opcode == 6b011101 && z == 0){
        pcsel = 3b000
    }
    else if(opcode == 6b011101 && z == 1){
        pcsel = 3b001
    }

    if(opcode == 6b011110 && z == 0){
        pcsel = 3b001
    }
    else if(opcode == 6b011110 && z == 1){
        pcsel = 3b000
    }
        
    // Task 11
    // IRQ handling
    // IRQ can happen only in user mode (ia31 is 0)
    // If IRQ happens during kernel mode, it will not be serviced until we return to user mode
    if (irq_sampler.q & slowclk & ~ia31){
        pcsel = 3b100
        wasel = 1b1
        werf = 1b1
        wdsel = 2b00
        wr = 1b0
        irq_sampler.d = 0
    }
    
    lcd_enable = 0
    if (opcode == 6b011010){
        lcd_enable = 1
        if(lcd_spi_busy){
            pcsel = 3b101    //go back to original pc, repeat instruction
            wasel = 0    //do nothing else
            asel = 0
            ra2sel = 0
            bsel = 0
            alufn = 0
            wdsel = 0 
            werf = 0
            wr = 0
        }
    }
        
    acc_enable = 0
    if (opcode == 6b011100){
        acc_enable = 1
        if(acc_spi_busy || acc_wait.q){ //stick in this loop
            pcsel = 3b101    //go back to original pc, repeat instruction
            wasel = 0    //do nothing else
            asel = 0
            ra2sel = 0
            bsel = 0
            alufn = 0
            wdsel = 0
            werf = 0
            wr = 0
            acc_wait.d = 0
        }else{
            acc_wait.d = 1
        }
    }
    
        
    // force wr = 0 when reset == 1 
    if (rst){
      wr = 0
      irq_sampler.d = 0
    }

  }
}