module regfile_unit (
    input clk,          // clock
    input rst,          // reset
    input ra[5],        // read address 1
    input rb[5],        // read address 2
    input rc[5],        // write address candidate
    input wasel,        // write address select
    input ra2sel,       // read address 2 select
    input werf,         // write enable
    input wdsel_out[32],// write data
    input slowclk,      // slow clock
    output z,           // zero flag
    output rd1[32],     // read data 1
    output rd2[32],     // read data 2
    output mwd[32]      // memory write data
) {
    
    regfile_memory regfile(.clk(clk), .rst(rst));
    sig ra2sel_out[5];
    sig wasel_out[5];
    
    always {
        // Default connections
        mwd = 0;
        z = 0;
        ra2sel_out = 0;
        wasel_out = 0;
        
        //*****REGFILE*******//
        // Only write to regfile when PC advances
        regfile.we = 0;
        if (slowclk) {
            regfile.we = werf
        }
        
        // TASK 6 - RA2SEL mux
        case (ra2sel) {
            1b0: ra2sel_out = rb;    // Normal register read
            1b1: ra2sel_out = rc;    // For store instructions
            default: ra2sel_out = rb;
        }
        
        // TASK 6 - WASEL mux
        case (wasel) {
            1b0: wasel_out = rc;     // Normal register write
            1b1: wasel_out = 5b11110; // Write to R30 (for JAL)
            default: wasel_out = rc;
        }
        
        // Connections to regfile memory
        regfile.ra2 = ra2sel_out;
        regfile.ra1 = ra;
        regfile.wa = wasel_out;
        regfile.wd = wdsel_out;
        
        // TASK 8 - compute z (zero flag)
        z = (~|regfile.rd1)
        
        // TASK 9 - connect RD2 output as mwd
        mwd = regfile.rd2;
        
        // Output connections
        rd1 = regfile.rd1;
        rd2 = regfile.rd2;
    }
}