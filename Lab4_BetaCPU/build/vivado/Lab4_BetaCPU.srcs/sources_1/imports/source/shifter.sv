/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module shifter (
        input wire [31:0] a,
        input wire [4:0] b,
        input wire [5:0] alufn,
        output reg [31:0] shift
    );
    logic [31:0] R_1179921d_i;
    logic [31:0] RR_1179921d_i;
    logic [31:0] R_217aeef2_i;
    logic [31:0] RR_217aeef2_i;
    logic [31:0] R_622b0388_i;
    logic [31:0] RR_622b0388_i;
    logic [31:0] R_1b91c76a_i;
    logic [31:0] RR_1b91c76a_i;
    logic [31:0] R_07913b7d_i;
    logic [31:0] RR_07913b7d_i;
    logic [31:0] R_2b8ce5e4_i;
    logic [31:0] RR_2b8ce5e4_i;
    logic [31:0] R_64af099b_i;
    logic [31:0] RR_64af099b_i;
    logic [31:0] R_4ff1243a_i;
    logic [31:0] RR_4ff1243a_i;
    logic [31:0] R_1247f4e9_i;
    logic [31:0] RR_1247f4e9_i;
    logic [31:0] R_48b4b5c0_i;
    logic [31:0] RR_48b4b5c0_i;
    logic [31:0] R_3c5abc74_i;
    logic [31:0] RR_3c5abc74_i;
    logic [31:0] R_7447ad76_i;
    logic [31:0] RR_7447ad76_i;
    logic [31:0] R_53d22c73_i;
    logic [31:0] RR_53d22c73_i;
    logic [31:0] R_44fb70ac_i;
    logic [31:0] RR_44fb70ac_i;
    logic [31:0] R_289c0f30_i;
    logic [31:0] RR_289c0f30_i;
    logic [31:0] R_5dbd81ac_i;
    logic [31:0] RR_5dbd81ac_i;
    logic [31:0] w;
    logic [31:0] x;
    logic [31:0] y;
    logic [31:0] z;
    logic [31:0] M_left_mux1_s0;
    logic [31:0][1:0] M_left_mux1_in;
    logic [31:0] M_left_mux1_out;
    
    genvar idx_0_1752141740;
    
    generate
        for (idx_0_1752141740 = 0; idx_0_1752141740 < 32; idx_0_1752141740 = idx_0_1752141740 + 1) begin: forLoop_idx_0_1752141740
            mux_2 left_mux1 (
                .s0(M_left_mux1_s0[idx_0_1752141740]),
                .in(M_left_mux1_in[idx_0_1752141740]),
                .out(M_left_mux1_out[idx_0_1752141740])
            );
        end
    endgenerate
    
    
    logic [31:0] M_left_mux2_s0;
    logic [31:0][1:0] M_left_mux2_in;
    logic [31:0] M_left_mux2_out;
    
    genvar idx_0_46912177;
    
    generate
        for (idx_0_46912177 = 0; idx_0_46912177 < 32; idx_0_46912177 = idx_0_46912177 + 1) begin: forLoop_idx_0_46912177
            mux_2 left_mux2 (
                .s0(M_left_mux2_s0[idx_0_46912177]),
                .in(M_left_mux2_in[idx_0_46912177]),
                .out(M_left_mux2_out[idx_0_46912177])
            );
        end
    endgenerate
    
    
    logic [31:0] M_left_mux3_s0;
    logic [31:0][1:0] M_left_mux3_in;
    logic [31:0] M_left_mux3_out;
    
    genvar idx_0_779302410;
    
    generate
        for (idx_0_779302410 = 0; idx_0_779302410 < 32; idx_0_779302410 = idx_0_779302410 + 1) begin: forLoop_idx_0_779302410
            mux_2 left_mux3 (
                .s0(M_left_mux3_s0[idx_0_779302410]),
                .in(M_left_mux3_in[idx_0_779302410]),
                .out(M_left_mux3_out[idx_0_779302410])
            );
        end
    endgenerate
    
    
    logic [31:0] M_left_mux4_s0;
    logic [31:0][1:0] M_left_mux4_in;
    logic [31:0] M_left_mux4_out;
    
    genvar idx_0_31263104;
    
    generate
        for (idx_0_31263104 = 0; idx_0_31263104 < 32; idx_0_31263104 = idx_0_31263104 + 1) begin: forLoop_idx_0_31263104
            mux_2 left_mux4 (
                .s0(M_left_mux4_s0[idx_0_31263104]),
                .in(M_left_mux4_in[idx_0_31263104]),
                .out(M_left_mux4_out[idx_0_31263104])
            );
        end
    endgenerate
    
    
    logic [31:0] M_left_mux5_s0;
    logic [31:0][1:0] M_left_mux5_in;
    logic [31:0] M_left_mux5_out;
    
    genvar idx_0_1903371754;
    
    generate
        for (idx_0_1903371754 = 0; idx_0_1903371754 < 32; idx_0_1903371754 = idx_0_1903371754 + 1) begin: forLoop_idx_0_1903371754
            mux_2 left_mux5 (
                .s0(M_left_mux5_s0[idx_0_1903371754]),
                .in(M_left_mux5_in[idx_0_1903371754]),
                .out(M_left_mux5_out[idx_0_1903371754])
            );
        end
    endgenerate
    
    
    logic [31:0] wr;
    logic [31:0] xr;
    logic [31:0] yr;
    logic [31:0] zr;
    logic [31:0] M_right_mux1_s0;
    logic [31:0][1:0] M_right_mux1_in;
    logic [31:0] M_right_mux1_out;
    
    genvar idx_0_1504187485;
    
    generate
        for (idx_0_1504187485 = 0; idx_0_1504187485 < 32; idx_0_1504187485 = idx_0_1504187485 + 1) begin: forLoop_idx_0_1504187485
            mux_2 right_mux1 (
                .s0(M_right_mux1_s0[idx_0_1504187485]),
                .in(M_right_mux1_in[idx_0_1504187485]),
                .out(M_right_mux1_out[idx_0_1504187485])
            );
        end
    endgenerate
    
    
    logic [31:0] M_right_mux2_s0;
    logic [31:0][1:0] M_right_mux2_in;
    logic [31:0] M_right_mux2_out;
    
    genvar idx_0_288659209;
    
    generate
        for (idx_0_288659209 = 0; idx_0_288659209 < 32; idx_0_288659209 = idx_0_288659209 + 1) begin: forLoop_idx_0_288659209
            mux_2 right_mux2 (
                .s0(M_right_mux2_s0[idx_0_288659209]),
                .in(M_right_mux2_in[idx_0_288659209]),
                .out(M_right_mux2_out[idx_0_288659209])
            );
        end
    endgenerate
    
    
    logic [31:0] M_right_mux3_s0;
    logic [31:0][1:0] M_right_mux3_in;
    logic [31:0] M_right_mux3_out;
    
    genvar idx_0_600863379;
    
    generate
        for (idx_0_600863379 = 0; idx_0_600863379 < 32; idx_0_600863379 = idx_0_600863379 + 1) begin: forLoop_idx_0_600863379
            mux_2 right_mux3 (
                .s0(M_right_mux3_s0[idx_0_600863379]),
                .in(M_right_mux3_in[idx_0_600863379]),
                .out(M_right_mux3_out[idx_0_600863379])
            );
        end
    endgenerate
    
    
    logic [31:0] M_right_mux4_s0;
    logic [31:0][1:0] M_right_mux4_in;
    logic [31:0] M_right_mux4_out;
    
    genvar idx_0_1311431409;
    
    generate
        for (idx_0_1311431409 = 0; idx_0_1311431409 < 32; idx_0_1311431409 = idx_0_1311431409 + 1) begin: forLoop_idx_0_1311431409
            mux_2 right_mux4 (
                .s0(M_right_mux4_s0[idx_0_1311431409]),
                .in(M_right_mux4_in[idx_0_1311431409]),
                .out(M_right_mux4_out[idx_0_1311431409])
            );
        end
    endgenerate
    
    
    logic [31:0] M_right_mux5_s0;
    logic [31:0][1:0] M_right_mux5_in;
    logic [31:0] M_right_mux5_out;
    
    genvar idx_0_43283461;
    
    generate
        for (idx_0_43283461 = 0; idx_0_43283461 < 32; idx_0_43283461 = idx_0_43283461 + 1) begin: forLoop_idx_0_43283461
            mux_2 right_mux5 (
                .s0(M_right_mux5_s0[idx_0_43283461]),
                .in(M_right_mux5_in[idx_0_43283461]),
                .out(M_right_mux5_out[idx_0_43283461])
            );
        end
    endgenerate
    
    
    logic [31:0] wra;
    logic [31:0] xra;
    logic [31:0] yra;
    logic [31:0] zra;
    logic [31:0] M_sra_mux1_s0;
    logic [31:0][1:0] M_sra_mux1_in;
    logic [31:0] M_sra_mux1_out;
    
    genvar idx_0_780808692;
    
    generate
        for (idx_0_780808692 = 0; idx_0_780808692 < 32; idx_0_780808692 = idx_0_780808692 + 1) begin: forLoop_idx_0_780808692
            mux_2 sra_mux1 (
                .s0(M_sra_mux1_s0[idx_0_780808692]),
                .in(M_sra_mux1_in[idx_0_780808692]),
                .out(M_sra_mux1_out[idx_0_780808692])
            );
        end
    endgenerate
    
    
    logic [31:0] M_sra_mux2_s0;
    logic [31:0][1:0] M_sra_mux2_in;
    logic [31:0] M_sra_mux2_out;
    
    genvar idx_0_108711340;
    
    generate
        for (idx_0_108711340 = 0; idx_0_108711340 < 32; idx_0_108711340 = idx_0_108711340 + 1) begin: forLoop_idx_0_108711340
            mux_2 sra_mux2 (
                .s0(M_sra_mux2_s0[idx_0_108711340]),
                .in(M_sra_mux2_in[idx_0_108711340]),
                .out(M_sra_mux2_out[idx_0_108711340])
            );
        end
    endgenerate
    
    
    logic [31:0] M_sra_mux3_s0;
    logic [31:0][1:0] M_sra_mux3_in;
    logic [31:0] M_sra_mux3_out;
    
    genvar idx_0_688329974;
    
    generate
        for (idx_0_688329974 = 0; idx_0_688329974 < 32; idx_0_688329974 = idx_0_688329974 + 1) begin: forLoop_idx_0_688329974
            mux_2 sra_mux3 (
                .s0(M_sra_mux3_s0[idx_0_688329974]),
                .in(M_sra_mux3_in[idx_0_688329974]),
                .out(M_sra_mux3_out[idx_0_688329974])
            );
        end
    endgenerate
    
    
    logic [31:0] M_sra_mux4_s0;
    logic [31:0][1:0] M_sra_mux4_in;
    logic [31:0] M_sra_mux4_out;
    
    genvar idx_0_2048437298;
    
    generate
        for (idx_0_2048437298 = 0; idx_0_2048437298 < 32; idx_0_2048437298 = idx_0_2048437298 + 1) begin: forLoop_idx_0_2048437298
            mux_2 sra_mux4 (
                .s0(M_sra_mux4_s0[idx_0_2048437298]),
                .in(M_sra_mux4_in[idx_0_2048437298]),
                .out(M_sra_mux4_out[idx_0_2048437298])
            );
        end
    endgenerate
    
    
    logic [31:0] M_sra_mux5_s0;
    logic [31:0][1:0] M_sra_mux5_in;
    logic [31:0] M_sra_mux5_out;
    
    genvar idx_0_1834132761;
    
    generate
        for (idx_0_1834132761 = 0; idx_0_1834132761 < 32; idx_0_1834132761 = idx_0_1834132761 + 1) begin: forLoop_idx_0_1834132761
            mux_2 sra_mux5 (
                .s0(M_sra_mux5_s0[idx_0_1834132761]),
                .in(M_sra_mux5_in[idx_0_1834132761]),
                .out(M_sra_mux5_out[idx_0_1834132761])
            );
        end
    endgenerate
    
    
    always @* begin
        M_left_mux1_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux2_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux3_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux4_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux5_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux1_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux2_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux3_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux4_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux5_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux1_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux2_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux3_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux4_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux5_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux1_s0 = 32'h0;
        M_right_mux1_s0 = 32'h0;
        M_sra_mux1_s0 = 32'h0;
        M_left_mux2_s0 = 32'h0;
        M_right_mux2_s0 = 32'h0;
        M_sra_mux2_s0 = 32'h0;
        M_left_mux3_s0 = 32'h0;
        M_right_mux3_s0 = 32'h0;
        M_sra_mux3_s0 = 32'h0;
        M_left_mux4_s0 = 32'h0;
        M_right_mux4_s0 = 32'h0;
        M_sra_mux4_s0 = 32'h0;
        M_left_mux5_s0 = 32'h0;
        M_right_mux5_s0 = 32'h0;
        M_sra_mux5_s0 = 32'h0;
        w = 32'h0;
        x = 32'h0;
        y = 32'h0;
        z = 32'h0;
        wr = 32'h0;
        xr = 32'h0;
        yr = 32'h0;
        zr = 32'h0;
        wra = 32'h0;
        xra = 32'h0;
        yra = 32'h0;
        zra = 32'h0;
        if (alufn[1'h1:1'h0] == 2'h0) begin
            for (RR_1179921d_i = 0; RR_1179921d_i < 6'h20; RR_1179921d_i = RR_1179921d_i + 1) begin
        R_1179921d_i = (0) + RR_1179921d_i * (1);
                M_left_mux1_in[R_1179921d_i][1'h0] = a[R_1179921d_i];
                if (R_1179921d_i < 5'h10) begin
                    M_left_mux1_in[R_1179921d_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux1_in[R_1179921d_i][1'h1] = a[R_1179921d_i - 5'h10];
                end
            end
            w = M_left_mux1_out;
            for (RR_217aeef2_i = 0; RR_217aeef2_i < 6'h20; RR_217aeef2_i = RR_217aeef2_i + 1) begin
        R_217aeef2_i = (0) + RR_217aeef2_i * (1);
                M_left_mux2_in[R_217aeef2_i][1'h0] = w[R_217aeef2_i];
                if (R_217aeef2_i < 4'h8) begin
                    M_left_mux2_in[R_217aeef2_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux2_in[R_217aeef2_i][1'h1] = w[R_217aeef2_i - 4'h8];
                end
            end
            x = M_left_mux2_out;
            for (RR_622b0388_i = 0; RR_622b0388_i < 6'h20; RR_622b0388_i = RR_622b0388_i + 1) begin
        R_622b0388_i = (0) + RR_622b0388_i * (1);
                M_left_mux3_in[R_622b0388_i][1'h0] = x[R_622b0388_i];
                if (R_622b0388_i < 3'h4) begin
                    M_left_mux3_in[R_622b0388_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux3_in[R_622b0388_i][1'h1] = x[R_622b0388_i - 3'h4];
                end
            end
            y = M_left_mux3_out;
            for (RR_1b91c76a_i = 0; RR_1b91c76a_i < 6'h20; RR_1b91c76a_i = RR_1b91c76a_i + 1) begin
        R_1b91c76a_i = (0) + RR_1b91c76a_i * (1);
                M_left_mux4_in[R_1b91c76a_i][1'h0] = y[R_1b91c76a_i];
                if (R_1b91c76a_i < 2'h2) begin
                    M_left_mux4_in[R_1b91c76a_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux4_in[R_1b91c76a_i][1'h1] = y[R_1b91c76a_i - 2'h2];
                end
            end
            z = M_left_mux4_out;
            for (RR_07913b7d_i = 0; RR_07913b7d_i < 6'h20; RR_07913b7d_i = RR_07913b7d_i + 1) begin
        R_07913b7d_i = (0) + RR_07913b7d_i * (1);
                M_left_mux5_in[R_07913b7d_i][1'h0] = z[R_07913b7d_i];
                if (R_07913b7d_i < 1'h1) begin
                    M_left_mux5_in[R_07913b7d_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux5_in[R_07913b7d_i][1'h1] = z[R_07913b7d_i - 1'h1];
                end
            end
        end else begin
            if (alufn[1'h1:1'h0] == 2'h1) begin
                for (RR_2b8ce5e4_i = 0; RR_2b8ce5e4_i < 6'h20; RR_2b8ce5e4_i = RR_2b8ce5e4_i + 1) begin
          R_2b8ce5e4_i = (0) + RR_2b8ce5e4_i * (1);
                    M_right_mux1_in[R_2b8ce5e4_i][1'h0] = a[R_2b8ce5e4_i];
                    if (R_2b8ce5e4_i < 5'h10) begin
                        M_right_mux1_in[R_2b8ce5e4_i][1'h1] = a[5'h10 + R_2b8ce5e4_i];
                    end else begin
                        M_right_mux1_in[R_2b8ce5e4_i][1'h1] = 1'h0;
                    end
                end
                wr = M_right_mux1_out;
                for (RR_64af099b_i = 0; RR_64af099b_i < 6'h20; RR_64af099b_i = RR_64af099b_i + 1) begin
          R_64af099b_i = (0) + RR_64af099b_i * (1);
                    M_right_mux2_in[R_64af099b_i][1'h0] = wr[R_64af099b_i];
                    if (R_64af099b_i < 5'h18) begin
                        M_right_mux2_in[R_64af099b_i][1'h1] = wr[4'h8 + R_64af099b_i];
                    end else begin
                        M_right_mux2_in[R_64af099b_i][1'h1] = 1'h0;
                    end
                end
                xr = M_right_mux2_out;
                for (RR_4ff1243a_i = 0; RR_4ff1243a_i < 6'h20; RR_4ff1243a_i = RR_4ff1243a_i + 1) begin
          R_4ff1243a_i = (0) + RR_4ff1243a_i * (1);
                    M_right_mux3_in[R_4ff1243a_i][1'h0] = xr[R_4ff1243a_i];
                    if (R_4ff1243a_i < 5'h1c) begin
                        M_right_mux3_in[R_4ff1243a_i][1'h1] = xr[3'h4 + R_4ff1243a_i];
                    end else begin
                        M_right_mux3_in[R_4ff1243a_i][1'h1] = 1'h0;
                    end
                end
                yr = M_right_mux3_out;
                for (RR_1247f4e9_i = 0; RR_1247f4e9_i < 6'h20; RR_1247f4e9_i = RR_1247f4e9_i + 1) begin
          R_1247f4e9_i = (0) + RR_1247f4e9_i * (1);
                    M_right_mux4_in[R_1247f4e9_i][1'h0] = yr[R_1247f4e9_i];
                    if (R_1247f4e9_i < 5'h1e) begin
                        M_right_mux4_in[R_1247f4e9_i][1'h1] = yr[2'h2 + R_1247f4e9_i];
                    end else begin
                        M_right_mux4_in[R_1247f4e9_i][1'h1] = 1'h0;
                    end
                end
                zr = M_right_mux4_out;
                for (RR_48b4b5c0_i = 0; RR_48b4b5c0_i < 6'h20; RR_48b4b5c0_i = RR_48b4b5c0_i + 1) begin
          R_48b4b5c0_i = (0) + RR_48b4b5c0_i * (1);
                    M_right_mux5_in[R_48b4b5c0_i][1'h0] = zr[R_48b4b5c0_i];
                    if (R_48b4b5c0_i < 5'h1f) begin
                        M_right_mux5_in[R_48b4b5c0_i][1'h1] = zr[1'h1 + R_48b4b5c0_i];
                    end else begin
                        M_right_mux5_in[R_48b4b5c0_i][1'h1] = 1'h0;
                    end
                end
            end else begin
                if (alufn[1'h1:1'h0] == 2'h3) begin
                    for (RR_3c5abc74_i = 0; RR_3c5abc74_i < 6'h20; RR_3c5abc74_i = RR_3c5abc74_i + 1) begin
            R_3c5abc74_i = (0) + RR_3c5abc74_i * (1);
                        M_sra_mux1_in[R_3c5abc74_i][1'h0] = a[R_3c5abc74_i];
                        if (R_3c5abc74_i < 5'h10) begin
                            M_sra_mux1_in[R_3c5abc74_i][1'h1] = a[5'h10 + R_3c5abc74_i];
                        end else begin
                            M_sra_mux1_in[R_3c5abc74_i][1'h1] = a[5'h1f];
                        end
                        wra[R_3c5abc74_i] = M_sra_mux1_out[R_3c5abc74_i];
                    end
                    for (RR_7447ad76_i = 0; RR_7447ad76_i < 6'h20; RR_7447ad76_i = RR_7447ad76_i + 1) begin
            R_7447ad76_i = (0) + RR_7447ad76_i * (1);
                        M_sra_mux2_in[R_7447ad76_i][1'h0] = wra[R_7447ad76_i];
                        if (R_7447ad76_i < 5'h18) begin
                            M_sra_mux2_in[R_7447ad76_i][1'h1] = wra[4'h8 + R_7447ad76_i];
                        end else begin
                            M_sra_mux2_in[R_7447ad76_i][1'h1] = a[5'h1f];
                        end
                        M_sra_mux2_s0[R_7447ad76_i] = b[2'h3];
                        xra[R_7447ad76_i] = M_sra_mux2_out[R_7447ad76_i];
                    end
                    for (RR_53d22c73_i = 0; RR_53d22c73_i < 6'h20; RR_53d22c73_i = RR_53d22c73_i + 1) begin
            R_53d22c73_i = (0) + RR_53d22c73_i * (1);
                        M_sra_mux3_in[R_53d22c73_i][1'h0] = xra[R_53d22c73_i];
                        if (R_53d22c73_i < 5'h1c) begin
                            M_sra_mux3_in[R_53d22c73_i][1'h1] = xra[3'h4 + R_53d22c73_i];
                        end else begin
                            M_sra_mux3_in[R_53d22c73_i][1'h1] = a[5'h1f];
                        end
                        M_sra_mux3_s0[R_53d22c73_i] = b[2'h2];
                        yra[R_53d22c73_i] = M_sra_mux3_out[R_53d22c73_i];
                    end
                    for (RR_44fb70ac_i = 0; RR_44fb70ac_i < 6'h20; RR_44fb70ac_i = RR_44fb70ac_i + 1) begin
            R_44fb70ac_i = (0) + RR_44fb70ac_i * (1);
                        M_sra_mux4_in[R_44fb70ac_i][1'h0] = yra[R_44fb70ac_i];
                        if (R_44fb70ac_i < 5'h1e) begin
                            M_sra_mux4_in[R_44fb70ac_i][1'h1] = yra[2'h2 + R_44fb70ac_i];
                        end else begin
                            M_sra_mux4_in[R_44fb70ac_i][1'h1] = a[5'h1f];
                        end
                        M_sra_mux4_s0[R_44fb70ac_i] = b[1'h1];
                        zra[R_44fb70ac_i] = M_sra_mux4_out[R_44fb70ac_i];
                    end
                    for (RR_289c0f30_i = 0; RR_289c0f30_i < 6'h20; RR_289c0f30_i = RR_289c0f30_i + 1) begin
            R_289c0f30_i = (0) + RR_289c0f30_i * (1);
                        M_sra_mux5_in[R_289c0f30_i][1'h0] = zra[R_289c0f30_i];
                        if (R_289c0f30_i < 5'h1f) begin
                            M_sra_mux5_in[R_289c0f30_i][1'h1] = zra[1'h1 + R_289c0f30_i];
                        end else begin
                            M_sra_mux5_in[R_289c0f30_i][1'h1] = a[5'h1f];
                        end
                        M_sra_mux5_s0[R_289c0f30_i] = b[1'h0];
                    end
                end
            end
        end
        for (RR_5dbd81ac_i = 0; RR_5dbd81ac_i < 6'h20; RR_5dbd81ac_i = RR_5dbd81ac_i + 1) begin
      R_5dbd81ac_i = (0) + RR_5dbd81ac_i * (1);
            M_left_mux1_s0[R_5dbd81ac_i] = b[3'h4];
            M_left_mux2_s0[R_5dbd81ac_i] = b[2'h3];
            M_left_mux3_s0[R_5dbd81ac_i] = b[2'h2];
            M_left_mux4_s0[R_5dbd81ac_i] = b[1'h1];
            M_left_mux5_s0[R_5dbd81ac_i] = b[1'h0];
            M_right_mux1_s0[R_5dbd81ac_i] = b[3'h4];
            M_right_mux2_s0[R_5dbd81ac_i] = b[2'h3];
            M_right_mux3_s0[R_5dbd81ac_i] = b[2'h2];
            M_right_mux4_s0[R_5dbd81ac_i] = b[1'h1];
            M_right_mux5_s0[R_5dbd81ac_i] = b[1'h0];
            M_sra_mux1_s0[R_5dbd81ac_i] = b[3'h4];
            M_sra_mux2_s0[R_5dbd81ac_i] = b[2'h3];
            M_sra_mux3_s0[R_5dbd81ac_i] = b[2'h2];
            M_sra_mux4_s0[R_5dbd81ac_i] = b[1'h1];
            M_sra_mux5_s0[R_5dbd81ac_i] = b[1'h0];
        end
        
        case (alufn[1'h1:1'h0])
            2'h0: begin
                shift = M_left_mux5_out;
            end
            2'h1: begin
                shift = M_right_mux5_out;
            end
            2'h3: begin
                shift = M_sra_mux5_out;
            end
            default: begin
                shift = 1'h0;
            end
        endcase
    end
    
    
endmodule