/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module shifter (
        input wire [31:0] a,
        input wire [4:0] b,
        input wire [5:0] alufn,
        output reg [31:0] shift
    );
    logic [31:0] R_29a388ad_i;
    logic [31:0] RR_29a388ad_i;
    logic [31:0] R_023ab8ce_i;
    logic [31:0] RR_023ab8ce_i;
    logic [31:0] R_0e853777_i;
    logic [31:0] RR_0e853777_i;
    logic [31:0] R_4bec845d_i;
    logic [31:0] RR_4bec845d_i;
    logic [31:0] R_5fef6f75_i;
    logic [31:0] RR_5fef6f75_i;
    logic [31:0] R_4e232ab2_i;
    logic [31:0] RR_4e232ab2_i;
    logic [31:0] R_4c434b26_i;
    logic [31:0] RR_4c434b26_i;
    logic [31:0] R_1ee5b22b_i;
    logic [31:0] RR_1ee5b22b_i;
    logic [31:0] R_47ec2f71_i;
    logic [31:0] RR_47ec2f71_i;
    logic [31:0] R_25211cc2_i;
    logic [31:0] RR_25211cc2_i;
    logic [31:0] R_284a5575_i;
    logic [31:0] RR_284a5575_i;
    logic [31:0] R_68604afd_i;
    logic [31:0] RR_68604afd_i;
    logic [31:0] R_2aaa5b39_i;
    logic [31:0] RR_2aaa5b39_i;
    logic [31:0] R_2fbe2f26_i;
    logic [31:0] RR_2fbe2f26_i;
    logic [31:0] R_023f1277_i;
    logic [31:0] RR_023f1277_i;
    logic [31:0] R_0caa6ecc_i;
    logic [31:0] RR_0caa6ecc_i;
    logic [31:0] w;
    logic [31:0] x;
    logic [31:0] y;
    logic [31:0] z;
    logic [31:0] M_left_mux1_s0;
    logic [31:0][1:0] M_left_mux1_in;
    logic [31:0] M_left_mux1_out;
    
    genvar idx_0_591806478;
    
    generate
        for (idx_0_591806478 = 0; idx_0_591806478 < 32; idx_0_591806478 = idx_0_591806478 + 1) begin: forLoop_idx_0_591806478
            mux_2 left_mux1 (
                .s0(M_left_mux1_s0[idx_0_591806478]),
                .in(M_left_mux1_in[idx_0_591806478]),
                .out(M_left_mux1_out[idx_0_591806478])
            );
        end
    endgenerate
    
    
    logic [31:0] M_left_mux2_s0;
    logic [31:0][1:0] M_left_mux2_in;
    logic [31:0] M_left_mux2_out;
    
    genvar idx_0_933016245;
    
    generate
        for (idx_0_933016245 = 0; idx_0_933016245 < 32; idx_0_933016245 = idx_0_933016245 + 1) begin: forLoop_idx_0_933016245
            mux_2 left_mux2 (
                .s0(M_left_mux2_s0[idx_0_933016245]),
                .in(M_left_mux2_in[idx_0_933016245]),
                .out(M_left_mux2_out[idx_0_933016245])
            );
        end
    endgenerate
    
    
    logic [31:0] M_left_mux3_s0;
    logic [31:0][1:0] M_left_mux3_in;
    logic [31:0] M_left_mux3_out;
    
    genvar idx_0_1994874378;
    
    generate
        for (idx_0_1994874378 = 0; idx_0_1994874378 < 32; idx_0_1994874378 = idx_0_1994874378 + 1) begin: forLoop_idx_0_1994874378
            mux_2 left_mux3 (
                .s0(M_left_mux3_s0[idx_0_1994874378]),
                .in(M_left_mux3_in[idx_0_1994874378]),
                .out(M_left_mux3_out[idx_0_1994874378])
            );
        end
    endgenerate
    
    
    logic [31:0] M_left_mux4_s0;
    logic [31:0][1:0] M_left_mux4_in;
    logic [31:0] M_left_mux4_out;
    
    genvar idx_0_278671552;
    
    generate
        for (idx_0_278671552 = 0; idx_0_278671552 < 32; idx_0_278671552 = idx_0_278671552 + 1) begin: forLoop_idx_0_278671552
            mux_2 left_mux4 (
                .s0(M_left_mux4_s0[idx_0_278671552]),
                .in(M_left_mux4_in[idx_0_278671552]),
                .out(M_left_mux4_out[idx_0_278671552])
            );
        end
    endgenerate
    
    
    logic [31:0] M_left_mux5_s0;
    logic [31:0][1:0] M_left_mux5_in;
    logic [31:0] M_left_mux5_out;
    
    genvar idx_0_1215289196;
    
    generate
        for (idx_0_1215289196 = 0; idx_0_1215289196 < 32; idx_0_1215289196 = idx_0_1215289196 + 1) begin: forLoop_idx_0_1215289196
            mux_2 left_mux5 (
                .s0(M_left_mux5_s0[idx_0_1215289196]),
                .in(M_left_mux5_in[idx_0_1215289196]),
                .out(M_left_mux5_out[idx_0_1215289196])
            );
        end
    endgenerate
    
    
    logic [31:0] wr;
    logic [31:0] xr;
    logic [31:0] yr;
    logic [31:0] zr;
    logic [31:0] M_right_mux1_s0;
    logic [31:0][1:0] M_right_mux1_in;
    logic [31:0] M_right_mux1_out;
    
    genvar idx_0_214540842;
    
    generate
        for (idx_0_214540842 = 0; idx_0_214540842 < 32; idx_0_214540842 = idx_0_214540842 + 1) begin: forLoop_idx_0_214540842
            mux_2 right_mux1 (
                .s0(M_right_mux1_s0[idx_0_214540842]),
                .in(M_right_mux1_in[idx_0_214540842]),
                .out(M_right_mux1_out[idx_0_214540842])
            );
        end
    endgenerate
    
    
    logic [31:0] M_right_mux2_s0;
    logic [31:0][1:0] M_right_mux2_in;
    logic [31:0] M_right_mux2_out;
    
    genvar idx_0_1591236;
    
    generate
        for (idx_0_1591236 = 0; idx_0_1591236 < 32; idx_0_1591236 = idx_0_1591236 + 1) begin: forLoop_idx_0_1591236
            mux_2 right_mux2 (
                .s0(M_right_mux2_s0[idx_0_1591236]),
                .in(M_right_mux2_in[idx_0_1591236]),
                .out(M_right_mux2_out[idx_0_1591236])
            );
        end
    endgenerate
    
    
    logic [31:0] M_right_mux3_s0;
    logic [31:0][1:0] M_right_mux3_in;
    logic [31:0] M_right_mux3_out;
    
    genvar idx_0_1148595553;
    
    generate
        for (idx_0_1148595553 = 0; idx_0_1148595553 < 32; idx_0_1148595553 = idx_0_1148595553 + 1) begin: forLoop_idx_0_1148595553
            mux_2 right_mux3 (
                .s0(M_right_mux3_s0[idx_0_1148595553]),
                .in(M_right_mux3_in[idx_0_1148595553]),
                .out(M_right_mux3_out[idx_0_1148595553])
            );
        end
    endgenerate
    
    
    logic [31:0] M_right_mux4_s0;
    logic [31:0][1:0] M_right_mux4_in;
    logic [31:0] M_right_mux4_out;
    
    genvar idx_0_22438498;
    
    generate
        for (idx_0_22438498 = 0; idx_0_22438498 < 32; idx_0_22438498 = idx_0_22438498 + 1) begin: forLoop_idx_0_22438498
            mux_2 right_mux4 (
                .s0(M_right_mux4_s0[idx_0_22438498]),
                .in(M_right_mux4_in[idx_0_22438498]),
                .out(M_right_mux4_out[idx_0_22438498])
            );
        end
    endgenerate
    
    
    logic [31:0] M_right_mux5_s0;
    logic [31:0][1:0] M_right_mux5_in;
    logic [31:0] M_right_mux5_out;
    
    genvar idx_0_89556806;
    
    generate
        for (idx_0_89556806 = 0; idx_0_89556806 < 32; idx_0_89556806 = idx_0_89556806 + 1) begin: forLoop_idx_0_89556806
            mux_2 right_mux5 (
                .s0(M_right_mux5_s0[idx_0_89556806]),
                .in(M_right_mux5_in[idx_0_89556806]),
                .out(M_right_mux5_out[idx_0_89556806])
            );
        end
    endgenerate
    
    
    logic [31:0] wra;
    logic [31:0] xra;
    logic [31:0] yra;
    logic [31:0] zra;
    logic [31:0] M_sra_mux1_s0;
    logic [31:0][1:0] M_sra_mux1_in;
    logic [31:0] M_sra_mux1_out;
    
    genvar idx_0_604896407;
    
    generate
        for (idx_0_604896407 = 0; idx_0_604896407 < 32; idx_0_604896407 = idx_0_604896407 + 1) begin: forLoop_idx_0_604896407
            mux_2 sra_mux1 (
                .s0(M_sra_mux1_s0[idx_0_604896407]),
                .in(M_sra_mux1_in[idx_0_604896407]),
                .out(M_sra_mux1_out[idx_0_604896407])
            );
        end
    endgenerate
    
    
    logic [31:0] M_sra_mux2_s0;
    logic [31:0][1:0] M_sra_mux2_in;
    logic [31:0] M_sra_mux2_out;
    
    genvar idx_0_1138613311;
    
    generate
        for (idx_0_1138613311 = 0; idx_0_1138613311 < 32; idx_0_1138613311 = idx_0_1138613311 + 1) begin: forLoop_idx_0_1138613311
            mux_2 sra_mux2 (
                .s0(M_sra_mux2_s0[idx_0_1138613311]),
                .in(M_sra_mux2_in[idx_0_1138613311]),
                .out(M_sra_mux2_out[idx_0_1138613311])
            );
        end
    endgenerate
    
    
    logic [31:0] M_sra_mux3_s0;
    logic [31:0][1:0] M_sra_mux3_in;
    logic [31:0] M_sra_mux3_out;
    
    genvar idx_0_1537519113;
    
    generate
        for (idx_0_1537519113 = 0; idx_0_1537519113 < 32; idx_0_1537519113 = idx_0_1537519113 + 1) begin: forLoop_idx_0_1537519113
            mux_2 sra_mux3 (
                .s0(M_sra_mux3_s0[idx_0_1537519113]),
                .in(M_sra_mux3_in[idx_0_1537519113]),
                .out(M_sra_mux3_out[idx_0_1537519113])
            );
        end
    endgenerate
    
    
    logic [31:0] M_sra_mux4_s0;
    logic [31:0][1:0] M_sra_mux4_in;
    logic [31:0] M_sra_mux4_out;
    
    genvar idx_0_1051179089;
    
    generate
        for (idx_0_1051179089 = 0; idx_0_1051179089 < 32; idx_0_1051179089 = idx_0_1051179089 + 1) begin: forLoop_idx_0_1051179089
            mux_2 sra_mux4 (
                .s0(M_sra_mux4_s0[idx_0_1051179089]),
                .in(M_sra_mux4_in[idx_0_1051179089]),
                .out(M_sra_mux4_out[idx_0_1051179089])
            );
        end
    endgenerate
    
    
    logic [31:0] M_sra_mux5_s0;
    logic [31:0][1:0] M_sra_mux5_in;
    logic [31:0] M_sra_mux5_out;
    
    genvar idx_0_765707696;
    
    generate
        for (idx_0_765707696 = 0; idx_0_765707696 < 32; idx_0_765707696 = idx_0_765707696 + 1) begin: forLoop_idx_0_765707696
            mux_2 sra_mux5 (
                .s0(M_sra_mux5_s0[idx_0_765707696]),
                .in(M_sra_mux5_in[idx_0_765707696]),
                .out(M_sra_mux5_out[idx_0_765707696])
            );
        end
    endgenerate
    
    
    always @* begin
        M_left_mux1_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux2_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux3_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux4_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux5_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux1_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux2_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux3_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux4_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux5_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux1_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux2_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux3_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux4_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux5_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux1_s0 = 32'h0;
        M_right_mux1_s0 = 32'h0;
        M_sra_mux1_s0 = 32'h0;
        M_left_mux2_s0 = 32'h0;
        M_right_mux2_s0 = 32'h0;
        M_sra_mux2_s0 = 32'h0;
        M_left_mux3_s0 = 32'h0;
        M_right_mux3_s0 = 32'h0;
        M_sra_mux3_s0 = 32'h0;
        M_left_mux4_s0 = 32'h0;
        M_right_mux4_s0 = 32'h0;
        M_sra_mux4_s0 = 32'h0;
        M_left_mux5_s0 = 32'h0;
        M_right_mux5_s0 = 32'h0;
        M_sra_mux5_s0 = 32'h0;
        w = 32'h0;
        x = 32'h0;
        y = 32'h0;
        z = 32'h0;
        wr = 32'h0;
        xr = 32'h0;
        yr = 32'h0;
        zr = 32'h0;
        wra = 32'h0;
        xra = 32'h0;
        yra = 32'h0;
        zra = 32'h0;
        if (alufn[1'h1:1'h0] == 2'h0) begin
            for (RR_29a388ad_i = 0; RR_29a388ad_i < 6'h20; RR_29a388ad_i = RR_29a388ad_i + 1) begin
        R_29a388ad_i = (0) + RR_29a388ad_i * (1);
                M_left_mux1_in[R_29a388ad_i][1'h0] = a[R_29a388ad_i];
                if (R_29a388ad_i < 5'h10) begin
                    M_left_mux1_in[R_29a388ad_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux1_in[R_29a388ad_i][1'h1] = a[R_29a388ad_i - 5'h10];
                end
            end
            w = M_left_mux1_out;
            for (RR_023ab8ce_i = 0; RR_023ab8ce_i < 6'h20; RR_023ab8ce_i = RR_023ab8ce_i + 1) begin
        R_023ab8ce_i = (0) + RR_023ab8ce_i * (1);
                M_left_mux2_in[R_023ab8ce_i][1'h0] = w[R_023ab8ce_i];
                if (R_023ab8ce_i < 4'h8) begin
                    M_left_mux2_in[R_023ab8ce_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux2_in[R_023ab8ce_i][1'h1] = w[R_023ab8ce_i - 4'h8];
                end
            end
            x = M_left_mux2_out;
            for (RR_0e853777_i = 0; RR_0e853777_i < 6'h20; RR_0e853777_i = RR_0e853777_i + 1) begin
        R_0e853777_i = (0) + RR_0e853777_i * (1);
                M_left_mux3_in[R_0e853777_i][1'h0] = x[R_0e853777_i];
                if (R_0e853777_i < 3'h4) begin
                    M_left_mux3_in[R_0e853777_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux3_in[R_0e853777_i][1'h1] = x[R_0e853777_i - 3'h4];
                end
            end
            y = M_left_mux3_out;
            for (RR_4bec845d_i = 0; RR_4bec845d_i < 6'h20; RR_4bec845d_i = RR_4bec845d_i + 1) begin
        R_4bec845d_i = (0) + RR_4bec845d_i * (1);
                M_left_mux4_in[R_4bec845d_i][1'h0] = y[R_4bec845d_i];
                if (R_4bec845d_i < 2'h2) begin
                    M_left_mux4_in[R_4bec845d_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux4_in[R_4bec845d_i][1'h1] = y[R_4bec845d_i - 2'h2];
                end
            end
            z = M_left_mux4_out;
            for (RR_5fef6f75_i = 0; RR_5fef6f75_i < 6'h20; RR_5fef6f75_i = RR_5fef6f75_i + 1) begin
        R_5fef6f75_i = (0) + RR_5fef6f75_i * (1);
                M_left_mux5_in[R_5fef6f75_i][1'h0] = z[R_5fef6f75_i];
                if (R_5fef6f75_i < 1'h1) begin
                    M_left_mux5_in[R_5fef6f75_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux5_in[R_5fef6f75_i][1'h1] = z[R_5fef6f75_i - 1'h1];
                end
            end
        end else begin
            if (alufn[1'h1:1'h0] == 2'h1) begin
                for (RR_4e232ab2_i = 0; RR_4e232ab2_i < 6'h20; RR_4e232ab2_i = RR_4e232ab2_i + 1) begin
          R_4e232ab2_i = (0) + RR_4e232ab2_i * (1);
                    M_right_mux1_in[R_4e232ab2_i][1'h0] = a[R_4e232ab2_i];
                    if (R_4e232ab2_i < 5'h10) begin
                        M_right_mux1_in[R_4e232ab2_i][1'h1] = a[5'h10 + R_4e232ab2_i];
                    end else begin
                        M_right_mux1_in[R_4e232ab2_i][1'h1] = 1'h0;
                    end
                end
                wr = M_right_mux1_out;
                for (RR_4c434b26_i = 0; RR_4c434b26_i < 6'h20; RR_4c434b26_i = RR_4c434b26_i + 1) begin
          R_4c434b26_i = (0) + RR_4c434b26_i * (1);
                    M_right_mux2_in[R_4c434b26_i][1'h0] = wr[R_4c434b26_i];
                    if (R_4c434b26_i < 5'h18) begin
                        M_right_mux2_in[R_4c434b26_i][1'h1] = wr[4'h8 + R_4c434b26_i];
                    end else begin
                        M_right_mux2_in[R_4c434b26_i][1'h1] = 1'h0;
                    end
                end
                xr = M_right_mux2_out;
                for (RR_1ee5b22b_i = 0; RR_1ee5b22b_i < 6'h20; RR_1ee5b22b_i = RR_1ee5b22b_i + 1) begin
          R_1ee5b22b_i = (0) + RR_1ee5b22b_i * (1);
                    M_right_mux3_in[R_1ee5b22b_i][1'h0] = xr[R_1ee5b22b_i];
                    if (R_1ee5b22b_i < 5'h1c) begin
                        M_right_mux3_in[R_1ee5b22b_i][1'h1] = xr[3'h4 + R_1ee5b22b_i];
                    end else begin
                        M_right_mux3_in[R_1ee5b22b_i][1'h1] = 1'h0;
                    end
                end
                yr = M_right_mux3_out;
                for (RR_47ec2f71_i = 0; RR_47ec2f71_i < 6'h20; RR_47ec2f71_i = RR_47ec2f71_i + 1) begin
          R_47ec2f71_i = (0) + RR_47ec2f71_i * (1);
                    M_right_mux4_in[R_47ec2f71_i][1'h0] = yr[R_47ec2f71_i];
                    if (R_47ec2f71_i < 5'h1e) begin
                        M_right_mux4_in[R_47ec2f71_i][1'h1] = yr[2'h2 + R_47ec2f71_i];
                    end else begin
                        M_right_mux4_in[R_47ec2f71_i][1'h1] = 1'h0;
                    end
                end
                zr = M_right_mux4_out;
                for (RR_25211cc2_i = 0; RR_25211cc2_i < 6'h20; RR_25211cc2_i = RR_25211cc2_i + 1) begin
          R_25211cc2_i = (0) + RR_25211cc2_i * (1);
                    M_right_mux5_in[R_25211cc2_i][1'h0] = zr[R_25211cc2_i];
                    if (R_25211cc2_i < 5'h1f) begin
                        M_right_mux5_in[R_25211cc2_i][1'h1] = zr[1'h1 + R_25211cc2_i];
                    end else begin
                        M_right_mux5_in[R_25211cc2_i][1'h1] = 1'h0;
                    end
                end
            end else begin
                if (alufn[1'h1:1'h0] == 2'h3) begin
                    for (RR_284a5575_i = 0; RR_284a5575_i < 6'h20; RR_284a5575_i = RR_284a5575_i + 1) begin
            R_284a5575_i = (0) + RR_284a5575_i * (1);
                        M_sra_mux1_in[R_284a5575_i][1'h0] = a[R_284a5575_i];
                        if (R_284a5575_i < 5'h10) begin
                            M_sra_mux1_in[R_284a5575_i][1'h1] = a[5'h10 + R_284a5575_i];
                        end else begin
                            M_sra_mux1_in[R_284a5575_i][1'h1] = a[5'h1f];
                        end
                        wra[R_284a5575_i] = M_sra_mux1_out[R_284a5575_i];
                    end
                    for (RR_68604afd_i = 0; RR_68604afd_i < 6'h20; RR_68604afd_i = RR_68604afd_i + 1) begin
            R_68604afd_i = (0) + RR_68604afd_i * (1);
                        M_sra_mux2_in[R_68604afd_i][1'h0] = wra[R_68604afd_i];
                        if (R_68604afd_i < 5'h18) begin
                            M_sra_mux2_in[R_68604afd_i][1'h1] = wra[4'h8 + R_68604afd_i];
                        end else begin
                            M_sra_mux2_in[R_68604afd_i][1'h1] = a[5'h1f];
                        end
                        M_sra_mux2_s0[R_68604afd_i] = b[2'h3];
                        xra[R_68604afd_i] = M_sra_mux2_out[R_68604afd_i];
                    end
                    for (RR_2aaa5b39_i = 0; RR_2aaa5b39_i < 6'h20; RR_2aaa5b39_i = RR_2aaa5b39_i + 1) begin
            R_2aaa5b39_i = (0) + RR_2aaa5b39_i * (1);
                        M_sra_mux3_in[R_2aaa5b39_i][1'h0] = xra[R_2aaa5b39_i];
                        if (R_2aaa5b39_i < 5'h1c) begin
                            M_sra_mux3_in[R_2aaa5b39_i][1'h1] = xra[3'h4 + R_2aaa5b39_i];
                        end else begin
                            M_sra_mux3_in[R_2aaa5b39_i][1'h1] = a[5'h1f];
                        end
                        M_sra_mux3_s0[R_2aaa5b39_i] = b[2'h2];
                        yra[R_2aaa5b39_i] = M_sra_mux3_out[R_2aaa5b39_i];
                    end
                    for (RR_2fbe2f26_i = 0; RR_2fbe2f26_i < 6'h20; RR_2fbe2f26_i = RR_2fbe2f26_i + 1) begin
            R_2fbe2f26_i = (0) + RR_2fbe2f26_i * (1);
                        M_sra_mux4_in[R_2fbe2f26_i][1'h0] = yra[R_2fbe2f26_i];
                        if (R_2fbe2f26_i < 5'h1e) begin
                            M_sra_mux4_in[R_2fbe2f26_i][1'h1] = yra[2'h2 + R_2fbe2f26_i];
                        end else begin
                            M_sra_mux4_in[R_2fbe2f26_i][1'h1] = a[5'h1f];
                        end
                        M_sra_mux4_s0[R_2fbe2f26_i] = b[1'h1];
                        zra[R_2fbe2f26_i] = M_sra_mux4_out[R_2fbe2f26_i];
                    end
                    for (RR_023f1277_i = 0; RR_023f1277_i < 6'h20; RR_023f1277_i = RR_023f1277_i + 1) begin
            R_023f1277_i = (0) + RR_023f1277_i * (1);
                        M_sra_mux5_in[R_023f1277_i][1'h0] = zra[R_023f1277_i];
                        if (R_023f1277_i < 5'h1f) begin
                            M_sra_mux5_in[R_023f1277_i][1'h1] = zra[1'h1 + R_023f1277_i];
                        end else begin
                            M_sra_mux5_in[R_023f1277_i][1'h1] = a[5'h1f];
                        end
                        M_sra_mux5_s0[R_023f1277_i] = b[1'h0];
                    end
                end
            end
        end
        for (RR_0caa6ecc_i = 0; RR_0caa6ecc_i < 6'h20; RR_0caa6ecc_i = RR_0caa6ecc_i + 1) begin
      R_0caa6ecc_i = (0) + RR_0caa6ecc_i * (1);
            M_left_mux1_s0[R_0caa6ecc_i] = b[3'h4];
            M_left_mux2_s0[R_0caa6ecc_i] = b[2'h3];
            M_left_mux3_s0[R_0caa6ecc_i] = b[2'h2];
            M_left_mux4_s0[R_0caa6ecc_i] = b[1'h1];
            M_left_mux5_s0[R_0caa6ecc_i] = b[1'h0];
            M_right_mux1_s0[R_0caa6ecc_i] = b[3'h4];
            M_right_mux2_s0[R_0caa6ecc_i] = b[2'h3];
            M_right_mux3_s0[R_0caa6ecc_i] = b[2'h2];
            M_right_mux4_s0[R_0caa6ecc_i] = b[1'h1];
            M_right_mux5_s0[R_0caa6ecc_i] = b[1'h0];
            M_sra_mux1_s0[R_0caa6ecc_i] = b[3'h4];
            M_sra_mux2_s0[R_0caa6ecc_i] = b[2'h3];
            M_sra_mux3_s0[R_0caa6ecc_i] = b[2'h2];
            M_sra_mux4_s0[R_0caa6ecc_i] = b[1'h1];
            M_sra_mux5_s0[R_0caa6ecc_i] = b[1'h0];
        end
        
        case (alufn[1'h1:1'h0])
            2'h0: begin
                shift = M_left_mux5_out;
            end
            2'h1: begin
                shift = M_right_mux5_out;
            end
            2'h3: begin
                shift = M_sra_mux5_out;
            end
            default: begin
                shift = 1'h0;
            end
        endcase
    end
    
    
endmodule