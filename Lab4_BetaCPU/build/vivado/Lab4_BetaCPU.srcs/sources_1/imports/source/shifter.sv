/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module shifter (
        input wire [31:0] a,
        input wire [4:0] b,
        input wire [5:0] alufn,
        output reg [31:0] shift
    );
    logic [31:0] R_2fe63de7_i;
    logic [31:0] RR_2fe63de7_i;
    logic [31:0] R_360b96f5_i;
    logic [31:0] RR_360b96f5_i;
    logic [31:0] R_4d366563_i;
    logic [31:0] RR_4d366563_i;
    logic [31:0] R_35e97aea_i;
    logic [31:0] RR_35e97aea_i;
    logic [31:0] R_65fc8e22_i;
    logic [31:0] RR_65fc8e22_i;
    logic [31:0] R_5e889f8f_i;
    logic [31:0] RR_5e889f8f_i;
    logic [31:0] R_1b1808c6_i;
    logic [31:0] RR_1b1808c6_i;
    logic [31:0] R_3b7d4eab_i;
    logic [31:0] RR_3b7d4eab_i;
    logic [31:0] R_5091a8b5_i;
    logic [31:0] RR_5091a8b5_i;
    logic [31:0] R_6623c495_i;
    logic [31:0] RR_6623c495_i;
    logic [31:0] R_42d09051_i;
    logic [31:0] RR_42d09051_i;
    logic [31:0] R_68d94af2_i;
    logic [31:0] RR_68d94af2_i;
    logic [31:0] R_02d42122_i;
    logic [31:0] RR_02d42122_i;
    logic [31:0] R_73707c89_i;
    logic [31:0] RR_73707c89_i;
    logic [31:0] R_4551fc41_i;
    logic [31:0] RR_4551fc41_i;
    logic [31:0] R_522801e6_i;
    logic [31:0] RR_522801e6_i;
    logic [31:0] w;
    logic [31:0] x;
    logic [31:0] y;
    logic [31:0] z;
    logic [31:0] M_left_mux1_s0;
    logic [31:0][1:0] M_left_mux1_in;
    logic [31:0] M_left_mux1_out;
    
    genvar idx_0_249276106;
    
    generate
        for (idx_0_249276106 = 0; idx_0_249276106 < 32; idx_0_249276106 = idx_0_249276106 + 1) begin: forLoop_idx_0_249276106
            mux_2 left_mux1 (
                .s0(M_left_mux1_s0[idx_0_249276106]),
                .in(M_left_mux1_in[idx_0_249276106]),
                .out(M_left_mux1_out[idx_0_249276106])
            );
        end
    endgenerate
    
    
    logic [31:0] M_left_mux2_s0;
    logic [31:0][1:0] M_left_mux2_in;
    logic [31:0] M_left_mux2_out;
    
    genvar idx_0_531314578;
    
    generate
        for (idx_0_531314578 = 0; idx_0_531314578 < 32; idx_0_531314578 = idx_0_531314578 + 1) begin: forLoop_idx_0_531314578
            mux_2 left_mux2 (
                .s0(M_left_mux2_s0[idx_0_531314578]),
                .in(M_left_mux2_in[idx_0_531314578]),
                .out(M_left_mux2_out[idx_0_531314578])
            );
        end
    endgenerate
    
    
    logic [31:0] M_left_mux3_s0;
    logic [31:0][1:0] M_left_mux3_in;
    logic [31:0] M_left_mux3_out;
    
    genvar idx_0_886711352;
    
    generate
        for (idx_0_886711352 = 0; idx_0_886711352 < 32; idx_0_886711352 = idx_0_886711352 + 1) begin: forLoop_idx_0_886711352
            mux_2 left_mux3 (
                .s0(M_left_mux3_s0[idx_0_886711352]),
                .in(M_left_mux3_in[idx_0_886711352]),
                .out(M_left_mux3_out[idx_0_886711352])
            );
        end
    endgenerate
    
    
    logic [31:0] M_left_mux4_s0;
    logic [31:0][1:0] M_left_mux4_in;
    logic [31:0] M_left_mux4_out;
    
    genvar idx_0_1661622216;
    
    generate
        for (idx_0_1661622216 = 0; idx_0_1661622216 < 32; idx_0_1661622216 = idx_0_1661622216 + 1) begin: forLoop_idx_0_1661622216
            mux_2 left_mux4 (
                .s0(M_left_mux4_s0[idx_0_1661622216]),
                .in(M_left_mux4_in[idx_0_1661622216]),
                .out(M_left_mux4_out[idx_0_1661622216])
            );
        end
    endgenerate
    
    
    logic [31:0] M_left_mux5_s0;
    logic [31:0][1:0] M_left_mux5_in;
    logic [31:0] M_left_mux5_out;
    
    genvar idx_0_923100206;
    
    generate
        for (idx_0_923100206 = 0; idx_0_923100206 < 32; idx_0_923100206 = idx_0_923100206 + 1) begin: forLoop_idx_0_923100206
            mux_2 left_mux5 (
                .s0(M_left_mux5_s0[idx_0_923100206]),
                .in(M_left_mux5_in[idx_0_923100206]),
                .out(M_left_mux5_out[idx_0_923100206])
            );
        end
    endgenerate
    
    
    logic [31:0] wr;
    logic [31:0] xr;
    logic [31:0] yr;
    logic [31:0] zr;
    logic [31:0] M_right_mux1_s0;
    logic [31:0][1:0] M_right_mux1_in;
    logic [31:0] M_right_mux1_out;
    
    genvar idx_0_42142799;
    
    generate
        for (idx_0_42142799 = 0; idx_0_42142799 < 32; idx_0_42142799 = idx_0_42142799 + 1) begin: forLoop_idx_0_42142799
            mux_2 right_mux1 (
                .s0(M_right_mux1_s0[idx_0_42142799]),
                .in(M_right_mux1_in[idx_0_42142799]),
                .out(M_right_mux1_out[idx_0_42142799])
            );
        end
    endgenerate
    
    
    logic [31:0] M_right_mux2_s0;
    logic [31:0][1:0] M_right_mux2_in;
    logic [31:0] M_right_mux2_out;
    
    genvar idx_0_1977045661;
    
    generate
        for (idx_0_1977045661 = 0; idx_0_1977045661 < 32; idx_0_1977045661 = idx_0_1977045661 + 1) begin: forLoop_idx_0_1977045661
            mux_2 right_mux2 (
                .s0(M_right_mux2_s0[idx_0_1977045661]),
                .in(M_right_mux2_in[idx_0_1977045661]),
                .out(M_right_mux2_out[idx_0_1977045661])
            );
        end
    endgenerate
    
    
    logic [31:0] M_right_mux3_s0;
    logic [31:0][1:0] M_right_mux3_in;
    logic [31:0] M_right_mux3_out;
    
    genvar idx_0_1572799539;
    
    generate
        for (idx_0_1572799539 = 0; idx_0_1572799539 < 32; idx_0_1572799539 = idx_0_1572799539 + 1) begin: forLoop_idx_0_1572799539
            mux_2 right_mux3 (
                .s0(M_right_mux3_s0[idx_0_1572799539]),
                .in(M_right_mux3_in[idx_0_1572799539]),
                .out(M_right_mux3_out[idx_0_1572799539])
            );
        end
    endgenerate
    
    
    logic [31:0] M_right_mux4_s0;
    logic [31:0][1:0] M_right_mux4_in;
    logic [31:0] M_right_mux4_out;
    
    genvar idx_0_1117630231;
    
    generate
        for (idx_0_1117630231 = 0; idx_0_1117630231 < 32; idx_0_1117630231 = idx_0_1117630231 + 1) begin: forLoop_idx_0_1117630231
            mux_2 right_mux4 (
                .s0(M_right_mux4_s0[idx_0_1117630231]),
                .in(M_right_mux4_in[idx_0_1117630231]),
                .out(M_right_mux4_out[idx_0_1117630231])
            );
        end
    endgenerate
    
    
    logic [31:0] M_right_mux5_s0;
    logic [31:0][1:0] M_right_mux5_in;
    logic [31:0] M_right_mux5_out;
    
    genvar idx_0_1613770616;
    
    generate
        for (idx_0_1613770616 = 0; idx_0_1613770616 < 32; idx_0_1613770616 = idx_0_1613770616 + 1) begin: forLoop_idx_0_1613770616
            mux_2 right_mux5 (
                .s0(M_right_mux5_s0[idx_0_1613770616]),
                .in(M_right_mux5_in[idx_0_1613770616]),
                .out(M_right_mux5_out[idx_0_1613770616])
            );
        end
    endgenerate
    
    
    logic [31:0] wra;
    logic [31:0] xra;
    logic [31:0] yra;
    logic [31:0] zra;
    logic [31:0] M_sra_mux1_s0;
    logic [31:0][1:0] M_sra_mux1_in;
    logic [31:0] M_sra_mux1_out;
    
    genvar idx_0_388343393;
    
    generate
        for (idx_0_388343393 = 0; idx_0_388343393 < 32; idx_0_388343393 = idx_0_388343393 + 1) begin: forLoop_idx_0_388343393
            mux_2 sra_mux1 (
                .s0(M_sra_mux1_s0[idx_0_388343393]),
                .in(M_sra_mux1_in[idx_0_388343393]),
                .out(M_sra_mux1_out[idx_0_388343393])
            );
        end
    endgenerate
    
    
    logic [31:0] M_sra_mux2_s0;
    logic [31:0][1:0] M_sra_mux2_in;
    logic [31:0] M_sra_mux2_out;
    
    genvar idx_0_1588896490;
    
    generate
        for (idx_0_1588896490 = 0; idx_0_1588896490 < 32; idx_0_1588896490 = idx_0_1588896490 + 1) begin: forLoop_idx_0_1588896490
            mux_2 sra_mux2 (
                .s0(M_sra_mux2_s0[idx_0_1588896490]),
                .in(M_sra_mux2_in[idx_0_1588896490]),
                .out(M_sra_mux2_out[idx_0_1588896490])
            );
        end
    endgenerate
    
    
    logic [31:0] M_sra_mux3_s0;
    logic [31:0][1:0] M_sra_mux3_in;
    logic [31:0] M_sra_mux3_out;
    
    genvar idx_0_2064876164;
    
    generate
        for (idx_0_2064876164 = 0; idx_0_2064876164 < 32; idx_0_2064876164 = idx_0_2064876164 + 1) begin: forLoop_idx_0_2064876164
            mux_2 sra_mux3 (
                .s0(M_sra_mux3_s0[idx_0_2064876164]),
                .in(M_sra_mux3_in[idx_0_2064876164]),
                .out(M_sra_mux3_out[idx_0_2064876164])
            );
        end
    endgenerate
    
    
    logic [31:0] M_sra_mux4_s0;
    logic [31:0][1:0] M_sra_mux4_in;
    logic [31:0] M_sra_mux4_out;
    
    genvar idx_0_22754938;
    
    generate
        for (idx_0_22754938 = 0; idx_0_22754938 < 32; idx_0_22754938 = idx_0_22754938 + 1) begin: forLoop_idx_0_22754938
            mux_2 sra_mux4 (
                .s0(M_sra_mux4_s0[idx_0_22754938]),
                .in(M_sra_mux4_in[idx_0_22754938]),
                .out(M_sra_mux4_out[idx_0_22754938])
            );
        end
    endgenerate
    
    
    logic [31:0] M_sra_mux5_s0;
    logic [31:0][1:0] M_sra_mux5_in;
    logic [31:0] M_sra_mux5_out;
    
    genvar idx_0_1974462599;
    
    generate
        for (idx_0_1974462599 = 0; idx_0_1974462599 < 32; idx_0_1974462599 = idx_0_1974462599 + 1) begin: forLoop_idx_0_1974462599
            mux_2 sra_mux5 (
                .s0(M_sra_mux5_s0[idx_0_1974462599]),
                .in(M_sra_mux5_in[idx_0_1974462599]),
                .out(M_sra_mux5_out[idx_0_1974462599])
            );
        end
    endgenerate
    
    
    always @* begin
        M_left_mux1_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux2_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux3_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux4_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux5_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux1_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux2_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux3_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux4_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux5_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux1_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux2_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux3_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux4_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux5_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux1_s0 = 32'h0;
        M_right_mux1_s0 = 32'h0;
        M_sra_mux1_s0 = 32'h0;
        M_left_mux2_s0 = 32'h0;
        M_right_mux2_s0 = 32'h0;
        M_sra_mux2_s0 = 32'h0;
        M_left_mux3_s0 = 32'h0;
        M_right_mux3_s0 = 32'h0;
        M_sra_mux3_s0 = 32'h0;
        M_left_mux4_s0 = 32'h0;
        M_right_mux4_s0 = 32'h0;
        M_sra_mux4_s0 = 32'h0;
        M_left_mux5_s0 = 32'h0;
        M_right_mux5_s0 = 32'h0;
        M_sra_mux5_s0 = 32'h0;
        w = 32'h0;
        x = 32'h0;
        y = 32'h0;
        z = 32'h0;
        wr = 32'h0;
        xr = 32'h0;
        yr = 32'h0;
        zr = 32'h0;
        wra = 32'h0;
        xra = 32'h0;
        yra = 32'h0;
        zra = 32'h0;
        if (alufn[1'h1:1'h0] == 2'h0) begin
            for (RR_2fe63de7_i = 0; RR_2fe63de7_i < 6'h20; RR_2fe63de7_i = RR_2fe63de7_i + 1) begin
        R_2fe63de7_i = (0) + RR_2fe63de7_i * (1);
                M_left_mux1_in[R_2fe63de7_i][1'h0] = a[R_2fe63de7_i];
                if (R_2fe63de7_i < 5'h10) begin
                    M_left_mux1_in[R_2fe63de7_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux1_in[R_2fe63de7_i][1'h1] = a[R_2fe63de7_i - 5'h10];
                end
            end
            w = M_left_mux1_out;
            for (RR_360b96f5_i = 0; RR_360b96f5_i < 6'h20; RR_360b96f5_i = RR_360b96f5_i + 1) begin
        R_360b96f5_i = (0) + RR_360b96f5_i * (1);
                M_left_mux2_in[R_360b96f5_i][1'h0] = w[R_360b96f5_i];
                if (R_360b96f5_i < 4'h8) begin
                    M_left_mux2_in[R_360b96f5_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux2_in[R_360b96f5_i][1'h1] = w[R_360b96f5_i - 4'h8];
                end
            end
            x = M_left_mux2_out;
            for (RR_4d366563_i = 0; RR_4d366563_i < 6'h20; RR_4d366563_i = RR_4d366563_i + 1) begin
        R_4d366563_i = (0) + RR_4d366563_i * (1);
                M_left_mux3_in[R_4d366563_i][1'h0] = x[R_4d366563_i];
                if (R_4d366563_i < 3'h4) begin
                    M_left_mux3_in[R_4d366563_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux3_in[R_4d366563_i][1'h1] = x[R_4d366563_i - 3'h4];
                end
            end
            y = M_left_mux3_out;
            for (RR_35e97aea_i = 0; RR_35e97aea_i < 6'h20; RR_35e97aea_i = RR_35e97aea_i + 1) begin
        R_35e97aea_i = (0) + RR_35e97aea_i * (1);
                M_left_mux4_in[R_35e97aea_i][1'h0] = y[R_35e97aea_i];
                if (R_35e97aea_i < 2'h2) begin
                    M_left_mux4_in[R_35e97aea_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux4_in[R_35e97aea_i][1'h1] = y[R_35e97aea_i - 2'h2];
                end
            end
            z = M_left_mux4_out;
            for (RR_65fc8e22_i = 0; RR_65fc8e22_i < 6'h20; RR_65fc8e22_i = RR_65fc8e22_i + 1) begin
        R_65fc8e22_i = (0) + RR_65fc8e22_i * (1);
                M_left_mux5_in[R_65fc8e22_i][1'h0] = z[R_65fc8e22_i];
                if (R_65fc8e22_i < 1'h1) begin
                    M_left_mux5_in[R_65fc8e22_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux5_in[R_65fc8e22_i][1'h1] = z[R_65fc8e22_i - 1'h1];
                end
            end
        end else begin
            if (alufn[1'h1:1'h0] == 2'h1) begin
                for (RR_5e889f8f_i = 0; RR_5e889f8f_i < 6'h20; RR_5e889f8f_i = RR_5e889f8f_i + 1) begin
          R_5e889f8f_i = (0) + RR_5e889f8f_i * (1);
                    M_right_mux1_in[R_5e889f8f_i][1'h0] = a[R_5e889f8f_i];
                    if (R_5e889f8f_i < 5'h10) begin
                        M_right_mux1_in[R_5e889f8f_i][1'h1] = a[5'h10 + R_5e889f8f_i];
                    end else begin
                        M_right_mux1_in[R_5e889f8f_i][1'h1] = 1'h0;
                    end
                end
                wr = M_right_mux1_out;
                for (RR_1b1808c6_i = 0; RR_1b1808c6_i < 6'h20; RR_1b1808c6_i = RR_1b1808c6_i + 1) begin
          R_1b1808c6_i = (0) + RR_1b1808c6_i * (1);
                    M_right_mux2_in[R_1b1808c6_i][1'h0] = wr[R_1b1808c6_i];
                    if (R_1b1808c6_i < 5'h18) begin
                        M_right_mux2_in[R_1b1808c6_i][1'h1] = wr[4'h8 + R_1b1808c6_i];
                    end else begin
                        M_right_mux2_in[R_1b1808c6_i][1'h1] = 1'h0;
                    end
                end
                xr = M_right_mux2_out;
                for (RR_3b7d4eab_i = 0; RR_3b7d4eab_i < 6'h20; RR_3b7d4eab_i = RR_3b7d4eab_i + 1) begin
          R_3b7d4eab_i = (0) + RR_3b7d4eab_i * (1);
                    M_right_mux3_in[R_3b7d4eab_i][1'h0] = xr[R_3b7d4eab_i];
                    if (R_3b7d4eab_i < 5'h1c) begin
                        M_right_mux3_in[R_3b7d4eab_i][1'h1] = xr[3'h4 + R_3b7d4eab_i];
                    end else begin
                        M_right_mux3_in[R_3b7d4eab_i][1'h1] = 1'h0;
                    end
                end
                yr = M_right_mux3_out;
                for (RR_5091a8b5_i = 0; RR_5091a8b5_i < 6'h20; RR_5091a8b5_i = RR_5091a8b5_i + 1) begin
          R_5091a8b5_i = (0) + RR_5091a8b5_i * (1);
                    M_right_mux4_in[R_5091a8b5_i][1'h0] = yr[R_5091a8b5_i];
                    if (R_5091a8b5_i < 5'h1e) begin
                        M_right_mux4_in[R_5091a8b5_i][1'h1] = yr[2'h2 + R_5091a8b5_i];
                    end else begin
                        M_right_mux4_in[R_5091a8b5_i][1'h1] = 1'h0;
                    end
                end
                zr = M_right_mux4_out;
                for (RR_6623c495_i = 0; RR_6623c495_i < 6'h20; RR_6623c495_i = RR_6623c495_i + 1) begin
          R_6623c495_i = (0) + RR_6623c495_i * (1);
                    M_right_mux5_in[R_6623c495_i][1'h0] = zr[R_6623c495_i];
                    if (R_6623c495_i < 5'h1f) begin
                        M_right_mux5_in[R_6623c495_i][1'h1] = zr[1'h1 + R_6623c495_i];
                    end else begin
                        M_right_mux5_in[R_6623c495_i][1'h1] = 1'h0;
                    end
                end
            end else begin
                if (alufn[1'h1:1'h0] == 2'h3) begin
                    for (RR_42d09051_i = 0; RR_42d09051_i < 6'h20; RR_42d09051_i = RR_42d09051_i + 1) begin
            R_42d09051_i = (0) + RR_42d09051_i * (1);
                        M_sra_mux1_in[R_42d09051_i][1'h0] = a[R_42d09051_i];
                        if (R_42d09051_i < 5'h10) begin
                            M_sra_mux1_in[R_42d09051_i][1'h1] = a[5'h10 + R_42d09051_i];
                        end else begin
                            M_sra_mux1_in[R_42d09051_i][1'h1] = a[5'h1f];
                        end
                        wra[R_42d09051_i] = M_sra_mux1_out[R_42d09051_i];
                    end
                    for (RR_68d94af2_i = 0; RR_68d94af2_i < 6'h20; RR_68d94af2_i = RR_68d94af2_i + 1) begin
            R_68d94af2_i = (0) + RR_68d94af2_i * (1);
                        M_sra_mux2_in[R_68d94af2_i][1'h0] = wra[R_68d94af2_i];
                        if (R_68d94af2_i < 5'h18) begin
                            M_sra_mux2_in[R_68d94af2_i][1'h1] = wra[4'h8 + R_68d94af2_i];
                        end else begin
                            M_sra_mux2_in[R_68d94af2_i][1'h1] = a[5'h1f];
                        end
                        M_sra_mux2_s0[R_68d94af2_i] = b[2'h3];
                        xra[R_68d94af2_i] = M_sra_mux2_out[R_68d94af2_i];
                    end
                    for (RR_02d42122_i = 0; RR_02d42122_i < 6'h20; RR_02d42122_i = RR_02d42122_i + 1) begin
            R_02d42122_i = (0) + RR_02d42122_i * (1);
                        M_sra_mux3_in[R_02d42122_i][1'h0] = xra[R_02d42122_i];
                        if (R_02d42122_i < 5'h1c) begin
                            M_sra_mux3_in[R_02d42122_i][1'h1] = xra[3'h4 + R_02d42122_i];
                        end else begin
                            M_sra_mux3_in[R_02d42122_i][1'h1] = a[5'h1f];
                        end
                        M_sra_mux3_s0[R_02d42122_i] = b[2'h2];
                        yra[R_02d42122_i] = M_sra_mux3_out[R_02d42122_i];
                    end
                    for (RR_73707c89_i = 0; RR_73707c89_i < 6'h20; RR_73707c89_i = RR_73707c89_i + 1) begin
            R_73707c89_i = (0) + RR_73707c89_i * (1);
                        M_sra_mux4_in[R_73707c89_i][1'h0] = yra[R_73707c89_i];
                        if (R_73707c89_i < 5'h1e) begin
                            M_sra_mux4_in[R_73707c89_i][1'h1] = yra[2'h2 + R_73707c89_i];
                        end else begin
                            M_sra_mux4_in[R_73707c89_i][1'h1] = a[5'h1f];
                        end
                        M_sra_mux4_s0[R_73707c89_i] = b[1'h1];
                        zra[R_73707c89_i] = M_sra_mux4_out[R_73707c89_i];
                    end
                    for (RR_4551fc41_i = 0; RR_4551fc41_i < 6'h20; RR_4551fc41_i = RR_4551fc41_i + 1) begin
            R_4551fc41_i = (0) + RR_4551fc41_i * (1);
                        M_sra_mux5_in[R_4551fc41_i][1'h0] = zra[R_4551fc41_i];
                        if (R_4551fc41_i < 5'h1f) begin
                            M_sra_mux5_in[R_4551fc41_i][1'h1] = zra[1'h1 + R_4551fc41_i];
                        end else begin
                            M_sra_mux5_in[R_4551fc41_i][1'h1] = a[5'h1f];
                        end
                        M_sra_mux5_s0[R_4551fc41_i] = b[1'h0];
                    end
                end
            end
        end
        for (RR_522801e6_i = 0; RR_522801e6_i < 6'h20; RR_522801e6_i = RR_522801e6_i + 1) begin
      R_522801e6_i = (0) + RR_522801e6_i * (1);
            M_left_mux1_s0[R_522801e6_i] = b[3'h4];
            M_left_mux2_s0[R_522801e6_i] = b[2'h3];
            M_left_mux3_s0[R_522801e6_i] = b[2'h2];
            M_left_mux4_s0[R_522801e6_i] = b[1'h1];
            M_left_mux5_s0[R_522801e6_i] = b[1'h0];
            M_right_mux1_s0[R_522801e6_i] = b[3'h4];
            M_right_mux2_s0[R_522801e6_i] = b[2'h3];
            M_right_mux3_s0[R_522801e6_i] = b[2'h2];
            M_right_mux4_s0[R_522801e6_i] = b[1'h1];
            M_right_mux5_s0[R_522801e6_i] = b[1'h0];
            M_sra_mux1_s0[R_522801e6_i] = b[3'h4];
            M_sra_mux2_s0[R_522801e6_i] = b[2'h3];
            M_sra_mux3_s0[R_522801e6_i] = b[2'h2];
            M_sra_mux4_s0[R_522801e6_i] = b[1'h1];
            M_sra_mux5_s0[R_522801e6_i] = b[1'h0];
        end
        
        case (alufn[1'h1:1'h0])
            2'h0: begin
                shift = M_left_mux5_out;
            end
            2'h1: begin
                shift = M_right_mux5_out;
            end
            2'h3: begin
                shift = M_sra_mux5_out;
            end
            default: begin
                shift = 1'h0;
            end
        endcase
    end
    
    
endmodule