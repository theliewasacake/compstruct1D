/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module shifter (
        input wire [31:0] a,
        input wire [4:0] b,
        input wire [5:0] alufn,
        output reg [31:0] shift
    );
    logic [31:0] R_52104ed0_i;
    logic [31:0] RR_52104ed0_i;
    logic [31:0] R_57f78984_i;
    logic [31:0] RR_57f78984_i;
    logic [31:0] R_21a47325_i;
    logic [31:0] RR_21a47325_i;
    logic [31:0] R_2958f921_i;
    logic [31:0] RR_2958f921_i;
    logic [31:0] R_13a82fd4_i;
    logic [31:0] RR_13a82fd4_i;
    logic [31:0] R_2e423604_i;
    logic [31:0] RR_2e423604_i;
    logic [31:0] R_24e16deb_i;
    logic [31:0] RR_24e16deb_i;
    logic [31:0] R_6d103551_i;
    logic [31:0] RR_6d103551_i;
    logic [31:0] R_15010820_i;
    logic [31:0] RR_15010820_i;
    logic [31:0] R_31a5f6ea_i;
    logic [31:0] RR_31a5f6ea_i;
    logic [31:0] R_6d56dc1b_i;
    logic [31:0] RR_6d56dc1b_i;
    logic [31:0] R_001d6332_i;
    logic [31:0] RR_001d6332_i;
    logic [31:0] R_41ab4f76_i;
    logic [31:0] RR_41ab4f76_i;
    logic [31:0] R_37abbee6_i;
    logic [31:0] RR_37abbee6_i;
    logic [31:0] R_7a97c291_i;
    logic [31:0] RR_7a97c291_i;
    logic [31:0] R_6989ed1f_i;
    logic [31:0] RR_6989ed1f_i;
    logic [31:0] w;
    logic [31:0] x;
    logic [31:0] y;
    logic [31:0] z;
    logic [31:0] M_left_mux1_s0;
    logic [31:0][1:0] M_left_mux1_in;
    logic [31:0] M_left_mux1_out;
    
    genvar idx_0_1658318371;
    
    generate
        for (idx_0_1658318371 = 0; idx_0_1658318371 < 32; idx_0_1658318371 = idx_0_1658318371 + 1) begin: forLoop_idx_0_1658318371
            mux_2 left_mux1 (
                .s0(M_left_mux1_s0[idx_0_1658318371]),
                .in(M_left_mux1_in[idx_0_1658318371]),
                .out(M_left_mux1_out[idx_0_1658318371])
            );
        end
    endgenerate
    
    
    logic [31:0] M_left_mux2_s0;
    logic [31:0][1:0] M_left_mux2_in;
    logic [31:0] M_left_mux2_out;
    
    genvar idx_0_12276867;
    
    generate
        for (idx_0_12276867 = 0; idx_0_12276867 < 32; idx_0_12276867 = idx_0_12276867 + 1) begin: forLoop_idx_0_12276867
            mux_2 left_mux2 (
                .s0(M_left_mux2_s0[idx_0_12276867]),
                .in(M_left_mux2_in[idx_0_12276867]),
                .out(M_left_mux2_out[idx_0_12276867])
            );
        end
    endgenerate
    
    
    logic [31:0] M_left_mux3_s0;
    logic [31:0][1:0] M_left_mux3_in;
    logic [31:0] M_left_mux3_out;
    
    genvar idx_0_1800591117;
    
    generate
        for (idx_0_1800591117 = 0; idx_0_1800591117 < 32; idx_0_1800591117 = idx_0_1800591117 + 1) begin: forLoop_idx_0_1800591117
            mux_2 left_mux3 (
                .s0(M_left_mux3_s0[idx_0_1800591117]),
                .in(M_left_mux3_in[idx_0_1800591117]),
                .out(M_left_mux3_out[idx_0_1800591117])
            );
        end
    endgenerate
    
    
    logic [31:0] M_left_mux4_s0;
    logic [31:0][1:0] M_left_mux4_in;
    logic [31:0] M_left_mux4_out;
    
    genvar idx_0_64903496;
    
    generate
        for (idx_0_64903496 = 0; idx_0_64903496 < 32; idx_0_64903496 = idx_0_64903496 + 1) begin: forLoop_idx_0_64903496
            mux_2 left_mux4 (
                .s0(M_left_mux4_s0[idx_0_64903496]),
                .in(M_left_mux4_in[idx_0_64903496]),
                .out(M_left_mux4_out[idx_0_64903496])
            );
        end
    endgenerate
    
    
    logic [31:0] M_left_mux5_s0;
    logic [31:0][1:0] M_left_mux5_in;
    logic [31:0] M_left_mux5_out;
    
    genvar idx_0_510524464;
    
    generate
        for (idx_0_510524464 = 0; idx_0_510524464 < 32; idx_0_510524464 = idx_0_510524464 + 1) begin: forLoop_idx_0_510524464
            mux_2 left_mux5 (
                .s0(M_left_mux5_s0[idx_0_510524464]),
                .in(M_left_mux5_in[idx_0_510524464]),
                .out(M_left_mux5_out[idx_0_510524464])
            );
        end
    endgenerate
    
    
    logic [31:0] wr;
    logic [31:0] xr;
    logic [31:0] yr;
    logic [31:0] zr;
    logic [31:0] M_right_mux1_s0;
    logic [31:0][1:0] M_right_mux1_in;
    logic [31:0] M_right_mux1_out;
    
    genvar idx_0_1584144182;
    
    generate
        for (idx_0_1584144182 = 0; idx_0_1584144182 < 32; idx_0_1584144182 = idx_0_1584144182 + 1) begin: forLoop_idx_0_1584144182
            mux_2 right_mux1 (
                .s0(M_right_mux1_s0[idx_0_1584144182]),
                .in(M_right_mux1_in[idx_0_1584144182]),
                .out(M_right_mux1_out[idx_0_1584144182])
            );
        end
    endgenerate
    
    
    logic [31:0] M_right_mux2_s0;
    logic [31:0][1:0] M_right_mux2_in;
    logic [31:0] M_right_mux2_out;
    
    genvar idx_0_1174510531;
    
    generate
        for (idx_0_1174510531 = 0; idx_0_1174510531 < 32; idx_0_1174510531 = idx_0_1174510531 + 1) begin: forLoop_idx_0_1174510531
            mux_2 right_mux2 (
                .s0(M_right_mux2_s0[idx_0_1174510531]),
                .in(M_right_mux2_in[idx_0_1174510531]),
                .out(M_right_mux2_out[idx_0_1174510531])
            );
        end
    endgenerate
    
    
    logic [31:0] M_right_mux3_s0;
    logic [31:0][1:0] M_right_mux3_in;
    logic [31:0] M_right_mux3_out;
    
    genvar idx_0_405290940;
    
    generate
        for (idx_0_405290940 = 0; idx_0_405290940 < 32; idx_0_405290940 = idx_0_405290940 + 1) begin: forLoop_idx_0_405290940
            mux_2 right_mux3 (
                .s0(M_right_mux3_s0[idx_0_405290940]),
                .in(M_right_mux3_in[idx_0_405290940]),
                .out(M_right_mux3_out[idx_0_405290940])
            );
        end
    endgenerate
    
    
    logic [31:0] M_right_mux4_s0;
    logic [31:0][1:0] M_right_mux4_in;
    logic [31:0] M_right_mux4_out;
    
    genvar idx_0_832508777;
    
    generate
        for (idx_0_832508777 = 0; idx_0_832508777 < 32; idx_0_832508777 = idx_0_832508777 + 1) begin: forLoop_idx_0_832508777
            mux_2 right_mux4 (
                .s0(M_right_mux4_s0[idx_0_832508777]),
                .in(M_right_mux4_in[idx_0_832508777]),
                .out(M_right_mux4_out[idx_0_832508777])
            );
        end
    endgenerate
    
    
    logic [31:0] M_right_mux5_s0;
    logic [31:0][1:0] M_right_mux5_in;
    logic [31:0] M_right_mux5_out;
    
    genvar idx_0_28613514;
    
    generate
        for (idx_0_28613514 = 0; idx_0_28613514 < 32; idx_0_28613514 = idx_0_28613514 + 1) begin: forLoop_idx_0_28613514
            mux_2 right_mux5 (
                .s0(M_right_mux5_s0[idx_0_28613514]),
                .in(M_right_mux5_in[idx_0_28613514]),
                .out(M_right_mux5_out[idx_0_28613514])
            );
        end
    endgenerate
    
    
    logic [31:0] wra;
    logic [31:0] xra;
    logic [31:0] yra;
    logic [31:0] zra;
    logic [31:0] M_sra_mux1_s0;
    logic [31:0][1:0] M_sra_mux1_in;
    logic [31:0] M_sra_mux1_out;
    
    genvar idx_0_2037188279;
    
    generate
        for (idx_0_2037188279 = 0; idx_0_2037188279 < 32; idx_0_2037188279 = idx_0_2037188279 + 1) begin: forLoop_idx_0_2037188279
            mux_2 sra_mux1 (
                .s0(M_sra_mux1_s0[idx_0_2037188279]),
                .in(M_sra_mux1_in[idx_0_2037188279]),
                .out(M_sra_mux1_out[idx_0_2037188279])
            );
        end
    endgenerate
    
    
    logic [31:0] M_sra_mux2_s0;
    logic [31:0][1:0] M_sra_mux2_in;
    logic [31:0] M_sra_mux2_out;
    
    genvar idx_0_2082022717;
    
    generate
        for (idx_0_2082022717 = 0; idx_0_2082022717 < 32; idx_0_2082022717 = idx_0_2082022717 + 1) begin: forLoop_idx_0_2082022717
            mux_2 sra_mux2 (
                .s0(M_sra_mux2_s0[idx_0_2082022717]),
                .in(M_sra_mux2_in[idx_0_2082022717]),
                .out(M_sra_mux2_out[idx_0_2082022717])
            );
        end
    endgenerate
    
    
    logic [31:0] M_sra_mux3_s0;
    logic [31:0][1:0] M_sra_mux3_in;
    logic [31:0] M_sra_mux3_out;
    
    genvar idx_0_260399255;
    
    generate
        for (idx_0_260399255 = 0; idx_0_260399255 < 32; idx_0_260399255 = idx_0_260399255 + 1) begin: forLoop_idx_0_260399255
            mux_2 sra_mux3 (
                .s0(M_sra_mux3_s0[idx_0_260399255]),
                .in(M_sra_mux3_in[idx_0_260399255]),
                .out(M_sra_mux3_out[idx_0_260399255])
            );
        end
    endgenerate
    
    
    logic [31:0] M_sra_mux4_s0;
    logic [31:0][1:0] M_sra_mux4_in;
    logic [31:0] M_sra_mux4_out;
    
    genvar idx_0_1147458674;
    
    generate
        for (idx_0_1147458674 = 0; idx_0_1147458674 < 32; idx_0_1147458674 = idx_0_1147458674 + 1) begin: forLoop_idx_0_1147458674
            mux_2 sra_mux4 (
                .s0(M_sra_mux4_s0[idx_0_1147458674]),
                .in(M_sra_mux4_in[idx_0_1147458674]),
                .out(M_sra_mux4_out[idx_0_1147458674])
            );
        end
    endgenerate
    
    
    logic [31:0] M_sra_mux5_s0;
    logic [31:0][1:0] M_sra_mux5_in;
    logic [31:0] M_sra_mux5_out;
    
    genvar idx_0_2089921610;
    
    generate
        for (idx_0_2089921610 = 0; idx_0_2089921610 < 32; idx_0_2089921610 = idx_0_2089921610 + 1) begin: forLoop_idx_0_2089921610
            mux_2 sra_mux5 (
                .s0(M_sra_mux5_s0[idx_0_2089921610]),
                .in(M_sra_mux5_in[idx_0_2089921610]),
                .out(M_sra_mux5_out[idx_0_2089921610])
            );
        end
    endgenerate
    
    
    always @* begin
        M_left_mux1_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux2_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux3_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux4_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux5_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux1_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux2_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux3_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux4_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux5_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux1_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux2_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux3_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux4_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux5_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux1_s0 = 32'h0;
        M_right_mux1_s0 = 32'h0;
        M_sra_mux1_s0 = 32'h0;
        M_left_mux2_s0 = 32'h0;
        M_right_mux2_s0 = 32'h0;
        M_sra_mux2_s0 = 32'h0;
        M_left_mux3_s0 = 32'h0;
        M_right_mux3_s0 = 32'h0;
        M_sra_mux3_s0 = 32'h0;
        M_left_mux4_s0 = 32'h0;
        M_right_mux4_s0 = 32'h0;
        M_sra_mux4_s0 = 32'h0;
        M_left_mux5_s0 = 32'h0;
        M_right_mux5_s0 = 32'h0;
        M_sra_mux5_s0 = 32'h0;
        w = 32'h0;
        x = 32'h0;
        y = 32'h0;
        z = 32'h0;
        wr = 32'h0;
        xr = 32'h0;
        yr = 32'h0;
        zr = 32'h0;
        wra = 32'h0;
        xra = 32'h0;
        yra = 32'h0;
        zra = 32'h0;
        if (alufn[1'h1:1'h0] == 2'h0) begin
            for (RR_52104ed0_i = 0; RR_52104ed0_i < 6'h20; RR_52104ed0_i = RR_52104ed0_i + 1) begin
        R_52104ed0_i = (0) + RR_52104ed0_i * (1);
                M_left_mux1_in[R_52104ed0_i][1'h0] = a[R_52104ed0_i];
                if (R_52104ed0_i < 5'h10) begin
                    M_left_mux1_in[R_52104ed0_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux1_in[R_52104ed0_i][1'h1] = a[R_52104ed0_i - 5'h10];
                end
            end
            w = M_left_mux1_out;
            for (RR_57f78984_i = 0; RR_57f78984_i < 6'h20; RR_57f78984_i = RR_57f78984_i + 1) begin
        R_57f78984_i = (0) + RR_57f78984_i * (1);
                M_left_mux2_in[R_57f78984_i][1'h0] = w[R_57f78984_i];
                if (R_57f78984_i < 4'h8) begin
                    M_left_mux2_in[R_57f78984_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux2_in[R_57f78984_i][1'h1] = w[R_57f78984_i - 4'h8];
                end
            end
            x = M_left_mux2_out;
            for (RR_21a47325_i = 0; RR_21a47325_i < 6'h20; RR_21a47325_i = RR_21a47325_i + 1) begin
        R_21a47325_i = (0) + RR_21a47325_i * (1);
                M_left_mux3_in[R_21a47325_i][1'h0] = x[R_21a47325_i];
                if (R_21a47325_i < 3'h4) begin
                    M_left_mux3_in[R_21a47325_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux3_in[R_21a47325_i][1'h1] = x[R_21a47325_i - 3'h4];
                end
            end
            y = M_left_mux3_out;
            for (RR_2958f921_i = 0; RR_2958f921_i < 6'h20; RR_2958f921_i = RR_2958f921_i + 1) begin
        R_2958f921_i = (0) + RR_2958f921_i * (1);
                M_left_mux4_in[R_2958f921_i][1'h0] = y[R_2958f921_i];
                if (R_2958f921_i < 2'h2) begin
                    M_left_mux4_in[R_2958f921_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux4_in[R_2958f921_i][1'h1] = y[R_2958f921_i - 2'h2];
                end
            end
            z = M_left_mux4_out;
            for (RR_13a82fd4_i = 0; RR_13a82fd4_i < 6'h20; RR_13a82fd4_i = RR_13a82fd4_i + 1) begin
        R_13a82fd4_i = (0) + RR_13a82fd4_i * (1);
                M_left_mux5_in[R_13a82fd4_i][1'h0] = z[R_13a82fd4_i];
                if (R_13a82fd4_i < 1'h1) begin
                    M_left_mux5_in[R_13a82fd4_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux5_in[R_13a82fd4_i][1'h1] = z[R_13a82fd4_i - 1'h1];
                end
            end
        end else begin
            if (alufn[1'h1:1'h0] == 2'h1) begin
                for (RR_2e423604_i = 0; RR_2e423604_i < 6'h20; RR_2e423604_i = RR_2e423604_i + 1) begin
          R_2e423604_i = (0) + RR_2e423604_i * (1);
                    M_right_mux1_in[R_2e423604_i][1'h0] = a[R_2e423604_i];
                    if (R_2e423604_i < 5'h10) begin
                        M_right_mux1_in[R_2e423604_i][1'h1] = a[5'h10 + R_2e423604_i];
                    end else begin
                        M_right_mux1_in[R_2e423604_i][1'h1] = 1'h0;
                    end
                end
                wr = M_right_mux1_out;
                for (RR_24e16deb_i = 0; RR_24e16deb_i < 6'h20; RR_24e16deb_i = RR_24e16deb_i + 1) begin
          R_24e16deb_i = (0) + RR_24e16deb_i * (1);
                    M_right_mux2_in[R_24e16deb_i][1'h0] = wr[R_24e16deb_i];
                    if (R_24e16deb_i < 5'h18) begin
                        M_right_mux2_in[R_24e16deb_i][1'h1] = wr[4'h8 + R_24e16deb_i];
                    end else begin
                        M_right_mux2_in[R_24e16deb_i][1'h1] = 1'h0;
                    end
                end
                xr = M_right_mux2_out;
                for (RR_6d103551_i = 0; RR_6d103551_i < 6'h20; RR_6d103551_i = RR_6d103551_i + 1) begin
          R_6d103551_i = (0) + RR_6d103551_i * (1);
                    M_right_mux3_in[R_6d103551_i][1'h0] = xr[R_6d103551_i];
                    if (R_6d103551_i < 5'h1c) begin
                        M_right_mux3_in[R_6d103551_i][1'h1] = xr[3'h4 + R_6d103551_i];
                    end else begin
                        M_right_mux3_in[R_6d103551_i][1'h1] = 1'h0;
                    end
                end
                yr = M_right_mux3_out;
                for (RR_15010820_i = 0; RR_15010820_i < 6'h20; RR_15010820_i = RR_15010820_i + 1) begin
          R_15010820_i = (0) + RR_15010820_i * (1);
                    M_right_mux4_in[R_15010820_i][1'h0] = yr[R_15010820_i];
                    if (R_15010820_i < 5'h1e) begin
                        M_right_mux4_in[R_15010820_i][1'h1] = yr[2'h2 + R_15010820_i];
                    end else begin
                        M_right_mux4_in[R_15010820_i][1'h1] = 1'h0;
                    end
                end
                zr = M_right_mux4_out;
                for (RR_31a5f6ea_i = 0; RR_31a5f6ea_i < 6'h20; RR_31a5f6ea_i = RR_31a5f6ea_i + 1) begin
          R_31a5f6ea_i = (0) + RR_31a5f6ea_i * (1);
                    M_right_mux5_in[R_31a5f6ea_i][1'h0] = zr[R_31a5f6ea_i];
                    if (R_31a5f6ea_i < 5'h1f) begin
                        M_right_mux5_in[R_31a5f6ea_i][1'h1] = zr[1'h1 + R_31a5f6ea_i];
                    end else begin
                        M_right_mux5_in[R_31a5f6ea_i][1'h1] = 1'h0;
                    end
                end
            end else begin
                if (alufn[1'h1:1'h0] == 2'h3) begin
                    for (RR_6d56dc1b_i = 0; RR_6d56dc1b_i < 6'h20; RR_6d56dc1b_i = RR_6d56dc1b_i + 1) begin
            R_6d56dc1b_i = (0) + RR_6d56dc1b_i * (1);
                        M_sra_mux1_in[R_6d56dc1b_i][1'h0] = a[R_6d56dc1b_i];
                        if (R_6d56dc1b_i < 5'h10) begin
                            M_sra_mux1_in[R_6d56dc1b_i][1'h1] = a[5'h10 + R_6d56dc1b_i];
                        end else begin
                            M_sra_mux1_in[R_6d56dc1b_i][1'h1] = a[5'h1f];
                        end
                        wra[R_6d56dc1b_i] = M_sra_mux1_out[R_6d56dc1b_i];
                    end
                    for (RR_001d6332_i = 0; RR_001d6332_i < 6'h20; RR_001d6332_i = RR_001d6332_i + 1) begin
            R_001d6332_i = (0) + RR_001d6332_i * (1);
                        M_sra_mux2_in[R_001d6332_i][1'h0] = wra[R_001d6332_i];
                        if (R_001d6332_i < 5'h18) begin
                            M_sra_mux2_in[R_001d6332_i][1'h1] = wra[4'h8 + R_001d6332_i];
                        end else begin
                            M_sra_mux2_in[R_001d6332_i][1'h1] = a[5'h1f];
                        end
                        M_sra_mux2_s0[R_001d6332_i] = b[2'h3];
                        xra[R_001d6332_i] = M_sra_mux2_out[R_001d6332_i];
                    end
                    for (RR_41ab4f76_i = 0; RR_41ab4f76_i < 6'h20; RR_41ab4f76_i = RR_41ab4f76_i + 1) begin
            R_41ab4f76_i = (0) + RR_41ab4f76_i * (1);
                        M_sra_mux3_in[R_41ab4f76_i][1'h0] = xra[R_41ab4f76_i];
                        if (R_41ab4f76_i < 5'h1c) begin
                            M_sra_mux3_in[R_41ab4f76_i][1'h1] = xra[3'h4 + R_41ab4f76_i];
                        end else begin
                            M_sra_mux3_in[R_41ab4f76_i][1'h1] = a[5'h1f];
                        end
                        M_sra_mux3_s0[R_41ab4f76_i] = b[2'h2];
                        yra[R_41ab4f76_i] = M_sra_mux3_out[R_41ab4f76_i];
                    end
                    for (RR_37abbee6_i = 0; RR_37abbee6_i < 6'h20; RR_37abbee6_i = RR_37abbee6_i + 1) begin
            R_37abbee6_i = (0) + RR_37abbee6_i * (1);
                        M_sra_mux4_in[R_37abbee6_i][1'h0] = yra[R_37abbee6_i];
                        if (R_37abbee6_i < 5'h1e) begin
                            M_sra_mux4_in[R_37abbee6_i][1'h1] = yra[2'h2 + R_37abbee6_i];
                        end else begin
                            M_sra_mux4_in[R_37abbee6_i][1'h1] = a[5'h1f];
                        end
                        M_sra_mux4_s0[R_37abbee6_i] = b[1'h1];
                        zra[R_37abbee6_i] = M_sra_mux4_out[R_37abbee6_i];
                    end
                    for (RR_7a97c291_i = 0; RR_7a97c291_i < 6'h20; RR_7a97c291_i = RR_7a97c291_i + 1) begin
            R_7a97c291_i = (0) + RR_7a97c291_i * (1);
                        M_sra_mux5_in[R_7a97c291_i][1'h0] = zra[R_7a97c291_i];
                        if (R_7a97c291_i < 5'h1f) begin
                            M_sra_mux5_in[R_7a97c291_i][1'h1] = zra[1'h1 + R_7a97c291_i];
                        end else begin
                            M_sra_mux5_in[R_7a97c291_i][1'h1] = a[5'h1f];
                        end
                        M_sra_mux5_s0[R_7a97c291_i] = b[1'h0];
                    end
                end
            end
        end
        for (RR_6989ed1f_i = 0; RR_6989ed1f_i < 6'h20; RR_6989ed1f_i = RR_6989ed1f_i + 1) begin
      R_6989ed1f_i = (0) + RR_6989ed1f_i * (1);
            M_left_mux1_s0[R_6989ed1f_i] = b[3'h4];
            M_left_mux2_s0[R_6989ed1f_i] = b[2'h3];
            M_left_mux3_s0[R_6989ed1f_i] = b[2'h2];
            M_left_mux4_s0[R_6989ed1f_i] = b[1'h1];
            M_left_mux5_s0[R_6989ed1f_i] = b[1'h0];
            M_right_mux1_s0[R_6989ed1f_i] = b[3'h4];
            M_right_mux2_s0[R_6989ed1f_i] = b[2'h3];
            M_right_mux3_s0[R_6989ed1f_i] = b[2'h2];
            M_right_mux4_s0[R_6989ed1f_i] = b[1'h1];
            M_right_mux5_s0[R_6989ed1f_i] = b[1'h0];
            M_sra_mux1_s0[R_6989ed1f_i] = b[3'h4];
            M_sra_mux2_s0[R_6989ed1f_i] = b[2'h3];
            M_sra_mux3_s0[R_6989ed1f_i] = b[2'h2];
            M_sra_mux4_s0[R_6989ed1f_i] = b[1'h1];
            M_sra_mux5_s0[R_6989ed1f_i] = b[1'h0];
        end
        
        case (alufn[1'h1:1'h0])
            2'h0: begin
                shift = M_left_mux5_out;
            end
            2'h1: begin
                shift = M_right_mux5_out;
            end
            2'h3: begin
                shift = M_sra_mux5_out;
            end
            default: begin
                shift = 1'h0;
            end
        endcase
    end
    
    
endmodule