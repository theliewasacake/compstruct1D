/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module shifter (
        input wire [31:0] a,
        input wire [4:0] b,
        input wire [5:0] alufn,
        output reg [31:0] shift
    );
    logic [31:0] R_6d3e28ca_i;
    logic [31:0] RR_6d3e28ca_i;
    logic [31:0] R_226dae5e_i;
    logic [31:0] RR_226dae5e_i;
    logic [31:0] R_754f98c0_i;
    logic [31:0] RR_754f98c0_i;
    logic [31:0] R_1825736c_i;
    logic [31:0] RR_1825736c_i;
    logic [31:0] R_04d19d49_i;
    logic [31:0] RR_04d19d49_i;
    logic [31:0] R_26d9cdf3_i;
    logic [31:0] RR_26d9cdf3_i;
    logic [31:0] R_3757e20a_i;
    logic [31:0] RR_3757e20a_i;
    logic [31:0] R_69dedb56_i;
    logic [31:0] RR_69dedb56_i;
    logic [31:0] R_143194ad_i;
    logic [31:0] RR_143194ad_i;
    logic [31:0] R_321f3be9_i;
    logic [31:0] RR_321f3be9_i;
    logic [31:0] R_0f24506d_i;
    logic [31:0] RR_0f24506d_i;
    logic [31:0] R_6bc78228_i;
    logic [31:0] RR_6bc78228_i;
    logic [31:0] R_048cf14c_i;
    logic [31:0] RR_048cf14c_i;
    logic [31:0] R_0a6f37c4_i;
    logic [31:0] RR_0a6f37c4_i;
    logic [31:0] R_06e18bc9_i;
    logic [31:0] RR_06e18bc9_i;
    logic [31:0] R_5b8f99ee_i;
    logic [31:0] RR_5b8f99ee_i;
    logic [31:0] w;
    logic [31:0] x;
    logic [31:0] y;
    logic [31:0] z;
    logic [31:0] M_left_mux1_s0;
    logic [31:0][1:0] M_left_mux1_in;
    logic [31:0] M_left_mux1_out;
    
    genvar idx_0_195521423;
    
    generate
        for (idx_0_195521423 = 0; idx_0_195521423 < 32; idx_0_195521423 = idx_0_195521423 + 1) begin: forLoop_idx_0_195521423
            mux_2 left_mux1 (
                .s0(M_left_mux1_s0[idx_0_195521423]),
                .in(M_left_mux1_in[idx_0_195521423]),
                .out(M_left_mux1_out[idx_0_195521423])
            );
        end
    endgenerate
    
    
    logic [31:0] M_left_mux2_s0;
    logic [31:0][1:0] M_left_mux2_in;
    logic [31:0] M_left_mux2_out;
    
    genvar idx_0_1726478355;
    
    generate
        for (idx_0_1726478355 = 0; idx_0_1726478355 < 32; idx_0_1726478355 = idx_0_1726478355 + 1) begin: forLoop_idx_0_1726478355
            mux_2 left_mux2 (
                .s0(M_left_mux2_s0[idx_0_1726478355]),
                .in(M_left_mux2_in[idx_0_1726478355]),
                .out(M_left_mux2_out[idx_0_1726478355])
            );
        end
    endgenerate
    
    
    logic [31:0] M_left_mux3_s0;
    logic [31:0][1:0] M_left_mux3_in;
    logic [31:0] M_left_mux3_out;
    
    genvar idx_0_126190929;
    
    generate
        for (idx_0_126190929 = 0; idx_0_126190929 < 32; idx_0_126190929 = idx_0_126190929 + 1) begin: forLoop_idx_0_126190929
            mux_2 left_mux3 (
                .s0(M_left_mux3_s0[idx_0_126190929]),
                .in(M_left_mux3_in[idx_0_126190929]),
                .out(M_left_mux3_out[idx_0_126190929])
            );
        end
    endgenerate
    
    
    logic [31:0] M_left_mux4_s0;
    logic [31:0][1:0] M_left_mux4_in;
    logic [31:0] M_left_mux4_out;
    
    genvar idx_0_361741128;
    
    generate
        for (idx_0_361741128 = 0; idx_0_361741128 < 32; idx_0_361741128 = idx_0_361741128 + 1) begin: forLoop_idx_0_361741128
            mux_2 left_mux4 (
                .s0(M_left_mux4_s0[idx_0_361741128]),
                .in(M_left_mux4_in[idx_0_361741128]),
                .out(M_left_mux4_out[idx_0_361741128])
            );
        end
    endgenerate
    
    
    logic [31:0] M_left_mux5_s0;
    logic [31:0][1:0] M_left_mux5_in;
    logic [31:0] M_left_mux5_out;
    
    genvar idx_0_1593087615;
    
    generate
        for (idx_0_1593087615 = 0; idx_0_1593087615 < 32; idx_0_1593087615 = idx_0_1593087615 + 1) begin: forLoop_idx_0_1593087615
            mux_2 left_mux5 (
                .s0(M_left_mux5_s0[idx_0_1593087615]),
                .in(M_left_mux5_in[idx_0_1593087615]),
                .out(M_left_mux5_out[idx_0_1593087615])
            );
        end
    endgenerate
    
    
    logic [31:0] wr;
    logic [31:0] xr;
    logic [31:0] yr;
    logic [31:0] zr;
    logic [31:0] M_right_mux1_s0;
    logic [31:0][1:0] M_right_mux1_in;
    logic [31:0] M_right_mux1_out;
    
    genvar idx_0_917787334;
    
    generate
        for (idx_0_917787334 = 0; idx_0_917787334 < 32; idx_0_917787334 = idx_0_917787334 + 1) begin: forLoop_idx_0_917787334
            mux_2 right_mux1 (
                .s0(M_right_mux1_s0[idx_0_917787334]),
                .in(M_right_mux1_in[idx_0_917787334]),
                .out(M_right_mux1_out[idx_0_917787334])
            );
        end
    endgenerate
    
    
    logic [31:0] M_right_mux2_s0;
    logic [31:0][1:0] M_right_mux2_in;
    logic [31:0] M_right_mux2_out;
    
    genvar idx_0_760958806;
    
    generate
        for (idx_0_760958806 = 0; idx_0_760958806 < 32; idx_0_760958806 = idx_0_760958806 + 1) begin: forLoop_idx_0_760958806
            mux_2 right_mux2 (
                .s0(M_right_mux2_s0[idx_0_760958806]),
                .in(M_right_mux2_in[idx_0_760958806]),
                .out(M_right_mux2_out[idx_0_760958806])
            );
        end
    endgenerate
    
    
    logic [31:0] M_right_mux3_s0;
    logic [31:0][1:0] M_right_mux3_in;
    logic [31:0] M_right_mux3_out;
    
    genvar idx_0_1481754596;
    
    generate
        for (idx_0_1481754596 = 0; idx_0_1481754596 < 32; idx_0_1481754596 = idx_0_1481754596 + 1) begin: forLoop_idx_0_1481754596
            mux_2 right_mux3 (
                .s0(M_right_mux3_s0[idx_0_1481754596]),
                .in(M_right_mux3_in[idx_0_1481754596]),
                .out(M_right_mux3_out[idx_0_1481754596])
            );
        end
    endgenerate
    
    
    logic [31:0] M_right_mux4_s0;
    logic [31:0][1:0] M_right_mux4_in;
    logic [31:0] M_right_mux4_out;
    
    genvar idx_0_1793071998;
    
    generate
        for (idx_0_1793071998 = 0; idx_0_1793071998 < 32; idx_0_1793071998 = idx_0_1793071998 + 1) begin: forLoop_idx_0_1793071998
            mux_2 right_mux4 (
                .s0(M_right_mux4_s0[idx_0_1793071998]),
                .in(M_right_mux4_in[idx_0_1793071998]),
                .out(M_right_mux4_out[idx_0_1793071998])
            );
        end
    endgenerate
    
    
    logic [31:0] M_right_mux5_s0;
    logic [31:0][1:0] M_right_mux5_in;
    logic [31:0] M_right_mux5_out;
    
    genvar idx_0_817739947;
    
    generate
        for (idx_0_817739947 = 0; idx_0_817739947 < 32; idx_0_817739947 = idx_0_817739947 + 1) begin: forLoop_idx_0_817739947
            mux_2 right_mux5 (
                .s0(M_right_mux5_s0[idx_0_817739947]),
                .in(M_right_mux5_in[idx_0_817739947]),
                .out(M_right_mux5_out[idx_0_817739947])
            );
        end
    endgenerate
    
    
    logic [31:0] wra;
    logic [31:0] xra;
    logic [31:0] yra;
    logic [31:0] zra;
    logic [31:0] M_sra_mux1_s0;
    logic [31:0][1:0] M_sra_mux1_in;
    logic [31:0] M_sra_mux1_out;
    
    genvar idx_0_837995129;
    
    generate
        for (idx_0_837995129 = 0; idx_0_837995129 < 32; idx_0_837995129 = idx_0_837995129 + 1) begin: forLoop_idx_0_837995129
            mux_2 sra_mux1 (
                .s0(M_sra_mux1_s0[idx_0_837995129]),
                .in(M_sra_mux1_in[idx_0_837995129]),
                .out(M_sra_mux1_out[idx_0_837995129])
            );
        end
    endgenerate
    
    
    logic [31:0] M_sra_mux2_s0;
    logic [31:0][1:0] M_sra_mux2_in;
    logic [31:0] M_sra_mux2_out;
    
    genvar idx_0_1138426733;
    
    generate
        for (idx_0_1138426733 = 0; idx_0_1138426733 < 32; idx_0_1138426733 = idx_0_1138426733 + 1) begin: forLoop_idx_0_1138426733
            mux_2 sra_mux2 (
                .s0(M_sra_mux2_s0[idx_0_1138426733]),
                .in(M_sra_mux2_in[idx_0_1138426733]),
                .out(M_sra_mux2_out[idx_0_1138426733])
            );
        end
    endgenerate
    
    
    logic [31:0] M_sra_mux3_s0;
    logic [31:0][1:0] M_sra_mux3_in;
    logic [31:0] M_sra_mux3_out;
    
    genvar idx_0_1706903778;
    
    generate
        for (idx_0_1706903778 = 0; idx_0_1706903778 < 32; idx_0_1706903778 = idx_0_1706903778 + 1) begin: forLoop_idx_0_1706903778
            mux_2 sra_mux3 (
                .s0(M_sra_mux3_s0[idx_0_1706903778]),
                .in(M_sra_mux3_in[idx_0_1706903778]),
                .out(M_sra_mux3_out[idx_0_1706903778])
            );
        end
    endgenerate
    
    
    logic [31:0] M_sra_mux4_s0;
    logic [31:0][1:0] M_sra_mux4_in;
    logic [31:0] M_sra_mux4_out;
    
    genvar idx_0_441278404;
    
    generate
        for (idx_0_441278404 = 0; idx_0_441278404 < 32; idx_0_441278404 = idx_0_441278404 + 1) begin: forLoop_idx_0_441278404
            mux_2 sra_mux4 (
                .s0(M_sra_mux4_s0[idx_0_441278404]),
                .in(M_sra_mux4_in[idx_0_441278404]),
                .out(M_sra_mux4_out[idx_0_441278404])
            );
        end
    endgenerate
    
    
    logic [31:0] M_sra_mux5_s0;
    logic [31:0][1:0] M_sra_mux5_in;
    logic [31:0] M_sra_mux5_out;
    
    genvar idx_0_881491508;
    
    generate
        for (idx_0_881491508 = 0; idx_0_881491508 < 32; idx_0_881491508 = idx_0_881491508 + 1) begin: forLoop_idx_0_881491508
            mux_2 sra_mux5 (
                .s0(M_sra_mux5_s0[idx_0_881491508]),
                .in(M_sra_mux5_in[idx_0_881491508]),
                .out(M_sra_mux5_out[idx_0_881491508])
            );
        end
    endgenerate
    
    
    always @* begin
        M_left_mux1_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux2_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux3_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux4_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux5_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux1_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux2_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux3_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux4_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux5_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux1_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux2_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux3_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux4_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux5_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux1_s0 = 32'h0;
        M_right_mux1_s0 = 32'h0;
        M_sra_mux1_s0 = 32'h0;
        M_left_mux2_s0 = 32'h0;
        M_right_mux2_s0 = 32'h0;
        M_sra_mux2_s0 = 32'h0;
        M_left_mux3_s0 = 32'h0;
        M_right_mux3_s0 = 32'h0;
        M_sra_mux3_s0 = 32'h0;
        M_left_mux4_s0 = 32'h0;
        M_right_mux4_s0 = 32'h0;
        M_sra_mux4_s0 = 32'h0;
        M_left_mux5_s0 = 32'h0;
        M_right_mux5_s0 = 32'h0;
        M_sra_mux5_s0 = 32'h0;
        w = 32'h0;
        x = 32'h0;
        y = 32'h0;
        z = 32'h0;
        wr = 32'h0;
        xr = 32'h0;
        yr = 32'h0;
        zr = 32'h0;
        wra = 32'h0;
        xra = 32'h0;
        yra = 32'h0;
        zra = 32'h0;
        if (alufn[1'h1:1'h0] == 2'h0) begin
            for (RR_6d3e28ca_i = 0; RR_6d3e28ca_i < 6'h20; RR_6d3e28ca_i = RR_6d3e28ca_i + 1) begin
        R_6d3e28ca_i = (0) + RR_6d3e28ca_i * (1);
                M_left_mux1_in[R_6d3e28ca_i][1'h0] = a[R_6d3e28ca_i];
                if (R_6d3e28ca_i < 5'h10) begin
                    M_left_mux1_in[R_6d3e28ca_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux1_in[R_6d3e28ca_i][1'h1] = a[R_6d3e28ca_i - 5'h10];
                end
            end
            w = M_left_mux1_out;
            for (RR_226dae5e_i = 0; RR_226dae5e_i < 6'h20; RR_226dae5e_i = RR_226dae5e_i + 1) begin
        R_226dae5e_i = (0) + RR_226dae5e_i * (1);
                M_left_mux2_in[R_226dae5e_i][1'h0] = w[R_226dae5e_i];
                if (R_226dae5e_i < 4'h8) begin
                    M_left_mux2_in[R_226dae5e_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux2_in[R_226dae5e_i][1'h1] = w[R_226dae5e_i - 4'h8];
                end
            end
            x = M_left_mux2_out;
            for (RR_754f98c0_i = 0; RR_754f98c0_i < 6'h20; RR_754f98c0_i = RR_754f98c0_i + 1) begin
        R_754f98c0_i = (0) + RR_754f98c0_i * (1);
                M_left_mux3_in[R_754f98c0_i][1'h0] = x[R_754f98c0_i];
                if (R_754f98c0_i < 3'h4) begin
                    M_left_mux3_in[R_754f98c0_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux3_in[R_754f98c0_i][1'h1] = x[R_754f98c0_i - 3'h4];
                end
            end
            y = M_left_mux3_out;
            for (RR_1825736c_i = 0; RR_1825736c_i < 6'h20; RR_1825736c_i = RR_1825736c_i + 1) begin
        R_1825736c_i = (0) + RR_1825736c_i * (1);
                M_left_mux4_in[R_1825736c_i][1'h0] = y[R_1825736c_i];
                if (R_1825736c_i < 2'h2) begin
                    M_left_mux4_in[R_1825736c_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux4_in[R_1825736c_i][1'h1] = y[R_1825736c_i - 2'h2];
                end
            end
            z = M_left_mux4_out;
            for (RR_04d19d49_i = 0; RR_04d19d49_i < 6'h20; RR_04d19d49_i = RR_04d19d49_i + 1) begin
        R_04d19d49_i = (0) + RR_04d19d49_i * (1);
                M_left_mux5_in[R_04d19d49_i][1'h0] = z[R_04d19d49_i];
                if (R_04d19d49_i < 1'h1) begin
                    M_left_mux5_in[R_04d19d49_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux5_in[R_04d19d49_i][1'h1] = z[R_04d19d49_i - 1'h1];
                end
            end
        end else begin
            if (alufn[1'h1:1'h0] == 2'h1) begin
                for (RR_26d9cdf3_i = 0; RR_26d9cdf3_i < 6'h20; RR_26d9cdf3_i = RR_26d9cdf3_i + 1) begin
          R_26d9cdf3_i = (0) + RR_26d9cdf3_i * (1);
                    M_right_mux1_in[R_26d9cdf3_i][1'h0] = a[R_26d9cdf3_i];
                    if (R_26d9cdf3_i < 5'h10) begin
                        M_right_mux1_in[R_26d9cdf3_i][1'h1] = a[5'h10 + R_26d9cdf3_i];
                    end else begin
                        M_right_mux1_in[R_26d9cdf3_i][1'h1] = 1'h0;
                    end
                end
                wr = M_right_mux1_out;
                for (RR_3757e20a_i = 0; RR_3757e20a_i < 6'h20; RR_3757e20a_i = RR_3757e20a_i + 1) begin
          R_3757e20a_i = (0) + RR_3757e20a_i * (1);
                    M_right_mux2_in[R_3757e20a_i][1'h0] = wr[R_3757e20a_i];
                    if (R_3757e20a_i < 5'h18) begin
                        M_right_mux2_in[R_3757e20a_i][1'h1] = wr[4'h8 + R_3757e20a_i];
                    end else begin
                        M_right_mux2_in[R_3757e20a_i][1'h1] = 1'h0;
                    end
                end
                xr = M_right_mux2_out;
                for (RR_69dedb56_i = 0; RR_69dedb56_i < 6'h20; RR_69dedb56_i = RR_69dedb56_i + 1) begin
          R_69dedb56_i = (0) + RR_69dedb56_i * (1);
                    M_right_mux3_in[R_69dedb56_i][1'h0] = xr[R_69dedb56_i];
                    if (R_69dedb56_i < 5'h1c) begin
                        M_right_mux3_in[R_69dedb56_i][1'h1] = xr[3'h4 + R_69dedb56_i];
                    end else begin
                        M_right_mux3_in[R_69dedb56_i][1'h1] = 1'h0;
                    end
                end
                yr = M_right_mux3_out;
                for (RR_143194ad_i = 0; RR_143194ad_i < 6'h20; RR_143194ad_i = RR_143194ad_i + 1) begin
          R_143194ad_i = (0) + RR_143194ad_i * (1);
                    M_right_mux4_in[R_143194ad_i][1'h0] = yr[R_143194ad_i];
                    if (R_143194ad_i < 5'h1e) begin
                        M_right_mux4_in[R_143194ad_i][1'h1] = yr[2'h2 + R_143194ad_i];
                    end else begin
                        M_right_mux4_in[R_143194ad_i][1'h1] = 1'h0;
                    end
                end
                zr = M_right_mux4_out;
                for (RR_321f3be9_i = 0; RR_321f3be9_i < 6'h20; RR_321f3be9_i = RR_321f3be9_i + 1) begin
          R_321f3be9_i = (0) + RR_321f3be9_i * (1);
                    M_right_mux5_in[R_321f3be9_i][1'h0] = zr[R_321f3be9_i];
                    if (R_321f3be9_i < 5'h1f) begin
                        M_right_mux5_in[R_321f3be9_i][1'h1] = zr[1'h1 + R_321f3be9_i];
                    end else begin
                        M_right_mux5_in[R_321f3be9_i][1'h1] = 1'h0;
                    end
                end
            end else begin
                if (alufn[1'h1:1'h0] == 2'h3) begin
                    for (RR_0f24506d_i = 0; RR_0f24506d_i < 6'h20; RR_0f24506d_i = RR_0f24506d_i + 1) begin
            R_0f24506d_i = (0) + RR_0f24506d_i * (1);
                        M_sra_mux1_in[R_0f24506d_i][1'h0] = a[R_0f24506d_i];
                        if (R_0f24506d_i < 5'h10) begin
                            M_sra_mux1_in[R_0f24506d_i][1'h1] = a[5'h10 + R_0f24506d_i];
                        end else begin
                            M_sra_mux1_in[R_0f24506d_i][1'h1] = a[5'h1f];
                        end
                        wra[R_0f24506d_i] = M_sra_mux1_out[R_0f24506d_i];
                    end
                    for (RR_6bc78228_i = 0; RR_6bc78228_i < 6'h20; RR_6bc78228_i = RR_6bc78228_i + 1) begin
            R_6bc78228_i = (0) + RR_6bc78228_i * (1);
                        M_sra_mux2_in[R_6bc78228_i][1'h0] = wra[R_6bc78228_i];
                        if (R_6bc78228_i < 5'h18) begin
                            M_sra_mux2_in[R_6bc78228_i][1'h1] = wra[4'h8 + R_6bc78228_i];
                        end else begin
                            M_sra_mux2_in[R_6bc78228_i][1'h1] = a[5'h1f];
                        end
                        M_sra_mux2_s0[R_6bc78228_i] = b[2'h3];
                        xra[R_6bc78228_i] = M_sra_mux2_out[R_6bc78228_i];
                    end
                    for (RR_048cf14c_i = 0; RR_048cf14c_i < 6'h20; RR_048cf14c_i = RR_048cf14c_i + 1) begin
            R_048cf14c_i = (0) + RR_048cf14c_i * (1);
                        M_sra_mux3_in[R_048cf14c_i][1'h0] = xra[R_048cf14c_i];
                        if (R_048cf14c_i < 5'h1c) begin
                            M_sra_mux3_in[R_048cf14c_i][1'h1] = xra[3'h4 + R_048cf14c_i];
                        end else begin
                            M_sra_mux3_in[R_048cf14c_i][1'h1] = a[5'h1f];
                        end
                        M_sra_mux3_s0[R_048cf14c_i] = b[2'h2];
                        yra[R_048cf14c_i] = M_sra_mux3_out[R_048cf14c_i];
                    end
                    for (RR_0a6f37c4_i = 0; RR_0a6f37c4_i < 6'h20; RR_0a6f37c4_i = RR_0a6f37c4_i + 1) begin
            R_0a6f37c4_i = (0) + RR_0a6f37c4_i * (1);
                        M_sra_mux4_in[R_0a6f37c4_i][1'h0] = yra[R_0a6f37c4_i];
                        if (R_0a6f37c4_i < 5'h1e) begin
                            M_sra_mux4_in[R_0a6f37c4_i][1'h1] = yra[2'h2 + R_0a6f37c4_i];
                        end else begin
                            M_sra_mux4_in[R_0a6f37c4_i][1'h1] = a[5'h1f];
                        end
                        M_sra_mux4_s0[R_0a6f37c4_i] = b[1'h1];
                        zra[R_0a6f37c4_i] = M_sra_mux4_out[R_0a6f37c4_i];
                    end
                    for (RR_06e18bc9_i = 0; RR_06e18bc9_i < 6'h20; RR_06e18bc9_i = RR_06e18bc9_i + 1) begin
            R_06e18bc9_i = (0) + RR_06e18bc9_i * (1);
                        M_sra_mux5_in[R_06e18bc9_i][1'h0] = zra[R_06e18bc9_i];
                        if (R_06e18bc9_i < 5'h1f) begin
                            M_sra_mux5_in[R_06e18bc9_i][1'h1] = zra[1'h1 + R_06e18bc9_i];
                        end else begin
                            M_sra_mux5_in[R_06e18bc9_i][1'h1] = a[5'h1f];
                        end
                        M_sra_mux5_s0[R_06e18bc9_i] = b[1'h0];
                    end
                end
            end
        end
        for (RR_5b8f99ee_i = 0; RR_5b8f99ee_i < 6'h20; RR_5b8f99ee_i = RR_5b8f99ee_i + 1) begin
      R_5b8f99ee_i = (0) + RR_5b8f99ee_i * (1);
            M_left_mux1_s0[R_5b8f99ee_i] = b[3'h4];
            M_left_mux2_s0[R_5b8f99ee_i] = b[2'h3];
            M_left_mux3_s0[R_5b8f99ee_i] = b[2'h2];
            M_left_mux4_s0[R_5b8f99ee_i] = b[1'h1];
            M_left_mux5_s0[R_5b8f99ee_i] = b[1'h0];
            M_right_mux1_s0[R_5b8f99ee_i] = b[3'h4];
            M_right_mux2_s0[R_5b8f99ee_i] = b[2'h3];
            M_right_mux3_s0[R_5b8f99ee_i] = b[2'h2];
            M_right_mux4_s0[R_5b8f99ee_i] = b[1'h1];
            M_right_mux5_s0[R_5b8f99ee_i] = b[1'h0];
            M_sra_mux1_s0[R_5b8f99ee_i] = b[3'h4];
            M_sra_mux2_s0[R_5b8f99ee_i] = b[2'h3];
            M_sra_mux3_s0[R_5b8f99ee_i] = b[2'h2];
            M_sra_mux4_s0[R_5b8f99ee_i] = b[1'h1];
            M_sra_mux5_s0[R_5b8f99ee_i] = b[1'h0];
        end
        
        case (alufn[1'h1:1'h0])
            2'h0: begin
                shift = M_left_mux5_out;
            end
            2'h1: begin
                shift = M_right_mux5_out;
            end
            2'h3: begin
                shift = M_sra_mux5_out;
            end
            default: begin
                shift = 1'h0;
            end
        endcase
    end
    
    
endmodule