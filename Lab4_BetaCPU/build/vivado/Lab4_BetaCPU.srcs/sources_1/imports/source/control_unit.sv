/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module control_unit (
        input wire clk,
        input wire irq,
        input wire z,
        input wire rst,
        input wire [5:0] opcode,
        input wire slowclk,
        input wire ia31,
        input wire lcd_spi_busy,
        input wire acc_spi_busy,
        output reg [2:0] pcsel,
        output reg wasel,
        output reg asel,
        output reg ra2sel,
        output reg bsel,
        output reg [5:0] alufn,
        output reg [1:0] wdsel,
        output reg werf,
        output reg lcd_enable,
        output reg acc_enable,
        output reg wr
    );
    localparam logic [63:0][16:0] CU_ROM = {{17'he002, 17'h636, 17'h616, 17'h606, 17'he002, 17'h566, 17'h5e6, 17'h586, 17'he002, 17'h776, 17'h756, 17'h736, 17'he002, 17'he002, 17'h416, 17'h406, 17'he002, 17'h236, 17'h216, 17'h206, 17'he002, 17'h166, 17'h1e6, 17'h186, 17'he002, 17'h376, 17'h356, 17'h336, 17'he002, 17'he002, 17'h16, 17'h6, 17'h11aa, 17'h11a2, 17'h11a2, 17'h200e, 17'h91a2, 17'h2002, 17'hc01, 17'h40a, 17'he002, 17'he002, 17'he002, 17'he002, 17'he002, 17'he002, 17'he002, 17'he002, 17'he002, 17'he002, 17'he002, 17'he002, 17'he002, 17'he002, 17'he002, 17'he002, 17'he002, 17'he002, 17'he002, 17'he002, 17'he002, 17'he002, 17'he002, 17'h0}};
    logic D_irq_sampler_d, D_irq_sampler_q = 1'h0;
    logic D_acc_wait_d, D_acc_wait_q = 1'h0;
    always @* begin
        D_irq_sampler_d = D_irq_sampler_q;
        D_acc_wait_d = D_acc_wait_q;
        
        if (~D_irq_sampler_q) begin
            D_irq_sampler_d = irq;
        end
        pcsel = CU_ROM[opcode][5'h10:4'he];
        wasel = CU_ROM[opcode][4'hd];
        asel = CU_ROM[opcode][4'hc];
        ra2sel = CU_ROM[opcode][4'hb];
        bsel = CU_ROM[opcode][4'ha];
        alufn = CU_ROM[opcode][4'h9:3'h4];
        wdsel = CU_ROM[opcode][2'h3:2'h2];
        werf = CU_ROM[opcode][1'h1];
        wr = CU_ROM[opcode][1'h0];
        if (opcode == 6'h1d && z == 1'h0) begin
            pcsel = 3'h0;
        end else begin
            if (opcode == 6'h1d && z == 1'h1) begin
                pcsel = 3'h1;
            end
        end
        if (opcode == 6'h1e && z == 1'h0) begin
            pcsel = 3'h1;
        end else begin
            if (opcode == 6'h1e && z == 1'h1) begin
                pcsel = 3'h0;
            end
        end
        if (D_irq_sampler_q & slowclk & ~ia31) begin
            pcsel = 3'h4;
            wasel = 1'h1;
            werf = 1'h1;
            wdsel = 2'h0;
            wr = 1'h0;
            D_irq_sampler_d = 1'h0;
        end
        lcd_enable = 1'h0;
        if (opcode == 6'h1a) begin
            if (lcd_spi_busy) begin
                pcsel = 3'h5;
                wasel = 1'h0;
                asel = 1'h0;
                ra2sel = 1'h0;
                bsel = 1'h0;
                alufn = 1'h0;
                wdsel = 1'h0;
                werf = 1'h0;
                wr = 1'h0;
            end else begin
                lcd_enable = 1'h1;
            end
        end
        acc_enable = 1'h0;
        if (opcode == 6'h1c) begin
            acc_enable = 1'h1;
            if (acc_spi_busy || D_acc_wait_q) begin
                pcsel = 3'h5;
                wasel = 1'h0;
                asel = 1'h0;
                ra2sel = 1'h0;
                bsel = 1'h0;
                alufn = 1'h0;
                wdsel = 1'h0;
                werf = 1'h0;
                wr = 1'h0;
                D_acc_wait_d = 1'h0;
            end else begin
                D_acc_wait_d = 1'h1;
            end
        end
        if (rst) begin
            wr = 1'h0;
            D_irq_sampler_d = 1'h0;
        end
    end
    
    
    always @(posedge (clk)) begin
        D_irq_sampler_q <= D_irq_sampler_d;
        D_acc_wait_q <= D_acc_wait_d;
        
    end
endmodule