/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module shifter (
        input wire [31:0] a,
        input wire [4:0] b,
        input wire [5:0] alufn,
        output reg [31:0] shift
    );
    logic [31:0] R_60b9ce75_i;
    logic [31:0] RR_60b9ce75_i;
    logic [31:0] R_35a276cd_i;
    logic [31:0] RR_35a276cd_i;
    logic [31:0] R_76c593e3_i;
    logic [31:0] RR_76c593e3_i;
    logic [31:0] R_6e1643c6_i;
    logic [31:0] RR_6e1643c6_i;
    logic [31:0] R_1ec0ea80_i;
    logic [31:0] RR_1ec0ea80_i;
    logic [31:0] R_478f7716_i;
    logic [31:0] RR_478f7716_i;
    logic [31:0] R_52d6cf9c_i;
    logic [31:0] RR_52d6cf9c_i;
    logic [31:0] R_74338ab5_i;
    logic [31:0] RR_74338ab5_i;
    logic [31:0] R_3f59a1ad_i;
    logic [31:0] RR_3f59a1ad_i;
    logic [31:0] R_33077c77_i;
    logic [31:0] RR_33077c77_i;
    logic [31:0] R_39ef8a7b_i;
    logic [31:0] RR_39ef8a7b_i;
    logic [31:0] R_41fdccc3_i;
    logic [31:0] RR_41fdccc3_i;
    logic [31:0] R_716a05f0_i;
    logic [31:0] RR_716a05f0_i;
    logic [31:0] R_2c30a766_i;
    logic [31:0] RR_2c30a766_i;
    logic [31:0] R_399c22a3_i;
    logic [31:0] RR_399c22a3_i;
    logic [31:0] R_4e338667_i;
    logic [31:0] RR_4e338667_i;
    logic [31:0] w;
    logic [31:0] x;
    logic [31:0] y;
    logic [31:0] z;
    logic [31:0] M_left_mux1_s0;
    logic [31:0][1:0] M_left_mux1_in;
    logic [31:0] M_left_mux1_out;
    
    genvar idx_0_483993155;
    
    generate
        for (idx_0_483993155 = 0; idx_0_483993155 < 32; idx_0_483993155 = idx_0_483993155 + 1) begin: forLoop_idx_0_483993155
            mux_2 left_mux1 (
                .s0(M_left_mux1_s0[idx_0_483993155]),
                .in(M_left_mux1_in[idx_0_483993155]),
                .out(M_left_mux1_out[idx_0_483993155])
            );
        end
    endgenerate
    
    
    logic [31:0] M_left_mux2_s0;
    logic [31:0][1:0] M_left_mux2_in;
    logic [31:0] M_left_mux2_out;
    
    genvar idx_0_402293830;
    
    generate
        for (idx_0_402293830 = 0; idx_0_402293830 < 32; idx_0_402293830 = idx_0_402293830 + 1) begin: forLoop_idx_0_402293830
            mux_2 left_mux2 (
                .s0(M_left_mux2_s0[idx_0_402293830]),
                .in(M_left_mux2_in[idx_0_402293830]),
                .out(M_left_mux2_out[idx_0_402293830])
            );
        end
    endgenerate
    
    
    logic [31:0] M_left_mux3_s0;
    logic [31:0][1:0] M_left_mux3_in;
    logic [31:0] M_left_mux3_out;
    
    genvar idx_0_1852825760;
    
    generate
        for (idx_0_1852825760 = 0; idx_0_1852825760 < 32; idx_0_1852825760 = idx_0_1852825760 + 1) begin: forLoop_idx_0_1852825760
            mux_2 left_mux3 (
                .s0(M_left_mux3_s0[idx_0_1852825760]),
                .in(M_left_mux3_in[idx_0_1852825760]),
                .out(M_left_mux3_out[idx_0_1852825760])
            );
        end
    endgenerate
    
    
    logic [31:0] M_left_mux4_s0;
    logic [31:0][1:0] M_left_mux4_in;
    logic [31:0] M_left_mux4_out;
    
    genvar idx_0_141079060;
    
    generate
        for (idx_0_141079060 = 0; idx_0_141079060 < 32; idx_0_141079060 = idx_0_141079060 + 1) begin: forLoop_idx_0_141079060
            mux_2 left_mux4 (
                .s0(M_left_mux4_s0[idx_0_141079060]),
                .in(M_left_mux4_in[idx_0_141079060]),
                .out(M_left_mux4_out[idx_0_141079060])
            );
        end
    endgenerate
    
    
    logic [31:0] M_left_mux5_s0;
    logic [31:0][1:0] M_left_mux5_in;
    logic [31:0] M_left_mux5_out;
    
    genvar idx_0_893550213;
    
    generate
        for (idx_0_893550213 = 0; idx_0_893550213 < 32; idx_0_893550213 = idx_0_893550213 + 1) begin: forLoop_idx_0_893550213
            mux_2 left_mux5 (
                .s0(M_left_mux5_s0[idx_0_893550213]),
                .in(M_left_mux5_in[idx_0_893550213]),
                .out(M_left_mux5_out[idx_0_893550213])
            );
        end
    endgenerate
    
    
    logic [31:0] wr;
    logic [31:0] xr;
    logic [31:0] yr;
    logic [31:0] zr;
    logic [31:0] M_right_mux1_s0;
    logic [31:0][1:0] M_right_mux1_in;
    logic [31:0] M_right_mux1_out;
    
    genvar idx_0_146750985;
    
    generate
        for (idx_0_146750985 = 0; idx_0_146750985 < 32; idx_0_146750985 = idx_0_146750985 + 1) begin: forLoop_idx_0_146750985
            mux_2 right_mux1 (
                .s0(M_right_mux1_s0[idx_0_146750985]),
                .in(M_right_mux1_in[idx_0_146750985]),
                .out(M_right_mux1_out[idx_0_146750985])
            );
        end
    endgenerate
    
    
    logic [31:0] M_right_mux2_s0;
    logic [31:0][1:0] M_right_mux2_in;
    logic [31:0] M_right_mux2_out;
    
    genvar idx_0_1979841459;
    
    generate
        for (idx_0_1979841459 = 0; idx_0_1979841459 < 32; idx_0_1979841459 = idx_0_1979841459 + 1) begin: forLoop_idx_0_1979841459
            mux_2 right_mux2 (
                .s0(M_right_mux2_s0[idx_0_1979841459]),
                .in(M_right_mux2_in[idx_0_1979841459]),
                .out(M_right_mux2_out[idx_0_1979841459])
            );
        end
    endgenerate
    
    
    logic [31:0] M_right_mux3_s0;
    logic [31:0][1:0] M_right_mux3_in;
    logic [31:0] M_right_mux3_out;
    
    genvar idx_0_2006742719;
    
    generate
        for (idx_0_2006742719 = 0; idx_0_2006742719 < 32; idx_0_2006742719 = idx_0_2006742719 + 1) begin: forLoop_idx_0_2006742719
            mux_2 right_mux3 (
                .s0(M_right_mux3_s0[idx_0_2006742719]),
                .in(M_right_mux3_in[idx_0_2006742719]),
                .out(M_right_mux3_out[idx_0_2006742719])
            );
        end
    endgenerate
    
    
    logic [31:0] M_right_mux4_s0;
    logic [31:0][1:0] M_right_mux4_in;
    logic [31:0] M_right_mux4_out;
    
    genvar idx_0_1335214855;
    
    generate
        for (idx_0_1335214855 = 0; idx_0_1335214855 < 32; idx_0_1335214855 = idx_0_1335214855 + 1) begin: forLoop_idx_0_1335214855
            mux_2 right_mux4 (
                .s0(M_right_mux4_s0[idx_0_1335214855]),
                .in(M_right_mux4_in[idx_0_1335214855]),
                .out(M_right_mux4_out[idx_0_1335214855])
            );
        end
    endgenerate
    
    
    logic [31:0] M_right_mux5_s0;
    logic [31:0][1:0] M_right_mux5_in;
    logic [31:0] M_right_mux5_out;
    
    genvar idx_0_2145773230;
    
    generate
        for (idx_0_2145773230 = 0; idx_0_2145773230 < 32; idx_0_2145773230 = idx_0_2145773230 + 1) begin: forLoop_idx_0_2145773230
            mux_2 right_mux5 (
                .s0(M_right_mux5_s0[idx_0_2145773230]),
                .in(M_right_mux5_in[idx_0_2145773230]),
                .out(M_right_mux5_out[idx_0_2145773230])
            );
        end
    endgenerate
    
    
    logic [31:0] wra;
    logic [31:0] xra;
    logic [31:0] yra;
    logic [31:0] zra;
    logic [31:0] M_sra_mux1_s0;
    logic [31:0][1:0] M_sra_mux1_in;
    logic [31:0] M_sra_mux1_out;
    
    genvar idx_0_2110616151;
    
    generate
        for (idx_0_2110616151 = 0; idx_0_2110616151 < 32; idx_0_2110616151 = idx_0_2110616151 + 1) begin: forLoop_idx_0_2110616151
            mux_2 sra_mux1 (
                .s0(M_sra_mux1_s0[idx_0_2110616151]),
                .in(M_sra_mux1_in[idx_0_2110616151]),
                .out(M_sra_mux1_out[idx_0_2110616151])
            );
        end
    endgenerate
    
    
    logic [31:0] M_sra_mux2_s0;
    logic [31:0][1:0] M_sra_mux2_in;
    logic [31:0] M_sra_mux2_out;
    
    genvar idx_0_1096596150;
    
    generate
        for (idx_0_1096596150 = 0; idx_0_1096596150 < 32; idx_0_1096596150 = idx_0_1096596150 + 1) begin: forLoop_idx_0_1096596150
            mux_2 sra_mux2 (
                .s0(M_sra_mux2_s0[idx_0_1096596150]),
                .in(M_sra_mux2_in[idx_0_1096596150]),
                .out(M_sra_mux2_out[idx_0_1096596150])
            );
        end
    endgenerate
    
    
    logic [31:0] M_sra_mux3_s0;
    logic [31:0][1:0] M_sra_mux3_in;
    logic [31:0] M_sra_mux3_out;
    
    genvar idx_0_353311112;
    
    generate
        for (idx_0_353311112 = 0; idx_0_353311112 < 32; idx_0_353311112 = idx_0_353311112 + 1) begin: forLoop_idx_0_353311112
            mux_2 sra_mux3 (
                .s0(M_sra_mux3_s0[idx_0_353311112]),
                .in(M_sra_mux3_in[idx_0_353311112]),
                .out(M_sra_mux3_out[idx_0_353311112])
            );
        end
    endgenerate
    
    
    logic [31:0] M_sra_mux4_s0;
    logic [31:0][1:0] M_sra_mux4_in;
    logic [31:0] M_sra_mux4_out;
    
    genvar idx_0_1849964231;
    
    generate
        for (idx_0_1849964231 = 0; idx_0_1849964231 < 32; idx_0_1849964231 = idx_0_1849964231 + 1) begin: forLoop_idx_0_1849964231
            mux_2 sra_mux4 (
                .s0(M_sra_mux4_s0[idx_0_1849964231]),
                .in(M_sra_mux4_in[idx_0_1849964231]),
                .out(M_sra_mux4_out[idx_0_1849964231])
            );
        end
    endgenerate
    
    
    logic [31:0] M_sra_mux5_s0;
    logic [31:0][1:0] M_sra_mux5_in;
    logic [31:0] M_sra_mux5_out;
    
    genvar idx_0_1637722020;
    
    generate
        for (idx_0_1637722020 = 0; idx_0_1637722020 < 32; idx_0_1637722020 = idx_0_1637722020 + 1) begin: forLoop_idx_0_1637722020
            mux_2 sra_mux5 (
                .s0(M_sra_mux5_s0[idx_0_1637722020]),
                .in(M_sra_mux5_in[idx_0_1637722020]),
                .out(M_sra_mux5_out[idx_0_1637722020])
            );
        end
    endgenerate
    
    
    always @* begin
        M_left_mux1_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux2_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux3_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux4_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux5_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux1_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux2_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux3_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux4_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux5_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux1_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux2_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux3_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux4_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux5_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux1_s0 = 32'h0;
        M_right_mux1_s0 = 32'h0;
        M_sra_mux1_s0 = 32'h0;
        M_left_mux2_s0 = 32'h0;
        M_right_mux2_s0 = 32'h0;
        M_sra_mux2_s0 = 32'h0;
        M_left_mux3_s0 = 32'h0;
        M_right_mux3_s0 = 32'h0;
        M_sra_mux3_s0 = 32'h0;
        M_left_mux4_s0 = 32'h0;
        M_right_mux4_s0 = 32'h0;
        M_sra_mux4_s0 = 32'h0;
        M_left_mux5_s0 = 32'h0;
        M_right_mux5_s0 = 32'h0;
        M_sra_mux5_s0 = 32'h0;
        w = 32'h0;
        x = 32'h0;
        y = 32'h0;
        z = 32'h0;
        wr = 32'h0;
        xr = 32'h0;
        yr = 32'h0;
        zr = 32'h0;
        wra = 32'h0;
        xra = 32'h0;
        yra = 32'h0;
        zra = 32'h0;
        if (alufn[1'h1:1'h0] == 2'h0) begin
            for (RR_60b9ce75_i = 0; RR_60b9ce75_i < 6'h20; RR_60b9ce75_i = RR_60b9ce75_i + 1) begin
        R_60b9ce75_i = (0) + RR_60b9ce75_i * (1);
                M_left_mux1_in[R_60b9ce75_i][1'h0] = a[R_60b9ce75_i];
                if (R_60b9ce75_i < 5'h10) begin
                    M_left_mux1_in[R_60b9ce75_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux1_in[R_60b9ce75_i][1'h1] = a[R_60b9ce75_i - 5'h10];
                end
            end
            w = M_left_mux1_out;
            for (RR_35a276cd_i = 0; RR_35a276cd_i < 6'h20; RR_35a276cd_i = RR_35a276cd_i + 1) begin
        R_35a276cd_i = (0) + RR_35a276cd_i * (1);
                M_left_mux2_in[R_35a276cd_i][1'h0] = w[R_35a276cd_i];
                if (R_35a276cd_i < 4'h8) begin
                    M_left_mux2_in[R_35a276cd_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux2_in[R_35a276cd_i][1'h1] = w[R_35a276cd_i - 4'h8];
                end
            end
            x = M_left_mux2_out;
            for (RR_76c593e3_i = 0; RR_76c593e3_i < 6'h20; RR_76c593e3_i = RR_76c593e3_i + 1) begin
        R_76c593e3_i = (0) + RR_76c593e3_i * (1);
                M_left_mux3_in[R_76c593e3_i][1'h0] = x[R_76c593e3_i];
                if (R_76c593e3_i < 3'h4) begin
                    M_left_mux3_in[R_76c593e3_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux3_in[R_76c593e3_i][1'h1] = x[R_76c593e3_i - 3'h4];
                end
            end
            y = M_left_mux3_out;
            for (RR_6e1643c6_i = 0; RR_6e1643c6_i < 6'h20; RR_6e1643c6_i = RR_6e1643c6_i + 1) begin
        R_6e1643c6_i = (0) + RR_6e1643c6_i * (1);
                M_left_mux4_in[R_6e1643c6_i][1'h0] = y[R_6e1643c6_i];
                if (R_6e1643c6_i < 2'h2) begin
                    M_left_mux4_in[R_6e1643c6_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux4_in[R_6e1643c6_i][1'h1] = y[R_6e1643c6_i - 2'h2];
                end
            end
            z = M_left_mux4_out;
            for (RR_1ec0ea80_i = 0; RR_1ec0ea80_i < 6'h20; RR_1ec0ea80_i = RR_1ec0ea80_i + 1) begin
        R_1ec0ea80_i = (0) + RR_1ec0ea80_i * (1);
                M_left_mux5_in[R_1ec0ea80_i][1'h0] = z[R_1ec0ea80_i];
                if (R_1ec0ea80_i < 1'h1) begin
                    M_left_mux5_in[R_1ec0ea80_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux5_in[R_1ec0ea80_i][1'h1] = z[R_1ec0ea80_i - 1'h1];
                end
            end
        end else begin
            if (alufn[1'h1:1'h0] == 2'h1) begin
                for (RR_478f7716_i = 0; RR_478f7716_i < 6'h20; RR_478f7716_i = RR_478f7716_i + 1) begin
          R_478f7716_i = (0) + RR_478f7716_i * (1);
                    M_right_mux1_in[R_478f7716_i][1'h0] = a[R_478f7716_i];
                    if (R_478f7716_i < 5'h10) begin
                        M_right_mux1_in[R_478f7716_i][1'h1] = a[5'h10 + R_478f7716_i];
                    end else begin
                        M_right_mux1_in[R_478f7716_i][1'h1] = 1'h0;
                    end
                end
                wr = M_right_mux1_out;
                for (RR_52d6cf9c_i = 0; RR_52d6cf9c_i < 6'h20; RR_52d6cf9c_i = RR_52d6cf9c_i + 1) begin
          R_52d6cf9c_i = (0) + RR_52d6cf9c_i * (1);
                    M_right_mux2_in[R_52d6cf9c_i][1'h0] = wr[R_52d6cf9c_i];
                    if (R_52d6cf9c_i < 5'h18) begin
                        M_right_mux2_in[R_52d6cf9c_i][1'h1] = wr[4'h8 + R_52d6cf9c_i];
                    end else begin
                        M_right_mux2_in[R_52d6cf9c_i][1'h1] = 1'h0;
                    end
                end
                xr = M_right_mux2_out;
                for (RR_74338ab5_i = 0; RR_74338ab5_i < 6'h20; RR_74338ab5_i = RR_74338ab5_i + 1) begin
          R_74338ab5_i = (0) + RR_74338ab5_i * (1);
                    M_right_mux3_in[R_74338ab5_i][1'h0] = xr[R_74338ab5_i];
                    if (R_74338ab5_i < 5'h1c) begin
                        M_right_mux3_in[R_74338ab5_i][1'h1] = xr[3'h4 + R_74338ab5_i];
                    end else begin
                        M_right_mux3_in[R_74338ab5_i][1'h1] = 1'h0;
                    end
                end
                yr = M_right_mux3_out;
                for (RR_3f59a1ad_i = 0; RR_3f59a1ad_i < 6'h20; RR_3f59a1ad_i = RR_3f59a1ad_i + 1) begin
          R_3f59a1ad_i = (0) + RR_3f59a1ad_i * (1);
                    M_right_mux4_in[R_3f59a1ad_i][1'h0] = yr[R_3f59a1ad_i];
                    if (R_3f59a1ad_i < 5'h1e) begin
                        M_right_mux4_in[R_3f59a1ad_i][1'h1] = yr[2'h2 + R_3f59a1ad_i];
                    end else begin
                        M_right_mux4_in[R_3f59a1ad_i][1'h1] = 1'h0;
                    end
                end
                zr = M_right_mux4_out;
                for (RR_33077c77_i = 0; RR_33077c77_i < 6'h20; RR_33077c77_i = RR_33077c77_i + 1) begin
          R_33077c77_i = (0) + RR_33077c77_i * (1);
                    M_right_mux5_in[R_33077c77_i][1'h0] = zr[R_33077c77_i];
                    if (R_33077c77_i < 5'h1f) begin
                        M_right_mux5_in[R_33077c77_i][1'h1] = zr[1'h1 + R_33077c77_i];
                    end else begin
                        M_right_mux5_in[R_33077c77_i][1'h1] = 1'h0;
                    end
                end
            end else begin
                if (alufn[1'h1:1'h0] == 2'h3) begin
                    for (RR_39ef8a7b_i = 0; RR_39ef8a7b_i < 6'h20; RR_39ef8a7b_i = RR_39ef8a7b_i + 1) begin
            R_39ef8a7b_i = (0) + RR_39ef8a7b_i * (1);
                        M_sra_mux1_in[R_39ef8a7b_i][1'h0] = a[R_39ef8a7b_i];
                        if (R_39ef8a7b_i < 5'h10) begin
                            M_sra_mux1_in[R_39ef8a7b_i][1'h1] = a[5'h10 + R_39ef8a7b_i];
                        end else begin
                            M_sra_mux1_in[R_39ef8a7b_i][1'h1] = a[5'h1f];
                        end
                        wra[R_39ef8a7b_i] = M_sra_mux1_out[R_39ef8a7b_i];
                    end
                    for (RR_41fdccc3_i = 0; RR_41fdccc3_i < 6'h20; RR_41fdccc3_i = RR_41fdccc3_i + 1) begin
            R_41fdccc3_i = (0) + RR_41fdccc3_i * (1);
                        M_sra_mux2_in[R_41fdccc3_i][1'h0] = wra[R_41fdccc3_i];
                        if (R_41fdccc3_i < 5'h18) begin
                            M_sra_mux2_in[R_41fdccc3_i][1'h1] = wra[4'h8 + R_41fdccc3_i];
                        end else begin
                            M_sra_mux2_in[R_41fdccc3_i][1'h1] = a[5'h1f];
                        end
                        M_sra_mux2_s0[R_41fdccc3_i] = b[2'h3];
                        xra[R_41fdccc3_i] = M_sra_mux2_out[R_41fdccc3_i];
                    end
                    for (RR_716a05f0_i = 0; RR_716a05f0_i < 6'h20; RR_716a05f0_i = RR_716a05f0_i + 1) begin
            R_716a05f0_i = (0) + RR_716a05f0_i * (1);
                        M_sra_mux3_in[R_716a05f0_i][1'h0] = xra[R_716a05f0_i];
                        if (R_716a05f0_i < 5'h1c) begin
                            M_sra_mux3_in[R_716a05f0_i][1'h1] = xra[3'h4 + R_716a05f0_i];
                        end else begin
                            M_sra_mux3_in[R_716a05f0_i][1'h1] = a[5'h1f];
                        end
                        M_sra_mux3_s0[R_716a05f0_i] = b[2'h2];
                        yra[R_716a05f0_i] = M_sra_mux3_out[R_716a05f0_i];
                    end
                    for (RR_2c30a766_i = 0; RR_2c30a766_i < 6'h20; RR_2c30a766_i = RR_2c30a766_i + 1) begin
            R_2c30a766_i = (0) + RR_2c30a766_i * (1);
                        M_sra_mux4_in[R_2c30a766_i][1'h0] = yra[R_2c30a766_i];
                        if (R_2c30a766_i < 5'h1e) begin
                            M_sra_mux4_in[R_2c30a766_i][1'h1] = yra[2'h2 + R_2c30a766_i];
                        end else begin
                            M_sra_mux4_in[R_2c30a766_i][1'h1] = a[5'h1f];
                        end
                        M_sra_mux4_s0[R_2c30a766_i] = b[1'h1];
                        zra[R_2c30a766_i] = M_sra_mux4_out[R_2c30a766_i];
                    end
                    for (RR_399c22a3_i = 0; RR_399c22a3_i < 6'h20; RR_399c22a3_i = RR_399c22a3_i + 1) begin
            R_399c22a3_i = (0) + RR_399c22a3_i * (1);
                        M_sra_mux5_in[R_399c22a3_i][1'h0] = zra[R_399c22a3_i];
                        if (R_399c22a3_i < 5'h1f) begin
                            M_sra_mux5_in[R_399c22a3_i][1'h1] = zra[1'h1 + R_399c22a3_i];
                        end else begin
                            M_sra_mux5_in[R_399c22a3_i][1'h1] = a[5'h1f];
                        end
                        M_sra_mux5_s0[R_399c22a3_i] = b[1'h0];
                    end
                end
            end
        end
        for (RR_4e338667_i = 0; RR_4e338667_i < 6'h20; RR_4e338667_i = RR_4e338667_i + 1) begin
      R_4e338667_i = (0) + RR_4e338667_i * (1);
            M_left_mux1_s0[R_4e338667_i] = b[3'h4];
            M_left_mux2_s0[R_4e338667_i] = b[2'h3];
            M_left_mux3_s0[R_4e338667_i] = b[2'h2];
            M_left_mux4_s0[R_4e338667_i] = b[1'h1];
            M_left_mux5_s0[R_4e338667_i] = b[1'h0];
            M_right_mux1_s0[R_4e338667_i] = b[3'h4];
            M_right_mux2_s0[R_4e338667_i] = b[2'h3];
            M_right_mux3_s0[R_4e338667_i] = b[2'h2];
            M_right_mux4_s0[R_4e338667_i] = b[1'h1];
            M_right_mux5_s0[R_4e338667_i] = b[1'h0];
            M_sra_mux1_s0[R_4e338667_i] = b[3'h4];
            M_sra_mux2_s0[R_4e338667_i] = b[2'h3];
            M_sra_mux3_s0[R_4e338667_i] = b[2'h2];
            M_sra_mux4_s0[R_4e338667_i] = b[1'h1];
            M_sra_mux5_s0[R_4e338667_i] = b[1'h0];
        end
        
        case (alufn[1'h1:1'h0])
            2'h0: begin
                shift = M_left_mux5_out;
            end
            2'h1: begin
                shift = M_right_mux5_out;
            end
            2'h3: begin
                shift = M_sra_mux5_out;
            end
            default: begin
                shift = 1'h0;
            end
        endcase
    end
    
    
endmodule