/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module shifter (
        input wire [31:0] a,
        input wire [4:0] b,
        input wire [5:0] alufn,
        output reg [31:0] shift
    );
    logic [31:0] R_7e2b4bf5_i;
    logic [31:0] RR_7e2b4bf5_i;
    logic [31:0] R_08adcde0_i;
    logic [31:0] RR_08adcde0_i;
    logic [31:0] R_0a34aac0_i;
    logic [31:0] RR_0a34aac0_i;
    logic [31:0] R_7a684ebb_i;
    logic [31:0] RR_7a684ebb_i;
    logic [31:0] R_416e56d9_i;
    logic [31:0] RR_416e56d9_i;
    logic [31:0] R_52e185e3_i;
    logic [31:0] RR_52e185e3_i;
    logic [31:0] R_78be4d9b_i;
    logic [31:0] RR_78be4d9b_i;
    logic [31:0] R_0d94d5e0_i;
    logic [31:0] RR_0d94d5e0_i;
    logic [31:0] R_693a3f16_i;
    logic [31:0] RR_693a3f16_i;
    logic [31:0] R_196a393f_i;
    logic [31:0] RR_196a393f_i;
    logic [31:0] R_396d406b_i;
    logic [31:0] RR_396d406b_i;
    logic [31:0] R_32a71c68_i;
    logic [31:0] RR_32a71c68_i;
    logic [31:0] R_2badbebe_i;
    logic [31:0] RR_2badbebe_i;
    logic [31:0] R_39c4b82f_i;
    logic [31:0] RR_39c4b82f_i;
    logic [31:0] R_4fba0f25_i;
    logic [31:0] RR_4fba0f25_i;
    logic [31:0] R_040cddcf_i;
    logic [31:0] RR_040cddcf_i;
    logic [31:0] w;
    logic [31:0] x;
    logic [31:0] y;
    logic [31:0] z;
    logic [31:0] M_left_mux1_s0;
    logic [31:0][1:0] M_left_mux1_in;
    logic [31:0] M_left_mux1_out;
    
    genvar idx_0_1321789108;
    
    generate
        for (idx_0_1321789108 = 0; idx_0_1321789108 < 32; idx_0_1321789108 = idx_0_1321789108 + 1) begin: forLoop_idx_0_1321789108
            mux_2 left_mux1 (
                .s0(M_left_mux1_s0[idx_0_1321789108]),
                .in(M_left_mux1_in[idx_0_1321789108]),
                .out(M_left_mux1_out[idx_0_1321789108])
            );
        end
    endgenerate
    
    
    logic [31:0] M_left_mux2_s0;
    logic [31:0][1:0] M_left_mux2_in;
    logic [31:0] M_left_mux2_out;
    
    genvar idx_0_57282698;
    
    generate
        for (idx_0_57282698 = 0; idx_0_57282698 < 32; idx_0_57282698 = idx_0_57282698 + 1) begin: forLoop_idx_0_57282698
            mux_2 left_mux2 (
                .s0(M_left_mux2_s0[idx_0_57282698]),
                .in(M_left_mux2_in[idx_0_57282698]),
                .out(M_left_mux2_out[idx_0_57282698])
            );
        end
    endgenerate
    
    
    logic [31:0] M_left_mux3_s0;
    logic [31:0][1:0] M_left_mux3_in;
    logic [31:0] M_left_mux3_out;
    
    genvar idx_0_558233518;
    
    generate
        for (idx_0_558233518 = 0; idx_0_558233518 < 32; idx_0_558233518 = idx_0_558233518 + 1) begin: forLoop_idx_0_558233518
            mux_2 left_mux3 (
                .s0(M_left_mux3_s0[idx_0_558233518]),
                .in(M_left_mux3_in[idx_0_558233518]),
                .out(M_left_mux3_out[idx_0_558233518])
            );
        end
    endgenerate
    
    
    logic [31:0] M_left_mux4_s0;
    logic [31:0][1:0] M_left_mux4_in;
    logic [31:0] M_left_mux4_out;
    
    genvar idx_0_853383512;
    
    generate
        for (idx_0_853383512 = 0; idx_0_853383512 < 32; idx_0_853383512 = idx_0_853383512 + 1) begin: forLoop_idx_0_853383512
            mux_2 left_mux4 (
                .s0(M_left_mux4_s0[idx_0_853383512]),
                .in(M_left_mux4_in[idx_0_853383512]),
                .out(M_left_mux4_out[idx_0_853383512])
            );
        end
    endgenerate
    
    
    logic [31:0] M_left_mux5_s0;
    logic [31:0][1:0] M_left_mux5_in;
    logic [31:0] M_left_mux5_out;
    
    genvar idx_0_1355957694;
    
    generate
        for (idx_0_1355957694 = 0; idx_0_1355957694 < 32; idx_0_1355957694 = idx_0_1355957694 + 1) begin: forLoop_idx_0_1355957694
            mux_2 left_mux5 (
                .s0(M_left_mux5_s0[idx_0_1355957694]),
                .in(M_left_mux5_in[idx_0_1355957694]),
                .out(M_left_mux5_out[idx_0_1355957694])
            );
        end
    endgenerate
    
    
    logic [31:0] wr;
    logic [31:0] xr;
    logic [31:0] yr;
    logic [31:0] zr;
    logic [31:0] M_right_mux1_s0;
    logic [31:0][1:0] M_right_mux1_in;
    logic [31:0] M_right_mux1_out;
    
    genvar idx_0_1586531316;
    
    generate
        for (idx_0_1586531316 = 0; idx_0_1586531316 < 32; idx_0_1586531316 = idx_0_1586531316 + 1) begin: forLoop_idx_0_1586531316
            mux_2 right_mux1 (
                .s0(M_right_mux1_s0[idx_0_1586531316]),
                .in(M_right_mux1_in[idx_0_1586531316]),
                .out(M_right_mux1_out[idx_0_1586531316])
            );
        end
    endgenerate
    
    
    logic [31:0] M_right_mux2_s0;
    logic [31:0][1:0] M_right_mux2_in;
    logic [31:0] M_right_mux2_out;
    
    genvar idx_0_1352734488;
    
    generate
        for (idx_0_1352734488 = 0; idx_0_1352734488 < 32; idx_0_1352734488 = idx_0_1352734488 + 1) begin: forLoop_idx_0_1352734488
            mux_2 right_mux2 (
                .s0(M_right_mux2_s0[idx_0_1352734488]),
                .in(M_right_mux2_in[idx_0_1352734488]),
                .out(M_right_mux2_out[idx_0_1352734488])
            );
        end
    endgenerate
    
    
    logic [31:0] M_right_mux3_s0;
    logic [31:0][1:0] M_right_mux3_in;
    logic [31:0] M_right_mux3_out;
    
    genvar idx_0_18148856;
    
    generate
        for (idx_0_18148856 = 0; idx_0_18148856 < 32; idx_0_18148856 = idx_0_18148856 + 1) begin: forLoop_idx_0_18148856
            mux_2 right_mux3 (
                .s0(M_right_mux3_s0[idx_0_18148856]),
                .in(M_right_mux3_in[idx_0_18148856]),
                .out(M_right_mux3_out[idx_0_18148856])
            );
        end
    endgenerate
    
    
    logic [31:0] M_right_mux4_s0;
    logic [31:0][1:0] M_right_mux4_in;
    logic [31:0] M_right_mux4_out;
    
    genvar idx_0_1284703000;
    
    generate
        for (idx_0_1284703000 = 0; idx_0_1284703000 < 32; idx_0_1284703000 = idx_0_1284703000 + 1) begin: forLoop_idx_0_1284703000
            mux_2 right_mux4 (
                .s0(M_right_mux4_s0[idx_0_1284703000]),
                .in(M_right_mux4_in[idx_0_1284703000]),
                .out(M_right_mux4_out[idx_0_1284703000])
            );
        end
    endgenerate
    
    
    logic [31:0] M_right_mux5_s0;
    logic [31:0][1:0] M_right_mux5_in;
    logic [31:0] M_right_mux5_out;
    
    genvar idx_0_1995584676;
    
    generate
        for (idx_0_1995584676 = 0; idx_0_1995584676 < 32; idx_0_1995584676 = idx_0_1995584676 + 1) begin: forLoop_idx_0_1995584676
            mux_2 right_mux5 (
                .s0(M_right_mux5_s0[idx_0_1995584676]),
                .in(M_right_mux5_in[idx_0_1995584676]),
                .out(M_right_mux5_out[idx_0_1995584676])
            );
        end
    endgenerate
    
    
    logic [31:0] wra;
    logic [31:0] xra;
    logic [31:0] yra;
    logic [31:0] zra;
    logic [31:0] M_sra_mux1_s0;
    logic [31:0][1:0] M_sra_mux1_in;
    logic [31:0] M_sra_mux1_out;
    
    genvar idx_0_239450058;
    
    generate
        for (idx_0_239450058 = 0; idx_0_239450058 < 32; idx_0_239450058 = idx_0_239450058 + 1) begin: forLoop_idx_0_239450058
            mux_2 sra_mux1 (
                .s0(M_sra_mux1_s0[idx_0_239450058]),
                .in(M_sra_mux1_in[idx_0_239450058]),
                .out(M_sra_mux1_out[idx_0_239450058])
            );
        end
    endgenerate
    
    
    logic [31:0] M_sra_mux2_s0;
    logic [31:0][1:0] M_sra_mux2_in;
    logic [31:0] M_sra_mux2_out;
    
    genvar idx_0_455559565;
    
    generate
        for (idx_0_455559565 = 0; idx_0_455559565 < 32; idx_0_455559565 = idx_0_455559565 + 1) begin: forLoop_idx_0_455559565
            mux_2 sra_mux2 (
                .s0(M_sra_mux2_s0[idx_0_455559565]),
                .in(M_sra_mux2_in[idx_0_455559565]),
                .out(M_sra_mux2_out[idx_0_455559565])
            );
        end
    endgenerate
    
    
    logic [31:0] M_sra_mux3_s0;
    logic [31:0][1:0] M_sra_mux3_in;
    logic [31:0] M_sra_mux3_out;
    
    genvar idx_0_1128111364;
    
    generate
        for (idx_0_1128111364 = 0; idx_0_1128111364 < 32; idx_0_1128111364 = idx_0_1128111364 + 1) begin: forLoop_idx_0_1128111364
            mux_2 sra_mux3 (
                .s0(M_sra_mux3_s0[idx_0_1128111364]),
                .in(M_sra_mux3_in[idx_0_1128111364]),
                .out(M_sra_mux3_out[idx_0_1128111364])
            );
        end
    endgenerate
    
    
    logic [31:0] M_sra_mux4_s0;
    logic [31:0][1:0] M_sra_mux4_in;
    logic [31:0] M_sra_mux4_out;
    
    genvar idx_0_1238163007;
    
    generate
        for (idx_0_1238163007 = 0; idx_0_1238163007 < 32; idx_0_1238163007 = idx_0_1238163007 + 1) begin: forLoop_idx_0_1238163007
            mux_2 sra_mux4 (
                .s0(M_sra_mux4_s0[idx_0_1238163007]),
                .in(M_sra_mux4_in[idx_0_1238163007]),
                .out(M_sra_mux4_out[idx_0_1238163007])
            );
        end
    endgenerate
    
    
    logic [31:0] M_sra_mux5_s0;
    logic [31:0][1:0] M_sra_mux5_in;
    logic [31:0] M_sra_mux5_out;
    
    genvar idx_0_707901301;
    
    generate
        for (idx_0_707901301 = 0; idx_0_707901301 < 32; idx_0_707901301 = idx_0_707901301 + 1) begin: forLoop_idx_0_707901301
            mux_2 sra_mux5 (
                .s0(M_sra_mux5_s0[idx_0_707901301]),
                .in(M_sra_mux5_in[idx_0_707901301]),
                .out(M_sra_mux5_out[idx_0_707901301])
            );
        end
    endgenerate
    
    
    always @* begin
        M_left_mux1_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux2_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux3_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux4_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux5_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux1_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux2_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux3_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux4_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux5_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux1_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux2_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux3_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux4_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux5_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux1_s0 = 32'h0;
        M_right_mux1_s0 = 32'h0;
        M_sra_mux1_s0 = 32'h0;
        M_left_mux2_s0 = 32'h0;
        M_right_mux2_s0 = 32'h0;
        M_sra_mux2_s0 = 32'h0;
        M_left_mux3_s0 = 32'h0;
        M_right_mux3_s0 = 32'h0;
        M_sra_mux3_s0 = 32'h0;
        M_left_mux4_s0 = 32'h0;
        M_right_mux4_s0 = 32'h0;
        M_sra_mux4_s0 = 32'h0;
        M_left_mux5_s0 = 32'h0;
        M_right_mux5_s0 = 32'h0;
        M_sra_mux5_s0 = 32'h0;
        w = 32'h0;
        x = 32'h0;
        y = 32'h0;
        z = 32'h0;
        wr = 32'h0;
        xr = 32'h0;
        yr = 32'h0;
        zr = 32'h0;
        wra = 32'h0;
        xra = 32'h0;
        yra = 32'h0;
        zra = 32'h0;
        if (alufn[1'h1:1'h0] == 2'h0) begin
            for (RR_7e2b4bf5_i = 0; RR_7e2b4bf5_i < 6'h20; RR_7e2b4bf5_i = RR_7e2b4bf5_i + 1) begin
        R_7e2b4bf5_i = (0) + RR_7e2b4bf5_i * (1);
                M_left_mux1_in[R_7e2b4bf5_i][1'h0] = a[R_7e2b4bf5_i];
                if (R_7e2b4bf5_i < 5'h10) begin
                    M_left_mux1_in[R_7e2b4bf5_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux1_in[R_7e2b4bf5_i][1'h1] = a[R_7e2b4bf5_i - 5'h10];
                end
            end
            w = M_left_mux1_out;
            for (RR_08adcde0_i = 0; RR_08adcde0_i < 6'h20; RR_08adcde0_i = RR_08adcde0_i + 1) begin
        R_08adcde0_i = (0) + RR_08adcde0_i * (1);
                M_left_mux2_in[R_08adcde0_i][1'h0] = w[R_08adcde0_i];
                if (R_08adcde0_i < 4'h8) begin
                    M_left_mux2_in[R_08adcde0_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux2_in[R_08adcde0_i][1'h1] = w[R_08adcde0_i - 4'h8];
                end
            end
            x = M_left_mux2_out;
            for (RR_0a34aac0_i = 0; RR_0a34aac0_i < 6'h20; RR_0a34aac0_i = RR_0a34aac0_i + 1) begin
        R_0a34aac0_i = (0) + RR_0a34aac0_i * (1);
                M_left_mux3_in[R_0a34aac0_i][1'h0] = x[R_0a34aac0_i];
                if (R_0a34aac0_i < 3'h4) begin
                    M_left_mux3_in[R_0a34aac0_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux3_in[R_0a34aac0_i][1'h1] = x[R_0a34aac0_i - 3'h4];
                end
            end
            y = M_left_mux3_out;
            for (RR_7a684ebb_i = 0; RR_7a684ebb_i < 6'h20; RR_7a684ebb_i = RR_7a684ebb_i + 1) begin
        R_7a684ebb_i = (0) + RR_7a684ebb_i * (1);
                M_left_mux4_in[R_7a684ebb_i][1'h0] = y[R_7a684ebb_i];
                if (R_7a684ebb_i < 2'h2) begin
                    M_left_mux4_in[R_7a684ebb_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux4_in[R_7a684ebb_i][1'h1] = y[R_7a684ebb_i - 2'h2];
                end
            end
            z = M_left_mux4_out;
            for (RR_416e56d9_i = 0; RR_416e56d9_i < 6'h20; RR_416e56d9_i = RR_416e56d9_i + 1) begin
        R_416e56d9_i = (0) + RR_416e56d9_i * (1);
                M_left_mux5_in[R_416e56d9_i][1'h0] = z[R_416e56d9_i];
                if (R_416e56d9_i < 1'h1) begin
                    M_left_mux5_in[R_416e56d9_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux5_in[R_416e56d9_i][1'h1] = z[R_416e56d9_i - 1'h1];
                end
            end
        end else begin
            if (alufn[1'h1:1'h0] == 2'h1) begin
                for (RR_52e185e3_i = 0; RR_52e185e3_i < 6'h20; RR_52e185e3_i = RR_52e185e3_i + 1) begin
          R_52e185e3_i = (0) + RR_52e185e3_i * (1);
                    M_right_mux1_in[R_52e185e3_i][1'h0] = a[R_52e185e3_i];
                    if (R_52e185e3_i < 5'h10) begin
                        M_right_mux1_in[R_52e185e3_i][1'h1] = a[5'h10 + R_52e185e3_i];
                    end else begin
                        M_right_mux1_in[R_52e185e3_i][1'h1] = 1'h0;
                    end
                end
                wr = M_right_mux1_out;
                for (RR_78be4d9b_i = 0; RR_78be4d9b_i < 6'h20; RR_78be4d9b_i = RR_78be4d9b_i + 1) begin
          R_78be4d9b_i = (0) + RR_78be4d9b_i * (1);
                    M_right_mux2_in[R_78be4d9b_i][1'h0] = wr[R_78be4d9b_i];
                    if (R_78be4d9b_i < 5'h18) begin
                        M_right_mux2_in[R_78be4d9b_i][1'h1] = wr[4'h8 + R_78be4d9b_i];
                    end else begin
                        M_right_mux2_in[R_78be4d9b_i][1'h1] = 1'h0;
                    end
                end
                xr = M_right_mux2_out;
                for (RR_0d94d5e0_i = 0; RR_0d94d5e0_i < 6'h20; RR_0d94d5e0_i = RR_0d94d5e0_i + 1) begin
          R_0d94d5e0_i = (0) + RR_0d94d5e0_i * (1);
                    M_right_mux3_in[R_0d94d5e0_i][1'h0] = xr[R_0d94d5e0_i];
                    if (R_0d94d5e0_i < 5'h1c) begin
                        M_right_mux3_in[R_0d94d5e0_i][1'h1] = xr[3'h4 + R_0d94d5e0_i];
                    end else begin
                        M_right_mux3_in[R_0d94d5e0_i][1'h1] = 1'h0;
                    end
                end
                yr = M_right_mux3_out;
                for (RR_693a3f16_i = 0; RR_693a3f16_i < 6'h20; RR_693a3f16_i = RR_693a3f16_i + 1) begin
          R_693a3f16_i = (0) + RR_693a3f16_i * (1);
                    M_right_mux4_in[R_693a3f16_i][1'h0] = yr[R_693a3f16_i];
                    if (R_693a3f16_i < 5'h1e) begin
                        M_right_mux4_in[R_693a3f16_i][1'h1] = yr[2'h2 + R_693a3f16_i];
                    end else begin
                        M_right_mux4_in[R_693a3f16_i][1'h1] = 1'h0;
                    end
                end
                zr = M_right_mux4_out;
                for (RR_196a393f_i = 0; RR_196a393f_i < 6'h20; RR_196a393f_i = RR_196a393f_i + 1) begin
          R_196a393f_i = (0) + RR_196a393f_i * (1);
                    M_right_mux5_in[R_196a393f_i][1'h0] = zr[R_196a393f_i];
                    if (R_196a393f_i < 5'h1f) begin
                        M_right_mux5_in[R_196a393f_i][1'h1] = zr[1'h1 + R_196a393f_i];
                    end else begin
                        M_right_mux5_in[R_196a393f_i][1'h1] = 1'h0;
                    end
                end
            end else begin
                if (alufn[1'h1:1'h0] == 2'h3) begin
                    for (RR_396d406b_i = 0; RR_396d406b_i < 6'h20; RR_396d406b_i = RR_396d406b_i + 1) begin
            R_396d406b_i = (0) + RR_396d406b_i * (1);
                        M_sra_mux1_in[R_396d406b_i][1'h0] = a[R_396d406b_i];
                        if (R_396d406b_i < 5'h10) begin
                            M_sra_mux1_in[R_396d406b_i][1'h1] = a[5'h10 + R_396d406b_i];
                        end else begin
                            M_sra_mux1_in[R_396d406b_i][1'h1] = a[5'h1f];
                        end
                        wra[R_396d406b_i] = M_sra_mux1_out[R_396d406b_i];
                    end
                    for (RR_32a71c68_i = 0; RR_32a71c68_i < 6'h20; RR_32a71c68_i = RR_32a71c68_i + 1) begin
            R_32a71c68_i = (0) + RR_32a71c68_i * (1);
                        M_sra_mux2_in[R_32a71c68_i][1'h0] = wra[R_32a71c68_i];
                        if (R_32a71c68_i < 5'h18) begin
                            M_sra_mux2_in[R_32a71c68_i][1'h1] = wra[4'h8 + R_32a71c68_i];
                        end else begin
                            M_sra_mux2_in[R_32a71c68_i][1'h1] = a[5'h1f];
                        end
                        M_sra_mux2_s0[R_32a71c68_i] = b[2'h3];
                        xra[R_32a71c68_i] = M_sra_mux2_out[R_32a71c68_i];
                    end
                    for (RR_2badbebe_i = 0; RR_2badbebe_i < 6'h20; RR_2badbebe_i = RR_2badbebe_i + 1) begin
            R_2badbebe_i = (0) + RR_2badbebe_i * (1);
                        M_sra_mux3_in[R_2badbebe_i][1'h0] = xra[R_2badbebe_i];
                        if (R_2badbebe_i < 5'h1c) begin
                            M_sra_mux3_in[R_2badbebe_i][1'h1] = xra[3'h4 + R_2badbebe_i];
                        end else begin
                            M_sra_mux3_in[R_2badbebe_i][1'h1] = a[5'h1f];
                        end
                        M_sra_mux3_s0[R_2badbebe_i] = b[2'h2];
                        yra[R_2badbebe_i] = M_sra_mux3_out[R_2badbebe_i];
                    end
                    for (RR_39c4b82f_i = 0; RR_39c4b82f_i < 6'h20; RR_39c4b82f_i = RR_39c4b82f_i + 1) begin
            R_39c4b82f_i = (0) + RR_39c4b82f_i * (1);
                        M_sra_mux4_in[R_39c4b82f_i][1'h0] = yra[R_39c4b82f_i];
                        if (R_39c4b82f_i < 5'h1e) begin
                            M_sra_mux4_in[R_39c4b82f_i][1'h1] = yra[2'h2 + R_39c4b82f_i];
                        end else begin
                            M_sra_mux4_in[R_39c4b82f_i][1'h1] = a[5'h1f];
                        end
                        M_sra_mux4_s0[R_39c4b82f_i] = b[1'h1];
                        zra[R_39c4b82f_i] = M_sra_mux4_out[R_39c4b82f_i];
                    end
                    for (RR_4fba0f25_i = 0; RR_4fba0f25_i < 6'h20; RR_4fba0f25_i = RR_4fba0f25_i + 1) begin
            R_4fba0f25_i = (0) + RR_4fba0f25_i * (1);
                        M_sra_mux5_in[R_4fba0f25_i][1'h0] = zra[R_4fba0f25_i];
                        if (R_4fba0f25_i < 5'h1f) begin
                            M_sra_mux5_in[R_4fba0f25_i][1'h1] = zra[1'h1 + R_4fba0f25_i];
                        end else begin
                            M_sra_mux5_in[R_4fba0f25_i][1'h1] = a[5'h1f];
                        end
                        M_sra_mux5_s0[R_4fba0f25_i] = b[1'h0];
                    end
                end
            end
        end
        for (RR_040cddcf_i = 0; RR_040cddcf_i < 6'h20; RR_040cddcf_i = RR_040cddcf_i + 1) begin
      R_040cddcf_i = (0) + RR_040cddcf_i * (1);
            M_left_mux1_s0[R_040cddcf_i] = b[3'h4];
            M_left_mux2_s0[R_040cddcf_i] = b[2'h3];
            M_left_mux3_s0[R_040cddcf_i] = b[2'h2];
            M_left_mux4_s0[R_040cddcf_i] = b[1'h1];
            M_left_mux5_s0[R_040cddcf_i] = b[1'h0];
            M_right_mux1_s0[R_040cddcf_i] = b[3'h4];
            M_right_mux2_s0[R_040cddcf_i] = b[2'h3];
            M_right_mux3_s0[R_040cddcf_i] = b[2'h2];
            M_right_mux4_s0[R_040cddcf_i] = b[1'h1];
            M_right_mux5_s0[R_040cddcf_i] = b[1'h0];
            M_sra_mux1_s0[R_040cddcf_i] = b[3'h4];
            M_sra_mux2_s0[R_040cddcf_i] = b[2'h3];
            M_sra_mux3_s0[R_040cddcf_i] = b[2'h2];
            M_sra_mux4_s0[R_040cddcf_i] = b[1'h1];
            M_sra_mux5_s0[R_040cddcf_i] = b[1'h0];
        end
        
        case (alufn[1'h1:1'h0])
            2'h0: begin
                shift = M_left_mux5_out;
            end
            2'h1: begin
                shift = M_right_mux5_out;
            end
            2'h3: begin
                shift = M_sra_mux5_out;
            end
            default: begin
                shift = 1'h0;
            end
        endcase
    end
    
    
endmodule