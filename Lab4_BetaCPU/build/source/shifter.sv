/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module shifter (
        input wire [31:0] a,
        input wire [4:0] b,
        input wire [5:0] alufn,
        output reg [31:0] shift
    );
    logic [31:0] R_1706f254_i;
    logic [31:0] RR_1706f254_i;
    logic [31:0] R_2d4b97e2_i;
    logic [31:0] RR_2d4b97e2_i;
    logic [31:0] R_6f5c4cae_i;
    logic [31:0] RR_6f5c4cae_i;
    logic [31:0] R_47c1c2d3_i;
    logic [31:0] RR_47c1c2d3_i;
    logic [31:0] R_45bfd232_i;
    logic [31:0] RR_45bfd232_i;
    logic [31:0] R_5c120aec_i;
    logic [31:0] RR_5c120aec_i;
    logic [31:0] R_139c807b_i;
    logic [31:0] RR_139c807b_i;
    logic [31:0] R_18a8aa4c_i;
    logic [31:0] RR_18a8aa4c_i;
    logic [31:0] R_00e6622d_i;
    logic [31:0] RR_00e6622d_i;
    logic [31:0] R_36eef6ab_i;
    logic [31:0] RR_36eef6ab_i;
    logic [31:0] R_06f116b0_i;
    logic [31:0] RR_06f116b0_i;
    logic [31:0] R_14eefe56_i;
    logic [31:0] RR_14eefe56_i;
    logic [31:0] R_0a2df68a_i;
    logic [31:0] RR_0a2df68a_i;
    logic [31:0] R_114b6ca8_i;
    logic [31:0] RR_114b6ca8_i;
    logic [31:0] R_44175114_i;
    logic [31:0] RR_44175114_i;
    logic [31:0] R_733a1554_i;
    logic [31:0] RR_733a1554_i;
    logic [31:0] w;
    logic [31:0] x;
    logic [31:0] y;
    logic [31:0] z;
    logic [31:0] M_left_mux1_s0;
    logic [31:0][1:0] M_left_mux1_in;
    logic [31:0] M_left_mux1_out;
    
    genvar idx_0_2039090950;
    
    generate
        for (idx_0_2039090950 = 0; idx_0_2039090950 < 32; idx_0_2039090950 = idx_0_2039090950 + 1) begin: forLoop_idx_0_2039090950
            mux_2 left_mux1 (
                .s0(M_left_mux1_s0[idx_0_2039090950]),
                .in(M_left_mux1_in[idx_0_2039090950]),
                .out(M_left_mux1_out[idx_0_2039090950])
            );
        end
    endgenerate
    
    
    logic [31:0] M_left_mux2_s0;
    logic [31:0][1:0] M_left_mux2_in;
    logic [31:0] M_left_mux2_out;
    
    genvar idx_0_364086885;
    
    generate
        for (idx_0_364086885 = 0; idx_0_364086885 < 32; idx_0_364086885 = idx_0_364086885 + 1) begin: forLoop_idx_0_364086885
            mux_2 left_mux2 (
                .s0(M_left_mux2_s0[idx_0_364086885]),
                .in(M_left_mux2_in[idx_0_364086885]),
                .out(M_left_mux2_out[idx_0_364086885])
            );
        end
    endgenerate
    
    
    logic [31:0] M_left_mux3_s0;
    logic [31:0][1:0] M_left_mux3_in;
    logic [31:0] M_left_mux3_out;
    
    genvar idx_0_845675875;
    
    generate
        for (idx_0_845675875 = 0; idx_0_845675875 < 32; idx_0_845675875 = idx_0_845675875 + 1) begin: forLoop_idx_0_845675875
            mux_2 left_mux3 (
                .s0(M_left_mux3_s0[idx_0_845675875]),
                .in(M_left_mux3_in[idx_0_845675875]),
                .out(M_left_mux3_out[idx_0_845675875])
            );
        end
    endgenerate
    
    
    logic [31:0] M_left_mux4_s0;
    logic [31:0][1:0] M_left_mux4_in;
    logic [31:0] M_left_mux4_out;
    
    genvar idx_0_474033019;
    
    generate
        for (idx_0_474033019 = 0; idx_0_474033019 < 32; idx_0_474033019 = idx_0_474033019 + 1) begin: forLoop_idx_0_474033019
            mux_2 left_mux4 (
                .s0(M_left_mux4_s0[idx_0_474033019]),
                .in(M_left_mux4_in[idx_0_474033019]),
                .out(M_left_mux4_out[idx_0_474033019])
            );
        end
    endgenerate
    
    
    logic [31:0] M_left_mux5_s0;
    logic [31:0][1:0] M_left_mux5_in;
    logic [31:0] M_left_mux5_out;
    
    genvar idx_0_714326609;
    
    generate
        for (idx_0_714326609 = 0; idx_0_714326609 < 32; idx_0_714326609 = idx_0_714326609 + 1) begin: forLoop_idx_0_714326609
            mux_2 left_mux5 (
                .s0(M_left_mux5_s0[idx_0_714326609]),
                .in(M_left_mux5_in[idx_0_714326609]),
                .out(M_left_mux5_out[idx_0_714326609])
            );
        end
    endgenerate
    
    
    logic [31:0] wr;
    logic [31:0] xr;
    logic [31:0] yr;
    logic [31:0] zr;
    logic [31:0] M_right_mux1_s0;
    logic [31:0][1:0] M_right_mux1_in;
    logic [31:0] M_right_mux1_out;
    
    genvar idx_0_1421441519;
    
    generate
        for (idx_0_1421441519 = 0; idx_0_1421441519 < 32; idx_0_1421441519 = idx_0_1421441519 + 1) begin: forLoop_idx_0_1421441519
            mux_2 right_mux1 (
                .s0(M_right_mux1_s0[idx_0_1421441519]),
                .in(M_right_mux1_in[idx_0_1421441519]),
                .out(M_right_mux1_out[idx_0_1421441519])
            );
        end
    endgenerate
    
    
    logic [31:0] M_right_mux2_s0;
    logic [31:0][1:0] M_right_mux2_in;
    logic [31:0] M_right_mux2_out;
    
    genvar idx_0_1983861516;
    
    generate
        for (idx_0_1983861516 = 0; idx_0_1983861516 < 32; idx_0_1983861516 = idx_0_1983861516 + 1) begin: forLoop_idx_0_1983861516
            mux_2 right_mux2 (
                .s0(M_right_mux2_s0[idx_0_1983861516]),
                .in(M_right_mux2_in[idx_0_1983861516]),
                .out(M_right_mux2_out[idx_0_1983861516])
            );
        end
    endgenerate
    
    
    logic [31:0] M_right_mux3_s0;
    logic [31:0][1:0] M_right_mux3_in;
    logic [31:0] M_right_mux3_out;
    
    genvar idx_0_1358763620;
    
    generate
        for (idx_0_1358763620 = 0; idx_0_1358763620 < 32; idx_0_1358763620 = idx_0_1358763620 + 1) begin: forLoop_idx_0_1358763620
            mux_2 right_mux3 (
                .s0(M_right_mux3_s0[idx_0_1358763620]),
                .in(M_right_mux3_in[idx_0_1358763620]),
                .out(M_right_mux3_out[idx_0_1358763620])
            );
        end
    endgenerate
    
    
    logic [31:0] M_right_mux4_s0;
    logic [31:0][1:0] M_right_mux4_in;
    logic [31:0] M_right_mux4_out;
    
    genvar idx_0_956793614;
    
    generate
        for (idx_0_956793614 = 0; idx_0_956793614 < 32; idx_0_956793614 = idx_0_956793614 + 1) begin: forLoop_idx_0_956793614
            mux_2 right_mux4 (
                .s0(M_right_mux4_s0[idx_0_956793614]),
                .in(M_right_mux4_in[idx_0_956793614]),
                .out(M_right_mux4_out[idx_0_956793614])
            );
        end
    endgenerate
    
    
    logic [31:0] M_right_mux5_s0;
    logic [31:0][1:0] M_right_mux5_in;
    logic [31:0] M_right_mux5_out;
    
    genvar idx_0_886002023;
    
    generate
        for (idx_0_886002023 = 0; idx_0_886002023 < 32; idx_0_886002023 = idx_0_886002023 + 1) begin: forLoop_idx_0_886002023
            mux_2 right_mux5 (
                .s0(M_right_mux5_s0[idx_0_886002023]),
                .in(M_right_mux5_in[idx_0_886002023]),
                .out(M_right_mux5_out[idx_0_886002023])
            );
        end
    endgenerate
    
    
    logic [31:0] wra;
    logic [31:0] xra;
    logic [31:0] yra;
    logic [31:0] zra;
    logic [31:0] M_sra_mux1_s0;
    logic [31:0][1:0] M_sra_mux1_in;
    logic [31:0] M_sra_mux1_out;
    
    genvar idx_0_1354370497;
    
    generate
        for (idx_0_1354370497 = 0; idx_0_1354370497 < 32; idx_0_1354370497 = idx_0_1354370497 + 1) begin: forLoop_idx_0_1354370497
            mux_2 sra_mux1 (
                .s0(M_sra_mux1_s0[idx_0_1354370497]),
                .in(M_sra_mux1_in[idx_0_1354370497]),
                .out(M_sra_mux1_out[idx_0_1354370497])
            );
        end
    endgenerate
    
    
    logic [31:0] M_sra_mux2_s0;
    logic [31:0][1:0] M_sra_mux2_in;
    logic [31:0] M_sra_mux2_out;
    
    genvar idx_0_1535202106;
    
    generate
        for (idx_0_1535202106 = 0; idx_0_1535202106 < 32; idx_0_1535202106 = idx_0_1535202106 + 1) begin: forLoop_idx_0_1535202106
            mux_2 sra_mux2 (
                .s0(M_sra_mux2_s0[idx_0_1535202106]),
                .in(M_sra_mux2_in[idx_0_1535202106]),
                .out(M_sra_mux2_out[idx_0_1535202106])
            );
        end
    endgenerate
    
    
    logic [31:0] M_sra_mux3_s0;
    logic [31:0][1:0] M_sra_mux3_in;
    logic [31:0] M_sra_mux3_out;
    
    genvar idx_0_478480902;
    
    generate
        for (idx_0_478480902 = 0; idx_0_478480902 < 32; idx_0_478480902 = idx_0_478480902 + 1) begin: forLoop_idx_0_478480902
            mux_2 sra_mux3 (
                .s0(M_sra_mux3_s0[idx_0_478480902]),
                .in(M_sra_mux3_in[idx_0_478480902]),
                .out(M_sra_mux3_out[idx_0_478480902])
            );
        end
    endgenerate
    
    
    logic [31:0] M_sra_mux4_s0;
    logic [31:0][1:0] M_sra_mux4_in;
    logic [31:0] M_sra_mux4_out;
    
    genvar idx_0_2127582671;
    
    generate
        for (idx_0_2127582671 = 0; idx_0_2127582671 < 32; idx_0_2127582671 = idx_0_2127582671 + 1) begin: forLoop_idx_0_2127582671
            mux_2 sra_mux4 (
                .s0(M_sra_mux4_s0[idx_0_2127582671]),
                .in(M_sra_mux4_in[idx_0_2127582671]),
                .out(M_sra_mux4_out[idx_0_2127582671])
            );
        end
    endgenerate
    
    
    logic [31:0] M_sra_mux5_s0;
    logic [31:0][1:0] M_sra_mux5_in;
    logic [31:0] M_sra_mux5_out;
    
    genvar idx_0_1583963766;
    
    generate
        for (idx_0_1583963766 = 0; idx_0_1583963766 < 32; idx_0_1583963766 = idx_0_1583963766 + 1) begin: forLoop_idx_0_1583963766
            mux_2 sra_mux5 (
                .s0(M_sra_mux5_s0[idx_0_1583963766]),
                .in(M_sra_mux5_in[idx_0_1583963766]),
                .out(M_sra_mux5_out[idx_0_1583963766])
            );
        end
    endgenerate
    
    
    always @* begin
        M_left_mux1_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux2_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux3_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux4_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux5_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux1_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux2_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux3_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux4_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux5_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux1_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux2_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux3_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux4_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux5_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux1_s0 = 32'h0;
        M_right_mux1_s0 = 32'h0;
        M_sra_mux1_s0 = 32'h0;
        M_left_mux2_s0 = 32'h0;
        M_right_mux2_s0 = 32'h0;
        M_sra_mux2_s0 = 32'h0;
        M_left_mux3_s0 = 32'h0;
        M_right_mux3_s0 = 32'h0;
        M_sra_mux3_s0 = 32'h0;
        M_left_mux4_s0 = 32'h0;
        M_right_mux4_s0 = 32'h0;
        M_sra_mux4_s0 = 32'h0;
        M_left_mux5_s0 = 32'h0;
        M_right_mux5_s0 = 32'h0;
        M_sra_mux5_s0 = 32'h0;
        w = 32'h0;
        x = 32'h0;
        y = 32'h0;
        z = 32'h0;
        wr = 32'h0;
        xr = 32'h0;
        yr = 32'h0;
        zr = 32'h0;
        wra = 32'h0;
        xra = 32'h0;
        yra = 32'h0;
        zra = 32'h0;
        if (alufn[1'h1:1'h0] == 2'h0) begin
            for (RR_1706f254_i = 0; RR_1706f254_i < 6'h20; RR_1706f254_i = RR_1706f254_i + 1) begin
        R_1706f254_i = (0) + RR_1706f254_i * (1);
                M_left_mux1_in[R_1706f254_i][1'h0] = a[R_1706f254_i];
                if (R_1706f254_i < 5'h10) begin
                    M_left_mux1_in[R_1706f254_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux1_in[R_1706f254_i][1'h1] = a[R_1706f254_i - 5'h10];
                end
            end
            w = M_left_mux1_out;
            for (RR_2d4b97e2_i = 0; RR_2d4b97e2_i < 6'h20; RR_2d4b97e2_i = RR_2d4b97e2_i + 1) begin
        R_2d4b97e2_i = (0) + RR_2d4b97e2_i * (1);
                M_left_mux2_in[R_2d4b97e2_i][1'h0] = w[R_2d4b97e2_i];
                if (R_2d4b97e2_i < 4'h8) begin
                    M_left_mux2_in[R_2d4b97e2_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux2_in[R_2d4b97e2_i][1'h1] = w[R_2d4b97e2_i - 4'h8];
                end
            end
            x = M_left_mux2_out;
            for (RR_6f5c4cae_i = 0; RR_6f5c4cae_i < 6'h20; RR_6f5c4cae_i = RR_6f5c4cae_i + 1) begin
        R_6f5c4cae_i = (0) + RR_6f5c4cae_i * (1);
                M_left_mux3_in[R_6f5c4cae_i][1'h0] = x[R_6f5c4cae_i];
                if (R_6f5c4cae_i < 3'h4) begin
                    M_left_mux3_in[R_6f5c4cae_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux3_in[R_6f5c4cae_i][1'h1] = x[R_6f5c4cae_i - 3'h4];
                end
            end
            y = M_left_mux3_out;
            for (RR_47c1c2d3_i = 0; RR_47c1c2d3_i < 6'h20; RR_47c1c2d3_i = RR_47c1c2d3_i + 1) begin
        R_47c1c2d3_i = (0) + RR_47c1c2d3_i * (1);
                M_left_mux4_in[R_47c1c2d3_i][1'h0] = y[R_47c1c2d3_i];
                if (R_47c1c2d3_i < 2'h2) begin
                    M_left_mux4_in[R_47c1c2d3_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux4_in[R_47c1c2d3_i][1'h1] = y[R_47c1c2d3_i - 2'h2];
                end
            end
            z = M_left_mux4_out;
            for (RR_45bfd232_i = 0; RR_45bfd232_i < 6'h20; RR_45bfd232_i = RR_45bfd232_i + 1) begin
        R_45bfd232_i = (0) + RR_45bfd232_i * (1);
                M_left_mux5_in[R_45bfd232_i][1'h0] = z[R_45bfd232_i];
                if (R_45bfd232_i < 1'h1) begin
                    M_left_mux5_in[R_45bfd232_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux5_in[R_45bfd232_i][1'h1] = z[R_45bfd232_i - 1'h1];
                end
            end
        end else begin
            if (alufn[1'h1:1'h0] == 2'h1) begin
                for (RR_5c120aec_i = 0; RR_5c120aec_i < 6'h20; RR_5c120aec_i = RR_5c120aec_i + 1) begin
          R_5c120aec_i = (0) + RR_5c120aec_i * (1);
                    M_right_mux1_in[R_5c120aec_i][1'h0] = a[R_5c120aec_i];
                    if (R_5c120aec_i < 5'h10) begin
                        M_right_mux1_in[R_5c120aec_i][1'h1] = a[5'h10 + R_5c120aec_i];
                    end else begin
                        M_right_mux1_in[R_5c120aec_i][1'h1] = 1'h0;
                    end
                end
                wr = M_right_mux1_out;
                for (RR_139c807b_i = 0; RR_139c807b_i < 6'h20; RR_139c807b_i = RR_139c807b_i + 1) begin
          R_139c807b_i = (0) + RR_139c807b_i * (1);
                    M_right_mux2_in[R_139c807b_i][1'h0] = wr[R_139c807b_i];
                    if (R_139c807b_i < 5'h18) begin
                        M_right_mux2_in[R_139c807b_i][1'h1] = wr[4'h8 + R_139c807b_i];
                    end else begin
                        M_right_mux2_in[R_139c807b_i][1'h1] = 1'h0;
                    end
                end
                xr = M_right_mux2_out;
                for (RR_18a8aa4c_i = 0; RR_18a8aa4c_i < 6'h20; RR_18a8aa4c_i = RR_18a8aa4c_i + 1) begin
          R_18a8aa4c_i = (0) + RR_18a8aa4c_i * (1);
                    M_right_mux3_in[R_18a8aa4c_i][1'h0] = xr[R_18a8aa4c_i];
                    if (R_18a8aa4c_i < 5'h1c) begin
                        M_right_mux3_in[R_18a8aa4c_i][1'h1] = xr[3'h4 + R_18a8aa4c_i];
                    end else begin
                        M_right_mux3_in[R_18a8aa4c_i][1'h1] = 1'h0;
                    end
                end
                yr = M_right_mux3_out;
                for (RR_00e6622d_i = 0; RR_00e6622d_i < 6'h20; RR_00e6622d_i = RR_00e6622d_i + 1) begin
          R_00e6622d_i = (0) + RR_00e6622d_i * (1);
                    M_right_mux4_in[R_00e6622d_i][1'h0] = yr[R_00e6622d_i];
                    if (R_00e6622d_i < 5'h1e) begin
                        M_right_mux4_in[R_00e6622d_i][1'h1] = yr[2'h2 + R_00e6622d_i];
                    end else begin
                        M_right_mux4_in[R_00e6622d_i][1'h1] = 1'h0;
                    end
                end
                zr = M_right_mux4_out;
                for (RR_36eef6ab_i = 0; RR_36eef6ab_i < 6'h20; RR_36eef6ab_i = RR_36eef6ab_i + 1) begin
          R_36eef6ab_i = (0) + RR_36eef6ab_i * (1);
                    M_right_mux5_in[R_36eef6ab_i][1'h0] = zr[R_36eef6ab_i];
                    if (R_36eef6ab_i < 5'h1f) begin
                        M_right_mux5_in[R_36eef6ab_i][1'h1] = zr[1'h1 + R_36eef6ab_i];
                    end else begin
                        M_right_mux5_in[R_36eef6ab_i][1'h1] = 1'h0;
                    end
                end
            end else begin
                if (alufn[1'h1:1'h0] == 2'h3) begin
                    for (RR_06f116b0_i = 0; RR_06f116b0_i < 6'h20; RR_06f116b0_i = RR_06f116b0_i + 1) begin
            R_06f116b0_i = (0) + RR_06f116b0_i * (1);
                        M_sra_mux1_in[R_06f116b0_i][1'h0] = a[R_06f116b0_i];
                        if (R_06f116b0_i < 5'h10) begin
                            M_sra_mux1_in[R_06f116b0_i][1'h1] = a[5'h10 + R_06f116b0_i];
                        end else begin
                            M_sra_mux1_in[R_06f116b0_i][1'h1] = a[5'h1f];
                        end
                        wra[R_06f116b0_i] = M_sra_mux1_out[R_06f116b0_i];
                    end
                    for (RR_14eefe56_i = 0; RR_14eefe56_i < 6'h20; RR_14eefe56_i = RR_14eefe56_i + 1) begin
            R_14eefe56_i = (0) + RR_14eefe56_i * (1);
                        M_sra_mux2_in[R_14eefe56_i][1'h0] = wra[R_14eefe56_i];
                        if (R_14eefe56_i < 5'h18) begin
                            M_sra_mux2_in[R_14eefe56_i][1'h1] = wra[4'h8 + R_14eefe56_i];
                        end else begin
                            M_sra_mux2_in[R_14eefe56_i][1'h1] = a[5'h1f];
                        end
                        M_sra_mux2_s0[R_14eefe56_i] = b[2'h3];
                        xra[R_14eefe56_i] = M_sra_mux2_out[R_14eefe56_i];
                    end
                    for (RR_0a2df68a_i = 0; RR_0a2df68a_i < 6'h20; RR_0a2df68a_i = RR_0a2df68a_i + 1) begin
            R_0a2df68a_i = (0) + RR_0a2df68a_i * (1);
                        M_sra_mux3_in[R_0a2df68a_i][1'h0] = xra[R_0a2df68a_i];
                        if (R_0a2df68a_i < 5'h1c) begin
                            M_sra_mux3_in[R_0a2df68a_i][1'h1] = xra[3'h4 + R_0a2df68a_i];
                        end else begin
                            M_sra_mux3_in[R_0a2df68a_i][1'h1] = a[5'h1f];
                        end
                        M_sra_mux3_s0[R_0a2df68a_i] = b[2'h2];
                        yra[R_0a2df68a_i] = M_sra_mux3_out[R_0a2df68a_i];
                    end
                    for (RR_114b6ca8_i = 0; RR_114b6ca8_i < 6'h20; RR_114b6ca8_i = RR_114b6ca8_i + 1) begin
            R_114b6ca8_i = (0) + RR_114b6ca8_i * (1);
                        M_sra_mux4_in[R_114b6ca8_i][1'h0] = yra[R_114b6ca8_i];
                        if (R_114b6ca8_i < 5'h1e) begin
                            M_sra_mux4_in[R_114b6ca8_i][1'h1] = yra[2'h2 + R_114b6ca8_i];
                        end else begin
                            M_sra_mux4_in[R_114b6ca8_i][1'h1] = a[5'h1f];
                        end
                        M_sra_mux4_s0[R_114b6ca8_i] = b[1'h1];
                        zra[R_114b6ca8_i] = M_sra_mux4_out[R_114b6ca8_i];
                    end
                    for (RR_44175114_i = 0; RR_44175114_i < 6'h20; RR_44175114_i = RR_44175114_i + 1) begin
            R_44175114_i = (0) + RR_44175114_i * (1);
                        M_sra_mux5_in[R_44175114_i][1'h0] = zra[R_44175114_i];
                        if (R_44175114_i < 5'h1f) begin
                            M_sra_mux5_in[R_44175114_i][1'h1] = zra[1'h1 + R_44175114_i];
                        end else begin
                            M_sra_mux5_in[R_44175114_i][1'h1] = a[5'h1f];
                        end
                        M_sra_mux5_s0[R_44175114_i] = b[1'h0];
                    end
                end
            end
        end
        for (RR_733a1554_i = 0; RR_733a1554_i < 6'h20; RR_733a1554_i = RR_733a1554_i + 1) begin
      R_733a1554_i = (0) + RR_733a1554_i * (1);
            M_left_mux1_s0[R_733a1554_i] = b[3'h4];
            M_left_mux2_s0[R_733a1554_i] = b[2'h3];
            M_left_mux3_s0[R_733a1554_i] = b[2'h2];
            M_left_mux4_s0[R_733a1554_i] = b[1'h1];
            M_left_mux5_s0[R_733a1554_i] = b[1'h0];
            M_right_mux1_s0[R_733a1554_i] = b[3'h4];
            M_right_mux2_s0[R_733a1554_i] = b[2'h3];
            M_right_mux3_s0[R_733a1554_i] = b[2'h2];
            M_right_mux4_s0[R_733a1554_i] = b[1'h1];
            M_right_mux5_s0[R_733a1554_i] = b[1'h0];
            M_sra_mux1_s0[R_733a1554_i] = b[3'h4];
            M_sra_mux2_s0[R_733a1554_i] = b[2'h3];
            M_sra_mux3_s0[R_733a1554_i] = b[2'h2];
            M_sra_mux4_s0[R_733a1554_i] = b[1'h1];
            M_sra_mux5_s0[R_733a1554_i] = b[1'h0];
        end
        
        case (alufn[1'h1:1'h0])
            2'h0: begin
                shift = M_left_mux5_out;
            end
            2'h1: begin
                shift = M_right_mux5_out;
            end
            2'h3: begin
                shift = M_sra_mux5_out;
            end
            default: begin
                shift = 1'h0;
            end
        endcase
    end
    
    
endmodule