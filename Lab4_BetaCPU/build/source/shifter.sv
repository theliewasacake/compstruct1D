/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module shifter (
        input wire [31:0] a,
        input wire [4:0] b,
        input wire [5:0] alufn,
        output reg [31:0] shift
    );
    logic [31:0] R_30f00386_i;
    logic [31:0] RR_30f00386_i;
    logic [31:0] R_49d5db7d_i;
    logic [31:0] RR_49d5db7d_i;
    logic [31:0] R_068f4a01_i;
    logic [31:0] RR_068f4a01_i;
    logic [31:0] R_3d5263e4_i;
    logic [31:0] RR_3d5263e4_i;
    logic [31:0] R_32c880a7_i;
    logic [31:0] RR_32c880a7_i;
    logic [31:0] R_1a943630_i;
    logic [31:0] RR_1a943630_i;
    logic [31:0] R_45f882ee_i;
    logic [31:0] RR_45f882ee_i;
    logic [31:0] R_7029c4b4_i;
    logic [31:0] RR_7029c4b4_i;
    logic [31:0] R_1c6f686b_i;
    logic [31:0] RR_1c6f686b_i;
    logic [31:0] R_32650721_i;
    logic [31:0] RR_32650721_i;
    logic [31:0] R_35787cb1_i;
    logic [31:0] RR_35787cb1_i;
    logic [31:0] R_5431570a_i;
    logic [31:0] RR_5431570a_i;
    logic [31:0] R_68d695b5_i;
    logic [31:0] RR_68d695b5_i;
    logic [31:0] R_4db0c81f_i;
    logic [31:0] RR_4db0c81f_i;
    logic [31:0] R_1b08794f_i;
    logic [31:0] RR_1b08794f_i;
    logic [31:0] R_66eac18e_i;
    logic [31:0] RR_66eac18e_i;
    logic [31:0] w;
    logic [31:0] x;
    logic [31:0] y;
    logic [31:0] z;
    logic [31:0] M_left_mux1_s0;
    logic [31:0][1:0] M_left_mux1_in;
    logic [31:0] M_left_mux1_out;
    
    genvar idx_0_1683175211;
    
    generate
        for (idx_0_1683175211 = 0; idx_0_1683175211 < 32; idx_0_1683175211 = idx_0_1683175211 + 1) begin: forLoop_idx_0_1683175211
            mux_2 left_mux1 (
                .s0(M_left_mux1_s0[idx_0_1683175211]),
                .in(M_left_mux1_in[idx_0_1683175211]),
                .out(M_left_mux1_out[idx_0_1683175211])
            );
        end
    endgenerate
    
    
    logic [31:0] M_left_mux2_s0;
    logic [31:0][1:0] M_left_mux2_in;
    logic [31:0] M_left_mux2_out;
    
    genvar idx_0_107418597;
    
    generate
        for (idx_0_107418597 = 0; idx_0_107418597 < 32; idx_0_107418597 = idx_0_107418597 + 1) begin: forLoop_idx_0_107418597
            mux_2 left_mux2 (
                .s0(M_left_mux2_s0[idx_0_107418597]),
                .in(M_left_mux2_in[idx_0_107418597]),
                .out(M_left_mux2_out[idx_0_107418597])
            );
        end
    endgenerate
    
    
    logic [31:0] M_left_mux3_s0;
    logic [31:0][1:0] M_left_mux3_in;
    logic [31:0] M_left_mux3_out;
    
    genvar idx_0_1980582368;
    
    generate
        for (idx_0_1980582368 = 0; idx_0_1980582368 < 32; idx_0_1980582368 = idx_0_1980582368 + 1) begin: forLoop_idx_0_1980582368
            mux_2 left_mux3 (
                .s0(M_left_mux3_s0[idx_0_1980582368]),
                .in(M_left_mux3_in[idx_0_1980582368]),
                .out(M_left_mux3_out[idx_0_1980582368])
            );
        end
    endgenerate
    
    
    logic [31:0] M_left_mux4_s0;
    logic [31:0][1:0] M_left_mux4_in;
    logic [31:0] M_left_mux4_out;
    
    genvar idx_0_87292167;
    
    generate
        for (idx_0_87292167 = 0; idx_0_87292167 < 32; idx_0_87292167 = idx_0_87292167 + 1) begin: forLoop_idx_0_87292167
            mux_2 left_mux4 (
                .s0(M_left_mux4_s0[idx_0_87292167]),
                .in(M_left_mux4_in[idx_0_87292167]),
                .out(M_left_mux4_out[idx_0_87292167])
            );
        end
    endgenerate
    
    
    logic [31:0] M_left_mux5_s0;
    logic [31:0][1:0] M_left_mux5_in;
    logic [31:0] M_left_mux5_out;
    
    genvar idx_0_1126523351;
    
    generate
        for (idx_0_1126523351 = 0; idx_0_1126523351 < 32; idx_0_1126523351 = idx_0_1126523351 + 1) begin: forLoop_idx_0_1126523351
            mux_2 left_mux5 (
                .s0(M_left_mux5_s0[idx_0_1126523351]),
                .in(M_left_mux5_in[idx_0_1126523351]),
                .out(M_left_mux5_out[idx_0_1126523351])
            );
        end
    endgenerate
    
    
    logic [31:0] wr;
    logic [31:0] xr;
    logic [31:0] yr;
    logic [31:0] zr;
    logic [31:0] M_right_mux1_s0;
    logic [31:0][1:0] M_right_mux1_in;
    logic [31:0] M_right_mux1_out;
    
    genvar idx_0_76372778;
    
    generate
        for (idx_0_76372778 = 0; idx_0_76372778 < 32; idx_0_76372778 = idx_0_76372778 + 1) begin: forLoop_idx_0_76372778
            mux_2 right_mux1 (
                .s0(M_right_mux1_s0[idx_0_76372778]),
                .in(M_right_mux1_in[idx_0_76372778]),
                .out(M_right_mux1_out[idx_0_76372778])
            );
        end
    endgenerate
    
    
    logic [31:0] M_right_mux2_s0;
    logic [31:0][1:0] M_right_mux2_in;
    logic [31:0] M_right_mux2_out;
    
    genvar idx_0_1521351239;
    
    generate
        for (idx_0_1521351239 = 0; idx_0_1521351239 < 32; idx_0_1521351239 = idx_0_1521351239 + 1) begin: forLoop_idx_0_1521351239
            mux_2 right_mux2 (
                .s0(M_right_mux2_s0[idx_0_1521351239]),
                .in(M_right_mux2_in[idx_0_1521351239]),
                .out(M_right_mux2_out[idx_0_1521351239])
            );
        end
    endgenerate
    
    
    logic [31:0] M_right_mux3_s0;
    logic [31:0][1:0] M_right_mux3_in;
    logic [31:0] M_right_mux3_out;
    
    genvar idx_0_383083088;
    
    generate
        for (idx_0_383083088 = 0; idx_0_383083088 < 32; idx_0_383083088 = idx_0_383083088 + 1) begin: forLoop_idx_0_383083088
            mux_2 right_mux3 (
                .s0(M_right_mux3_s0[idx_0_383083088]),
                .in(M_right_mux3_in[idx_0_383083088]),
                .out(M_right_mux3_out[idx_0_383083088])
            );
        end
    endgenerate
    
    
    logic [31:0] M_right_mux4_s0;
    logic [31:0][1:0] M_right_mux4_in;
    logic [31:0] M_right_mux4_out;
    
    genvar idx_0_465631613;
    
    generate
        for (idx_0_465631613 = 0; idx_0_465631613 < 32; idx_0_465631613 = idx_0_465631613 + 1) begin: forLoop_idx_0_465631613
            mux_2 right_mux4 (
                .s0(M_right_mux4_s0[idx_0_465631613]),
                .in(M_right_mux4_in[idx_0_465631613]),
                .out(M_right_mux4_out[idx_0_465631613])
            );
        end
    endgenerate
    
    
    logic [31:0] M_right_mux5_s0;
    logic [31:0][1:0] M_right_mux5_in;
    logic [31:0] M_right_mux5_out;
    
    genvar idx_0_2022003794;
    
    generate
        for (idx_0_2022003794 = 0; idx_0_2022003794 < 32; idx_0_2022003794 = idx_0_2022003794 + 1) begin: forLoop_idx_0_2022003794
            mux_2 right_mux5 (
                .s0(M_right_mux5_s0[idx_0_2022003794]),
                .in(M_right_mux5_in[idx_0_2022003794]),
                .out(M_right_mux5_out[idx_0_2022003794])
            );
        end
    endgenerate
    
    
    logic [31:0] wra;
    logic [31:0] xra;
    logic [31:0] yra;
    logic [31:0] zra;
    logic [31:0] M_sra_mux1_s0;
    logic [31:0][1:0] M_sra_mux1_in;
    logic [31:0] M_sra_mux1_out;
    
    genvar idx_0_805924839;
    
    generate
        for (idx_0_805924839 = 0; idx_0_805924839 < 32; idx_0_805924839 = idx_0_805924839 + 1) begin: forLoop_idx_0_805924839
            mux_2 sra_mux1 (
                .s0(M_sra_mux1_s0[idx_0_805924839]),
                .in(M_sra_mux1_in[idx_0_805924839]),
                .out(M_sra_mux1_out[idx_0_805924839])
            );
        end
    endgenerate
    
    
    logic [31:0] M_sra_mux2_s0;
    logic [31:0][1:0] M_sra_mux2_in;
    logic [31:0] M_sra_mux2_out;
    
    genvar idx_0_1488907441;
    
    generate
        for (idx_0_1488907441 = 0; idx_0_1488907441 < 32; idx_0_1488907441 = idx_0_1488907441 + 1) begin: forLoop_idx_0_1488907441
            mux_2 sra_mux2 (
                .s0(M_sra_mux2_s0[idx_0_1488907441]),
                .in(M_sra_mux2_in[idx_0_1488907441]),
                .out(M_sra_mux2_out[idx_0_1488907441])
            );
        end
    endgenerate
    
    
    logic [31:0] M_sra_mux3_s0;
    logic [31:0][1:0] M_sra_mux3_in;
    logic [31:0] M_sra_mux3_out;
    
    genvar idx_0_1173148553;
    
    generate
        for (idx_0_1173148553 = 0; idx_0_1173148553 < 32; idx_0_1173148553 = idx_0_1173148553 + 1) begin: forLoop_idx_0_1173148553
            mux_2 sra_mux3 (
                .s0(M_sra_mux3_s0[idx_0_1173148553]),
                .in(M_sra_mux3_in[idx_0_1173148553]),
                .out(M_sra_mux3_out[idx_0_1173148553])
            );
        end
    endgenerate
    
    
    logic [31:0] M_sra_mux4_s0;
    logic [31:0][1:0] M_sra_mux4_in;
    logic [31:0] M_sra_mux4_out;
    
    genvar idx_0_2049507641;
    
    generate
        for (idx_0_2049507641 = 0; idx_0_2049507641 < 32; idx_0_2049507641 = idx_0_2049507641 + 1) begin: forLoop_idx_0_2049507641
            mux_2 sra_mux4 (
                .s0(M_sra_mux4_s0[idx_0_2049507641]),
                .in(M_sra_mux4_in[idx_0_2049507641]),
                .out(M_sra_mux4_out[idx_0_2049507641])
            );
        end
    endgenerate
    
    
    logic [31:0] M_sra_mux5_s0;
    logic [31:0][1:0] M_sra_mux5_in;
    logic [31:0] M_sra_mux5_out;
    
    genvar idx_0_1873811853;
    
    generate
        for (idx_0_1873811853 = 0; idx_0_1873811853 < 32; idx_0_1873811853 = idx_0_1873811853 + 1) begin: forLoop_idx_0_1873811853
            mux_2 sra_mux5 (
                .s0(M_sra_mux5_s0[idx_0_1873811853]),
                .in(M_sra_mux5_in[idx_0_1873811853]),
                .out(M_sra_mux5_out[idx_0_1873811853])
            );
        end
    endgenerate
    
    
    always @* begin
        M_left_mux1_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux2_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux3_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux4_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux5_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux1_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux2_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux3_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux4_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux5_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux1_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux2_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux3_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux4_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux5_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux1_s0 = 32'h0;
        M_right_mux1_s0 = 32'h0;
        M_sra_mux1_s0 = 32'h0;
        M_left_mux2_s0 = 32'h0;
        M_right_mux2_s0 = 32'h0;
        M_sra_mux2_s0 = 32'h0;
        M_left_mux3_s0 = 32'h0;
        M_right_mux3_s0 = 32'h0;
        M_sra_mux3_s0 = 32'h0;
        M_left_mux4_s0 = 32'h0;
        M_right_mux4_s0 = 32'h0;
        M_sra_mux4_s0 = 32'h0;
        M_left_mux5_s0 = 32'h0;
        M_right_mux5_s0 = 32'h0;
        M_sra_mux5_s0 = 32'h0;
        w = 32'h0;
        x = 32'h0;
        y = 32'h0;
        z = 32'h0;
        wr = 32'h0;
        xr = 32'h0;
        yr = 32'h0;
        zr = 32'h0;
        wra = 32'h0;
        xra = 32'h0;
        yra = 32'h0;
        zra = 32'h0;
        if (alufn[1'h1:1'h0] == 2'h0) begin
            for (RR_30f00386_i = 0; RR_30f00386_i < 6'h20; RR_30f00386_i = RR_30f00386_i + 1) begin
        R_30f00386_i = (0) + RR_30f00386_i * (1);
                M_left_mux1_in[R_30f00386_i][1'h0] = a[R_30f00386_i];
                if (R_30f00386_i < 5'h10) begin
                    M_left_mux1_in[R_30f00386_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux1_in[R_30f00386_i][1'h1] = a[R_30f00386_i - 5'h10];
                end
            end
            w = M_left_mux1_out;
            for (RR_49d5db7d_i = 0; RR_49d5db7d_i < 6'h20; RR_49d5db7d_i = RR_49d5db7d_i + 1) begin
        R_49d5db7d_i = (0) + RR_49d5db7d_i * (1);
                M_left_mux2_in[R_49d5db7d_i][1'h0] = w[R_49d5db7d_i];
                if (R_49d5db7d_i < 4'h8) begin
                    M_left_mux2_in[R_49d5db7d_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux2_in[R_49d5db7d_i][1'h1] = w[R_49d5db7d_i - 4'h8];
                end
            end
            x = M_left_mux2_out;
            for (RR_068f4a01_i = 0; RR_068f4a01_i < 6'h20; RR_068f4a01_i = RR_068f4a01_i + 1) begin
        R_068f4a01_i = (0) + RR_068f4a01_i * (1);
                M_left_mux3_in[R_068f4a01_i][1'h0] = x[R_068f4a01_i];
                if (R_068f4a01_i < 3'h4) begin
                    M_left_mux3_in[R_068f4a01_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux3_in[R_068f4a01_i][1'h1] = x[R_068f4a01_i - 3'h4];
                end
            end
            y = M_left_mux3_out;
            for (RR_3d5263e4_i = 0; RR_3d5263e4_i < 6'h20; RR_3d5263e4_i = RR_3d5263e4_i + 1) begin
        R_3d5263e4_i = (0) + RR_3d5263e4_i * (1);
                M_left_mux4_in[R_3d5263e4_i][1'h0] = y[R_3d5263e4_i];
                if (R_3d5263e4_i < 2'h2) begin
                    M_left_mux4_in[R_3d5263e4_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux4_in[R_3d5263e4_i][1'h1] = y[R_3d5263e4_i - 2'h2];
                end
            end
            z = M_left_mux4_out;
            for (RR_32c880a7_i = 0; RR_32c880a7_i < 6'h20; RR_32c880a7_i = RR_32c880a7_i + 1) begin
        R_32c880a7_i = (0) + RR_32c880a7_i * (1);
                M_left_mux5_in[R_32c880a7_i][1'h0] = z[R_32c880a7_i];
                if (R_32c880a7_i < 1'h1) begin
                    M_left_mux5_in[R_32c880a7_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux5_in[R_32c880a7_i][1'h1] = z[R_32c880a7_i - 1'h1];
                end
            end
        end else begin
            if (alufn[1'h1:1'h0] == 2'h1) begin
                for (RR_1a943630_i = 0; RR_1a943630_i < 6'h20; RR_1a943630_i = RR_1a943630_i + 1) begin
          R_1a943630_i = (0) + RR_1a943630_i * (1);
                    M_right_mux1_in[R_1a943630_i][1'h0] = a[R_1a943630_i];
                    if (R_1a943630_i < 5'h10) begin
                        M_right_mux1_in[R_1a943630_i][1'h1] = a[5'h10 + R_1a943630_i];
                    end else begin
                        M_right_mux1_in[R_1a943630_i][1'h1] = 1'h0;
                    end
                end
                wr = M_right_mux1_out;
                for (RR_45f882ee_i = 0; RR_45f882ee_i < 6'h20; RR_45f882ee_i = RR_45f882ee_i + 1) begin
          R_45f882ee_i = (0) + RR_45f882ee_i * (1);
                    M_right_mux2_in[R_45f882ee_i][1'h0] = wr[R_45f882ee_i];
                    if (R_45f882ee_i < 5'h18) begin
                        M_right_mux2_in[R_45f882ee_i][1'h1] = wr[4'h8 + R_45f882ee_i];
                    end else begin
                        M_right_mux2_in[R_45f882ee_i][1'h1] = 1'h0;
                    end
                end
                xr = M_right_mux2_out;
                for (RR_7029c4b4_i = 0; RR_7029c4b4_i < 6'h20; RR_7029c4b4_i = RR_7029c4b4_i + 1) begin
          R_7029c4b4_i = (0) + RR_7029c4b4_i * (1);
                    M_right_mux3_in[R_7029c4b4_i][1'h0] = xr[R_7029c4b4_i];
                    if (R_7029c4b4_i < 5'h1c) begin
                        M_right_mux3_in[R_7029c4b4_i][1'h1] = xr[3'h4 + R_7029c4b4_i];
                    end else begin
                        M_right_mux3_in[R_7029c4b4_i][1'h1] = 1'h0;
                    end
                end
                yr = M_right_mux3_out;
                for (RR_1c6f686b_i = 0; RR_1c6f686b_i < 6'h20; RR_1c6f686b_i = RR_1c6f686b_i + 1) begin
          R_1c6f686b_i = (0) + RR_1c6f686b_i * (1);
                    M_right_mux4_in[R_1c6f686b_i][1'h0] = yr[R_1c6f686b_i];
                    if (R_1c6f686b_i < 5'h1e) begin
                        M_right_mux4_in[R_1c6f686b_i][1'h1] = yr[2'h2 + R_1c6f686b_i];
                    end else begin
                        M_right_mux4_in[R_1c6f686b_i][1'h1] = 1'h0;
                    end
                end
                zr = M_right_mux4_out;
                for (RR_32650721_i = 0; RR_32650721_i < 6'h20; RR_32650721_i = RR_32650721_i + 1) begin
          R_32650721_i = (0) + RR_32650721_i * (1);
                    M_right_mux5_in[R_32650721_i][1'h0] = zr[R_32650721_i];
                    if (R_32650721_i < 5'h1f) begin
                        M_right_mux5_in[R_32650721_i][1'h1] = zr[1'h1 + R_32650721_i];
                    end else begin
                        M_right_mux5_in[R_32650721_i][1'h1] = 1'h0;
                    end
                end
            end else begin
                if (alufn[1'h1:1'h0] == 2'h3) begin
                    for (RR_35787cb1_i = 0; RR_35787cb1_i < 6'h20; RR_35787cb1_i = RR_35787cb1_i + 1) begin
            R_35787cb1_i = (0) + RR_35787cb1_i * (1);
                        M_sra_mux1_in[R_35787cb1_i][1'h0] = a[R_35787cb1_i];
                        if (R_35787cb1_i < 5'h10) begin
                            M_sra_mux1_in[R_35787cb1_i][1'h1] = a[5'h10 + R_35787cb1_i];
                        end else begin
                            M_sra_mux1_in[R_35787cb1_i][1'h1] = a[5'h1f];
                        end
                        wra[R_35787cb1_i] = M_sra_mux1_out[R_35787cb1_i];
                    end
                    for (RR_5431570a_i = 0; RR_5431570a_i < 6'h20; RR_5431570a_i = RR_5431570a_i + 1) begin
            R_5431570a_i = (0) + RR_5431570a_i * (1);
                        M_sra_mux2_in[R_5431570a_i][1'h0] = wra[R_5431570a_i];
                        if (R_5431570a_i < 5'h18) begin
                            M_sra_mux2_in[R_5431570a_i][1'h1] = wra[4'h8 + R_5431570a_i];
                        end else begin
                            M_sra_mux2_in[R_5431570a_i][1'h1] = a[5'h1f];
                        end
                        M_sra_mux2_s0[R_5431570a_i] = b[2'h3];
                        xra[R_5431570a_i] = M_sra_mux2_out[R_5431570a_i];
                    end
                    for (RR_68d695b5_i = 0; RR_68d695b5_i < 6'h20; RR_68d695b5_i = RR_68d695b5_i + 1) begin
            R_68d695b5_i = (0) + RR_68d695b5_i * (1);
                        M_sra_mux3_in[R_68d695b5_i][1'h0] = xra[R_68d695b5_i];
                        if (R_68d695b5_i < 5'h1c) begin
                            M_sra_mux3_in[R_68d695b5_i][1'h1] = xra[3'h4 + R_68d695b5_i];
                        end else begin
                            M_sra_mux3_in[R_68d695b5_i][1'h1] = a[5'h1f];
                        end
                        M_sra_mux3_s0[R_68d695b5_i] = b[2'h2];
                        yra[R_68d695b5_i] = M_sra_mux3_out[R_68d695b5_i];
                    end
                    for (RR_4db0c81f_i = 0; RR_4db0c81f_i < 6'h20; RR_4db0c81f_i = RR_4db0c81f_i + 1) begin
            R_4db0c81f_i = (0) + RR_4db0c81f_i * (1);
                        M_sra_mux4_in[R_4db0c81f_i][1'h0] = yra[R_4db0c81f_i];
                        if (R_4db0c81f_i < 5'h1e) begin
                            M_sra_mux4_in[R_4db0c81f_i][1'h1] = yra[2'h2 + R_4db0c81f_i];
                        end else begin
                            M_sra_mux4_in[R_4db0c81f_i][1'h1] = a[5'h1f];
                        end
                        M_sra_mux4_s0[R_4db0c81f_i] = b[1'h1];
                        zra[R_4db0c81f_i] = M_sra_mux4_out[R_4db0c81f_i];
                    end
                    for (RR_1b08794f_i = 0; RR_1b08794f_i < 6'h20; RR_1b08794f_i = RR_1b08794f_i + 1) begin
            R_1b08794f_i = (0) + RR_1b08794f_i * (1);
                        M_sra_mux5_in[R_1b08794f_i][1'h0] = zra[R_1b08794f_i];
                        if (R_1b08794f_i < 5'h1f) begin
                            M_sra_mux5_in[R_1b08794f_i][1'h1] = zra[1'h1 + R_1b08794f_i];
                        end else begin
                            M_sra_mux5_in[R_1b08794f_i][1'h1] = a[5'h1f];
                        end
                        M_sra_mux5_s0[R_1b08794f_i] = b[1'h0];
                    end
                end
            end
        end
        for (RR_66eac18e_i = 0; RR_66eac18e_i < 6'h20; RR_66eac18e_i = RR_66eac18e_i + 1) begin
      R_66eac18e_i = (0) + RR_66eac18e_i * (1);
            M_left_mux1_s0[R_66eac18e_i] = b[3'h4];
            M_left_mux2_s0[R_66eac18e_i] = b[2'h3];
            M_left_mux3_s0[R_66eac18e_i] = b[2'h2];
            M_left_mux4_s0[R_66eac18e_i] = b[1'h1];
            M_left_mux5_s0[R_66eac18e_i] = b[1'h0];
            M_right_mux1_s0[R_66eac18e_i] = b[3'h4];
            M_right_mux2_s0[R_66eac18e_i] = b[2'h3];
            M_right_mux3_s0[R_66eac18e_i] = b[2'h2];
            M_right_mux4_s0[R_66eac18e_i] = b[1'h1];
            M_right_mux5_s0[R_66eac18e_i] = b[1'h0];
            M_sra_mux1_s0[R_66eac18e_i] = b[3'h4];
            M_sra_mux2_s0[R_66eac18e_i] = b[2'h3];
            M_sra_mux3_s0[R_66eac18e_i] = b[2'h2];
            M_sra_mux4_s0[R_66eac18e_i] = b[1'h1];
            M_sra_mux5_s0[R_66eac18e_i] = b[1'h0];
        end
        
        case (alufn[1'h1:1'h0])
            2'h0: begin
                shift = M_left_mux5_out;
            end
            2'h1: begin
                shift = M_right_mux5_out;
            end
            2'h3: begin
                shift = M_sra_mux5_out;
            end
            default: begin
                shift = 1'h0;
            end
        endcase
    end
    
    
endmodule