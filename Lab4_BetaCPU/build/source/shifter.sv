/*
    This file was generated automatically by Alchitry Labs 2.0.29-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module shifter (
        input wire [31:0] a,
        input wire [4:0] b,
        input wire [5:0] alufn,
        output reg [31:0] shift
    );
    logic [31:0] R_3ffd9345_i;
    logic [31:0] RR_3ffd9345_i;
    logic [31:0] R_3ffba392_i;
    logic [31:0] RR_3ffba392_i;
    logic [31:0] R_789428a2_i;
    logic [31:0] RR_789428a2_i;
    logic [31:0] R_2c4d6c8d_i;
    logic [31:0] RR_2c4d6c8d_i;
    logic [31:0] R_1c425020_i;
    logic [31:0] RR_1c425020_i;
    logic [31:0] R_5acfc41c_i;
    logic [31:0] RR_5acfc41c_i;
    logic [31:0] R_257872dd_i;
    logic [31:0] RR_257872dd_i;
    logic [31:0] R_0306f32c_i;
    logic [31:0] RR_0306f32c_i;
    logic [31:0] R_342b65d4_i;
    logic [31:0] RR_342b65d4_i;
    logic [31:0] R_645df9eb_i;
    logic [31:0] RR_645df9eb_i;
    logic [31:0] R_0e2c0eb2_i;
    logic [31:0] RR_0e2c0eb2_i;
    logic [31:0] R_2434de3a_i;
    logic [31:0] RR_2434de3a_i;
    logic [31:0] R_6cb784b7_i;
    logic [31:0] RR_6cb784b7_i;
    logic [31:0] R_7c3b29a1_i;
    logic [31:0] RR_7c3b29a1_i;
    logic [31:0] R_4240d6df_i;
    logic [31:0] RR_4240d6df_i;
    logic [31:0] R_2098bc96_i;
    logic [31:0] RR_2098bc96_i;
    logic [31:0] w;
    logic [31:0] x;
    logic [31:0] y;
    logic [31:0] z;
    logic [31:0] M_left_mux1_s0;
    logic [31:0][1:0] M_left_mux1_in;
    logic [31:0] M_left_mux1_out;
    
    genvar idx_0_700432414;
    
    generate
        for (idx_0_700432414 = 0; idx_0_700432414 < 32; idx_0_700432414 = idx_0_700432414 + 1) begin: forLoop_idx_0_700432414
            mux_2 left_mux1 (
                .s0(M_left_mux1_s0[idx_0_700432414]),
                .in(M_left_mux1_in[idx_0_700432414]),
                .out(M_left_mux1_out[idx_0_700432414])
            );
        end
    endgenerate
    
    
    logic [31:0] M_left_mux2_s0;
    logic [31:0][1:0] M_left_mux2_in;
    logic [31:0] M_left_mux2_out;
    
    genvar idx_0_142580805;
    
    generate
        for (idx_0_142580805 = 0; idx_0_142580805 < 32; idx_0_142580805 = idx_0_142580805 + 1) begin: forLoop_idx_0_142580805
            mux_2 left_mux2 (
                .s0(M_left_mux2_s0[idx_0_142580805]),
                .in(M_left_mux2_in[idx_0_142580805]),
                .out(M_left_mux2_out[idx_0_142580805])
            );
        end
    endgenerate
    
    
    logic [31:0] M_left_mux3_s0;
    logic [31:0][1:0] M_left_mux3_in;
    logic [31:0] M_left_mux3_out;
    
    genvar idx_0_1441665595;
    
    generate
        for (idx_0_1441665595 = 0; idx_0_1441665595 < 32; idx_0_1441665595 = idx_0_1441665595 + 1) begin: forLoop_idx_0_1441665595
            mux_2 left_mux3 (
                .s0(M_left_mux3_s0[idx_0_1441665595]),
                .in(M_left_mux3_in[idx_0_1441665595]),
                .out(M_left_mux3_out[idx_0_1441665595])
            );
        end
    endgenerate
    
    
    logic [31:0] M_left_mux4_s0;
    logic [31:0][1:0] M_left_mux4_in;
    logic [31:0] M_left_mux4_out;
    
    genvar idx_0_476791463;
    
    generate
        for (idx_0_476791463 = 0; idx_0_476791463 < 32; idx_0_476791463 = idx_0_476791463 + 1) begin: forLoop_idx_0_476791463
            mux_2 left_mux4 (
                .s0(M_left_mux4_s0[idx_0_476791463]),
                .in(M_left_mux4_in[idx_0_476791463]),
                .out(M_left_mux4_out[idx_0_476791463])
            );
        end
    endgenerate
    
    
    logic [31:0] M_left_mux5_s0;
    logic [31:0][1:0] M_left_mux5_in;
    logic [31:0] M_left_mux5_out;
    
    genvar idx_0_1785011559;
    
    generate
        for (idx_0_1785011559 = 0; idx_0_1785011559 < 32; idx_0_1785011559 = idx_0_1785011559 + 1) begin: forLoop_idx_0_1785011559
            mux_2 left_mux5 (
                .s0(M_left_mux5_s0[idx_0_1785011559]),
                .in(M_left_mux5_in[idx_0_1785011559]),
                .out(M_left_mux5_out[idx_0_1785011559])
            );
        end
    endgenerate
    
    
    logic [31:0] wr;
    logic [31:0] xr;
    logic [31:0] yr;
    logic [31:0] zr;
    logic [31:0] M_right_mux1_s0;
    logic [31:0][1:0] M_right_mux1_in;
    logic [31:0] M_right_mux1_out;
    
    genvar idx_0_682274082;
    
    generate
        for (idx_0_682274082 = 0; idx_0_682274082 < 32; idx_0_682274082 = idx_0_682274082 + 1) begin: forLoop_idx_0_682274082
            mux_2 right_mux1 (
                .s0(M_right_mux1_s0[idx_0_682274082]),
                .in(M_right_mux1_in[idx_0_682274082]),
                .out(M_right_mux1_out[idx_0_682274082])
            );
        end
    endgenerate
    
    
    logic [31:0] M_right_mux2_s0;
    logic [31:0][1:0] M_right_mux2_in;
    logic [31:0] M_right_mux2_out;
    
    genvar idx_0_799008671;
    
    generate
        for (idx_0_799008671 = 0; idx_0_799008671 < 32; idx_0_799008671 = idx_0_799008671 + 1) begin: forLoop_idx_0_799008671
            mux_2 right_mux2 (
                .s0(M_right_mux2_s0[idx_0_799008671]),
                .in(M_right_mux2_in[idx_0_799008671]),
                .out(M_right_mux2_out[idx_0_799008671])
            );
        end
    endgenerate
    
    
    logic [31:0] M_right_mux3_s0;
    logic [31:0][1:0] M_right_mux3_in;
    logic [31:0] M_right_mux3_out;
    
    genvar idx_0_1793185580;
    
    generate
        for (idx_0_1793185580 = 0; idx_0_1793185580 < 32; idx_0_1793185580 = idx_0_1793185580 + 1) begin: forLoop_idx_0_1793185580
            mux_2 right_mux3 (
                .s0(M_right_mux3_s0[idx_0_1793185580]),
                .in(M_right_mux3_in[idx_0_1793185580]),
                .out(M_right_mux3_out[idx_0_1793185580])
            );
        end
    endgenerate
    
    
    logic [31:0] M_right_mux4_s0;
    logic [31:0][1:0] M_right_mux4_in;
    logic [31:0] M_right_mux4_out;
    
    genvar idx_0_1515007627;
    
    generate
        for (idx_0_1515007627 = 0; idx_0_1515007627 < 32; idx_0_1515007627 = idx_0_1515007627 + 1) begin: forLoop_idx_0_1515007627
            mux_2 right_mux4 (
                .s0(M_right_mux4_s0[idx_0_1515007627]),
                .in(M_right_mux4_in[idx_0_1515007627]),
                .out(M_right_mux4_out[idx_0_1515007627])
            );
        end
    endgenerate
    
    
    logic [31:0] M_right_mux5_s0;
    logic [31:0][1:0] M_right_mux5_in;
    logic [31:0] M_right_mux5_out;
    
    genvar idx_0_1706436250;
    
    generate
        for (idx_0_1706436250 = 0; idx_0_1706436250 < 32; idx_0_1706436250 = idx_0_1706436250 + 1) begin: forLoop_idx_0_1706436250
            mux_2 right_mux5 (
                .s0(M_right_mux5_s0[idx_0_1706436250]),
                .in(M_right_mux5_in[idx_0_1706436250]),
                .out(M_right_mux5_out[idx_0_1706436250])
            );
        end
    endgenerate
    
    
    logic [31:0] wra;
    logic [31:0] xra;
    logic [31:0] yra;
    logic [31:0] zra;
    logic [31:0] M_sra_mux1_s0;
    logic [31:0][1:0] M_sra_mux1_in;
    logic [31:0] M_sra_mux1_out;
    
    genvar idx_0_2009825154;
    
    generate
        for (idx_0_2009825154 = 0; idx_0_2009825154 < 32; idx_0_2009825154 = idx_0_2009825154 + 1) begin: forLoop_idx_0_2009825154
            mux_2 sra_mux1 (
                .s0(M_sra_mux1_s0[idx_0_2009825154]),
                .in(M_sra_mux1_in[idx_0_2009825154]),
                .out(M_sra_mux1_out[idx_0_2009825154])
            );
        end
    endgenerate
    
    
    logic [31:0] M_sra_mux2_s0;
    logic [31:0][1:0] M_sra_mux2_in;
    logic [31:0] M_sra_mux2_out;
    
    genvar idx_0_50039458;
    
    generate
        for (idx_0_50039458 = 0; idx_0_50039458 < 32; idx_0_50039458 = idx_0_50039458 + 1) begin: forLoop_idx_0_50039458
            mux_2 sra_mux2 (
                .s0(M_sra_mux2_s0[idx_0_50039458]),
                .in(M_sra_mux2_in[idx_0_50039458]),
                .out(M_sra_mux2_out[idx_0_50039458])
            );
        end
    endgenerate
    
    
    logic [31:0] M_sra_mux3_s0;
    logic [31:0][1:0] M_sra_mux3_in;
    logic [31:0] M_sra_mux3_out;
    
    genvar idx_0_598637837;
    
    generate
        for (idx_0_598637837 = 0; idx_0_598637837 < 32; idx_0_598637837 = idx_0_598637837 + 1) begin: forLoop_idx_0_598637837
            mux_2 sra_mux3 (
                .s0(M_sra_mux3_s0[idx_0_598637837]),
                .in(M_sra_mux3_in[idx_0_598637837]),
                .out(M_sra_mux3_out[idx_0_598637837])
            );
        end
    endgenerate
    
    
    logic [31:0] M_sra_mux4_s0;
    logic [31:0][1:0] M_sra_mux4_in;
    logic [31:0] M_sra_mux4_out;
    
    genvar idx_0_1291251198;
    
    generate
        for (idx_0_1291251198 = 0; idx_0_1291251198 < 32; idx_0_1291251198 = idx_0_1291251198 + 1) begin: forLoop_idx_0_1291251198
            mux_2 sra_mux4 (
                .s0(M_sra_mux4_s0[idx_0_1291251198]),
                .in(M_sra_mux4_in[idx_0_1291251198]),
                .out(M_sra_mux4_out[idx_0_1291251198])
            );
        end
    endgenerate
    
    
    logic [31:0] M_sra_mux5_s0;
    logic [31:0][1:0] M_sra_mux5_in;
    logic [31:0] M_sra_mux5_out;
    
    genvar idx_0_943860494;
    
    generate
        for (idx_0_943860494 = 0; idx_0_943860494 < 32; idx_0_943860494 = idx_0_943860494 + 1) begin: forLoop_idx_0_943860494
            mux_2 sra_mux5 (
                .s0(M_sra_mux5_s0[idx_0_943860494]),
                .in(M_sra_mux5_in[idx_0_943860494]),
                .out(M_sra_mux5_out[idx_0_943860494])
            );
        end
    endgenerate
    
    
    always @* begin
        M_left_mux1_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux2_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux3_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux4_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux5_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux1_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux2_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux3_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux4_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_right_mux5_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux1_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux2_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux3_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux4_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_sra_mux5_in = {{2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0, 2'h0}};
        M_left_mux1_s0 = 32'h0;
        M_right_mux1_s0 = 32'h0;
        M_sra_mux1_s0 = 32'h0;
        M_left_mux2_s0 = 32'h0;
        M_right_mux2_s0 = 32'h0;
        M_sra_mux2_s0 = 32'h0;
        M_left_mux3_s0 = 32'h0;
        M_right_mux3_s0 = 32'h0;
        M_sra_mux3_s0 = 32'h0;
        M_left_mux4_s0 = 32'h0;
        M_right_mux4_s0 = 32'h0;
        M_sra_mux4_s0 = 32'h0;
        M_left_mux5_s0 = 32'h0;
        M_right_mux5_s0 = 32'h0;
        M_sra_mux5_s0 = 32'h0;
        w = 32'h0;
        x = 32'h0;
        y = 32'h0;
        z = 32'h0;
        wr = 32'h0;
        xr = 32'h0;
        yr = 32'h0;
        zr = 32'h0;
        wra = 32'h0;
        xra = 32'h0;
        yra = 32'h0;
        zra = 32'h0;
        if (alufn[1'h1:1'h0] == 2'h0) begin
            for (RR_3ffd9345_i = 0; RR_3ffd9345_i < 6'h20; RR_3ffd9345_i = RR_3ffd9345_i + 1) begin
        R_3ffd9345_i = (0) + RR_3ffd9345_i * (1);
                M_left_mux1_in[R_3ffd9345_i][1'h0] = a[R_3ffd9345_i];
                if (R_3ffd9345_i < 5'h10) begin
                    M_left_mux1_in[R_3ffd9345_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux1_in[R_3ffd9345_i][1'h1] = a[R_3ffd9345_i - 5'h10];
                end
            end
            w = M_left_mux1_out;
            for (RR_3ffba392_i = 0; RR_3ffba392_i < 6'h20; RR_3ffba392_i = RR_3ffba392_i + 1) begin
        R_3ffba392_i = (0) + RR_3ffba392_i * (1);
                M_left_mux2_in[R_3ffba392_i][1'h0] = w[R_3ffba392_i];
                if (R_3ffba392_i < 4'h8) begin
                    M_left_mux2_in[R_3ffba392_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux2_in[R_3ffba392_i][1'h1] = w[R_3ffba392_i - 4'h8];
                end
            end
            x = M_left_mux2_out;
            for (RR_789428a2_i = 0; RR_789428a2_i < 6'h20; RR_789428a2_i = RR_789428a2_i + 1) begin
        R_789428a2_i = (0) + RR_789428a2_i * (1);
                M_left_mux3_in[R_789428a2_i][1'h0] = x[R_789428a2_i];
                if (R_789428a2_i < 3'h4) begin
                    M_left_mux3_in[R_789428a2_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux3_in[R_789428a2_i][1'h1] = x[R_789428a2_i - 3'h4];
                end
            end
            y = M_left_mux3_out;
            for (RR_2c4d6c8d_i = 0; RR_2c4d6c8d_i < 6'h20; RR_2c4d6c8d_i = RR_2c4d6c8d_i + 1) begin
        R_2c4d6c8d_i = (0) + RR_2c4d6c8d_i * (1);
                M_left_mux4_in[R_2c4d6c8d_i][1'h0] = y[R_2c4d6c8d_i];
                if (R_2c4d6c8d_i < 2'h2) begin
                    M_left_mux4_in[R_2c4d6c8d_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux4_in[R_2c4d6c8d_i][1'h1] = y[R_2c4d6c8d_i - 2'h2];
                end
            end
            z = M_left_mux4_out;
            for (RR_1c425020_i = 0; RR_1c425020_i < 6'h20; RR_1c425020_i = RR_1c425020_i + 1) begin
        R_1c425020_i = (0) + RR_1c425020_i * (1);
                M_left_mux5_in[R_1c425020_i][1'h0] = z[R_1c425020_i];
                if (R_1c425020_i < 1'h1) begin
                    M_left_mux5_in[R_1c425020_i][1'h1] = 1'h0;
                end else begin
                    M_left_mux5_in[R_1c425020_i][1'h1] = z[R_1c425020_i - 1'h1];
                end
            end
        end else begin
            if (alufn[1'h1:1'h0] == 2'h1) begin
                for (RR_5acfc41c_i = 0; RR_5acfc41c_i < 6'h20; RR_5acfc41c_i = RR_5acfc41c_i + 1) begin
          R_5acfc41c_i = (0) + RR_5acfc41c_i * (1);
                    M_right_mux1_in[R_5acfc41c_i][1'h0] = a[R_5acfc41c_i];
                    if (R_5acfc41c_i < 5'h10) begin
                        M_right_mux1_in[R_5acfc41c_i][1'h1] = a[5'h10 + R_5acfc41c_i];
                    end else begin
                        M_right_mux1_in[R_5acfc41c_i][1'h1] = 1'h0;
                    end
                end
                wr = M_right_mux1_out;
                for (RR_257872dd_i = 0; RR_257872dd_i < 6'h20; RR_257872dd_i = RR_257872dd_i + 1) begin
          R_257872dd_i = (0) + RR_257872dd_i * (1);
                    M_right_mux2_in[R_257872dd_i][1'h0] = wr[R_257872dd_i];
                    if (R_257872dd_i < 5'h18) begin
                        M_right_mux2_in[R_257872dd_i][1'h1] = wr[4'h8 + R_257872dd_i];
                    end else begin
                        M_right_mux2_in[R_257872dd_i][1'h1] = 1'h0;
                    end
                end
                xr = M_right_mux2_out;
                for (RR_0306f32c_i = 0; RR_0306f32c_i < 6'h20; RR_0306f32c_i = RR_0306f32c_i + 1) begin
          R_0306f32c_i = (0) + RR_0306f32c_i * (1);
                    M_right_mux3_in[R_0306f32c_i][1'h0] = xr[R_0306f32c_i];
                    if (R_0306f32c_i < 5'h1c) begin
                        M_right_mux3_in[R_0306f32c_i][1'h1] = xr[3'h4 + R_0306f32c_i];
                    end else begin
                        M_right_mux3_in[R_0306f32c_i][1'h1] = 1'h0;
                    end
                end
                yr = M_right_mux3_out;
                for (RR_342b65d4_i = 0; RR_342b65d4_i < 6'h20; RR_342b65d4_i = RR_342b65d4_i + 1) begin
          R_342b65d4_i = (0) + RR_342b65d4_i * (1);
                    M_right_mux4_in[R_342b65d4_i][1'h0] = yr[R_342b65d4_i];
                    if (R_342b65d4_i < 5'h1e) begin
                        M_right_mux4_in[R_342b65d4_i][1'h1] = yr[2'h2 + R_342b65d4_i];
                    end else begin
                        M_right_mux4_in[R_342b65d4_i][1'h1] = 1'h0;
                    end
                end
                zr = M_right_mux4_out;
                for (RR_645df9eb_i = 0; RR_645df9eb_i < 6'h20; RR_645df9eb_i = RR_645df9eb_i + 1) begin
          R_645df9eb_i = (0) + RR_645df9eb_i * (1);
                    M_right_mux5_in[R_645df9eb_i][1'h0] = zr[R_645df9eb_i];
                    if (R_645df9eb_i < 5'h1f) begin
                        M_right_mux5_in[R_645df9eb_i][1'h1] = zr[1'h1 + R_645df9eb_i];
                    end else begin
                        M_right_mux5_in[R_645df9eb_i][1'h1] = 1'h0;
                    end
                end
            end else begin
                if (alufn[1'h1:1'h0] == 2'h3) begin
                    for (RR_0e2c0eb2_i = 0; RR_0e2c0eb2_i < 6'h20; RR_0e2c0eb2_i = RR_0e2c0eb2_i + 1) begin
            R_0e2c0eb2_i = (0) + RR_0e2c0eb2_i * (1);
                        M_sra_mux1_in[R_0e2c0eb2_i][1'h0] = a[R_0e2c0eb2_i];
                        if (R_0e2c0eb2_i < 5'h10) begin
                            M_sra_mux1_in[R_0e2c0eb2_i][1'h1] = a[5'h10 + R_0e2c0eb2_i];
                        end else begin
                            M_sra_mux1_in[R_0e2c0eb2_i][1'h1] = a[5'h1f];
                        end
                        wra[R_0e2c0eb2_i] = M_sra_mux1_out[R_0e2c0eb2_i];
                    end
                    for (RR_2434de3a_i = 0; RR_2434de3a_i < 6'h20; RR_2434de3a_i = RR_2434de3a_i + 1) begin
            R_2434de3a_i = (0) + RR_2434de3a_i * (1);
                        M_sra_mux2_in[R_2434de3a_i][1'h0] = wra[R_2434de3a_i];
                        if (R_2434de3a_i < 5'h18) begin
                            M_sra_mux2_in[R_2434de3a_i][1'h1] = wra[4'h8 + R_2434de3a_i];
                        end else begin
                            M_sra_mux2_in[R_2434de3a_i][1'h1] = a[5'h1f];
                        end
                        M_sra_mux2_s0[R_2434de3a_i] = b[2'h3];
                        xra[R_2434de3a_i] = M_sra_mux2_out[R_2434de3a_i];
                    end
                    for (RR_6cb784b7_i = 0; RR_6cb784b7_i < 6'h20; RR_6cb784b7_i = RR_6cb784b7_i + 1) begin
            R_6cb784b7_i = (0) + RR_6cb784b7_i * (1);
                        M_sra_mux3_in[R_6cb784b7_i][1'h0] = xra[R_6cb784b7_i];
                        if (R_6cb784b7_i < 5'h1c) begin
                            M_sra_mux3_in[R_6cb784b7_i][1'h1] = xra[3'h4 + R_6cb784b7_i];
                        end else begin
                            M_sra_mux3_in[R_6cb784b7_i][1'h1] = a[5'h1f];
                        end
                        M_sra_mux3_s0[R_6cb784b7_i] = b[2'h2];
                        yra[R_6cb784b7_i] = M_sra_mux3_out[R_6cb784b7_i];
                    end
                    for (RR_7c3b29a1_i = 0; RR_7c3b29a1_i < 6'h20; RR_7c3b29a1_i = RR_7c3b29a1_i + 1) begin
            R_7c3b29a1_i = (0) + RR_7c3b29a1_i * (1);
                        M_sra_mux4_in[R_7c3b29a1_i][1'h0] = yra[R_7c3b29a1_i];
                        if (R_7c3b29a1_i < 5'h1e) begin
                            M_sra_mux4_in[R_7c3b29a1_i][1'h1] = yra[2'h2 + R_7c3b29a1_i];
                        end else begin
                            M_sra_mux4_in[R_7c3b29a1_i][1'h1] = a[5'h1f];
                        end
                        M_sra_mux4_s0[R_7c3b29a1_i] = b[1'h1];
                        zra[R_7c3b29a1_i] = M_sra_mux4_out[R_7c3b29a1_i];
                    end
                    for (RR_4240d6df_i = 0; RR_4240d6df_i < 6'h20; RR_4240d6df_i = RR_4240d6df_i + 1) begin
            R_4240d6df_i = (0) + RR_4240d6df_i * (1);
                        M_sra_mux5_in[R_4240d6df_i][1'h0] = zra[R_4240d6df_i];
                        if (R_4240d6df_i < 5'h1f) begin
                            M_sra_mux5_in[R_4240d6df_i][1'h1] = zra[1'h1 + R_4240d6df_i];
                        end else begin
                            M_sra_mux5_in[R_4240d6df_i][1'h1] = a[5'h1f];
                        end
                        M_sra_mux5_s0[R_4240d6df_i] = b[1'h0];
                    end
                end
            end
        end
        for (RR_2098bc96_i = 0; RR_2098bc96_i < 6'h20; RR_2098bc96_i = RR_2098bc96_i + 1) begin
      R_2098bc96_i = (0) + RR_2098bc96_i * (1);
            M_left_mux1_s0[R_2098bc96_i] = b[3'h4];
            M_left_mux2_s0[R_2098bc96_i] = b[2'h3];
            M_left_mux3_s0[R_2098bc96_i] = b[2'h2];
            M_left_mux4_s0[R_2098bc96_i] = b[1'h1];
            M_left_mux5_s0[R_2098bc96_i] = b[1'h0];
            M_right_mux1_s0[R_2098bc96_i] = b[3'h4];
            M_right_mux2_s0[R_2098bc96_i] = b[2'h3];
            M_right_mux3_s0[R_2098bc96_i] = b[2'h2];
            M_right_mux4_s0[R_2098bc96_i] = b[1'h1];
            M_right_mux5_s0[R_2098bc96_i] = b[1'h0];
            M_sra_mux1_s0[R_2098bc96_i] = b[3'h4];
            M_sra_mux2_s0[R_2098bc96_i] = b[2'h3];
            M_sra_mux3_s0[R_2098bc96_i] = b[2'h2];
            M_sra_mux4_s0[R_2098bc96_i] = b[1'h1];
            M_sra_mux5_s0[R_2098bc96_i] = b[1'h0];
        end
        
        case (alufn[1'h1:1'h0])
            2'h0: begin
                shift = M_left_mux5_out;
            end
            2'h1: begin
                shift = M_right_mux5_out;
            end
            2'h3: begin
                shift = M_sra_mux5_out;
            end
            default: begin
                shift = 1'h0;
            end
        endcase
    end
    
    
endmodule