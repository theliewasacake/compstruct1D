/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module regfile_memory (
        input wire clk,
        input wire rst,
        input wire [4:0] ra1,
        input wire [4:0] ra2,
        output reg [31:0] rd1,
        output reg [31:0] rd2,
        input wire [4:0] wa,
        input wire [31:0] wd,
        input wire we
    );
    logic [31:0][31:0] D_registers_d, D_registers_q = {{32'h0, 32'h0, 32'h0, 32'h0, 32'h0, 32'h0, 32'h0, 32'h0, 32'h0, 32'h0, 32'h0, 32'h0, 32'h0, 32'h0, 32'h0, 32'h0, 32'h0, 32'h0, 32'h0, 32'h0, 32'h0, 32'h0, 32'h0, 32'h0, 32'h0, 32'h0, 32'h0, 32'h0, 32'h0, 32'h0, 32'h0, 32'h0}};
    always @* begin
        D_registers_d = D_registers_q;
        
        D_registers_d = D_registers_q;
        rd1 = 32'h0;
        rd2 = 32'h0;
        if (ra1 == 5'h1f) begin
            rd1 = 32'h0;
        end else begin
            rd1 = D_registers_q[ra1];
        end
        if (ra2 == 5'h1f) begin
            rd2 = 32'h0;
        end else begin
            rd2 = D_registers_q[ra2];
        end
        if (we && (wa != 5'h1f)) begin
            D_registers_d[wa] = wd;
        end
    end
    
    
    always @(posedge (clk)) begin
        if ((rst) == 1'b1) begin
            D_registers_q <= {{32'h0, 32'h0, 32'h0, 32'h0, 32'h0, 32'h0, 32'h0, 32'h0, 32'h0, 32'h0, 32'h0, 32'h0, 32'h0, 32'h0, 32'h0, 32'h0, 32'h0, 32'h0, 32'h0, 32'h0, 32'h0, 32'h0, 32'h0, 32'h0, 32'h0, 32'h0, 32'h0, 32'h0, 32'h0, 32'h0, 32'h0, 32'h0}};
        end else begin
            D_registers_q <= D_registers_d;
        end
    end
endmodule