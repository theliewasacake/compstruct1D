/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module cl_4b_adder (
        input wire [3:0] a,
        input wire [3:0] b,
        input wire c,
        output reg [3:0] s,
        output reg pg,
        output reg gg,
        output reg cg
    );
    logic [31:0] R_2ef014c9_i;
    logic [31:0] RR_2ef014c9_i;
    logic [3:0] M_partial_a;
    logic [3:0] M_partial_b;
    logic [3:0] M_partial_c;
    logic [3:0] M_partial_s;
    logic [3:0] M_partial_p;
    logic [3:0] M_partial_g;
    
    genvar idx_0_80775187;
    
    generate
        for (idx_0_80775187 = 0; idx_0_80775187 < 4; idx_0_80775187 = idx_0_80775187 + 1) begin: forLoop_idx_0_80775187
            partial_cl_adder partial (
                .a(M_partial_a[idx_0_80775187]),
                .b(M_partial_b[idx_0_80775187]),
                .c(M_partial_c[idx_0_80775187]),
                .s(M_partial_s[idx_0_80775187]),
                .p(M_partial_p[idx_0_80775187]),
                .g(M_partial_g[idx_0_80775187])
            );
        end
    endgenerate
    
    
    logic [3:0] ci;
    always @* begin
        for (RR_2ef014c9_i = 0; RR_2ef014c9_i < 3'h4; RR_2ef014c9_i = RR_2ef014c9_i + 1) begin
      R_2ef014c9_i = (0) + RR_2ef014c9_i * (1);
            M_partial_a[R_2ef014c9_i] = a[R_2ef014c9_i];
            M_partial_b[R_2ef014c9_i] = b[R_2ef014c9_i];
            if (R_2ef014c9_i == 1'h0) begin
                ci[R_2ef014c9_i] = c;
            end else begin
                ci[R_2ef014c9_i] = M_partial_g[R_2ef014c9_i - 1'h1] | (M_partial_p[R_2ef014c9_i - 1'h1] & ci[R_2ef014c9_i - 1'h1]);
            end
            M_partial_c[R_2ef014c9_i] = ci[R_2ef014c9_i];
        end
        s = M_partial_s;
        pg = (&M_partial_p);
        gg = M_partial_g[2'h3] | (M_partial_g[2'h2] & M_partial_p[2'h3]) | (M_partial_g[1'h1] & M_partial_p[2'h3] & M_partial_p[2'h2]) | (M_partial_g[1'h0] & M_partial_p[2'h3] & M_partial_p[2'h2] & M_partial_p[1'h1]);
        cg = ci[2'h3];
    end
    
    
endmodule